{"low":[{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized user input in SQL query","description":"## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":46,"full_filename":"/Users/federico/.Juliet/src/testcases/CWE89_SQL_Injection/s03/CWE89_SQL_Injection__getParameter_Servlet_executeUpdate_01.java","filename":"CWE89_SQL_Injection__getParameter_Servlet_executeUpdate_01.java","source":{"start":46,"end":46,"column":{"start":28,"end":125}},"sink":{"start":46,"end":46,"column":{"start":28,"end":125},"content":"sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\"+data+\"'\")"},"parent_line_number":46,"snippet":"sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\"+data+\"'\")","fingerprint":"0c3586a64097f7f7b2417dc2c957c4b7_0","old_fingerprint":"4f936e5030f264724fd0a1bc9b518d5a_0","code_extract":"            int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\"+data+\"'\");"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized user input in SQL query","description":"## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":50,"full_filename":"/Users/federico/.Juliet/src/testcases/CWE89_SQL_Injection/s03/CWE89_SQL_Injection__getParameter_Servlet_executeUpdate_16.java","filename":"CWE89_SQL_Injection__getParameter_Servlet_executeUpdate_16.java","source":{"start":50,"end":50,"column":{"start":32,"end":129}},"sink":{"start":50,"end":50,"column":{"start":32,"end":129},"content":"sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\"+data+\"'\")"},"parent_line_number":50,"snippet":"sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\"+data+\"'\")","fingerprint":"0f96fac93d13c8e6f48a3db837b0286a_0","old_fingerprint":"aaa2edeaf40442fb72763e1bc01a0b5e_2","code_extract":"                int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\"+data+\"'\");"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized user input in SQL query","description":"## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":51,"full_filename":"/Users/federico/.Juliet/src/testcases/CWE89_SQL_Injection/s03/CWE89_SQL_Injection__getParameter_Servlet_executeUpdate_17.java","filename":"CWE89_SQL_Injection__getParameter_Servlet_executeUpdate_17.java","source":{"start":51,"end":51,"column":{"start":32,"end":129}},"sink":{"start":51,"end":51,"column":{"start":32,"end":129},"content":"sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\"+data+\"'\")"},"parent_line_number":51,"snippet":"sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\"+data+\"'\")","fingerprint":"5cbf15fde507cfe07850f3403d251fac_0","old_fingerprint":"4ff221d6feee9d740b938ba9ccf2cd5e_4","code_extract":"                int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\"+data+\"'\");"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized user input in SQL query","description":"## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":53,"full_filename":"/Users/federico/.Juliet/src/testcases/CWE89_SQL_Injection/s03/CWE89_SQL_Injection__getParameter_Servlet_executeUpdate_31.java","filename":"CWE89_SQL_Injection__getParameter_Servlet_executeUpdate_31.java","source":{"start":53,"end":53,"column":{"start":32,"end":129}},"sink":{"start":53,"end":53,"column":{"start":32,"end":129},"content":"sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\"+data+\"'\")"},"parent_line_number":53,"snippet":"sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\"+data+\"'\")","fingerprint":"6c7576875a10dd56b019fba45cf16c83_0","old_fingerprint":"77bd62a5cd99dc40a6e23e14abb1b273_6","code_extract":"                int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\"+data+\"'\");"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized user input in SQL query","description":"## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":46,"full_filename":"/Users/federico/.Juliet/src/testcases/CWE89_SQL_Injection/s03/CWE89_SQL_Injection__getParameter_Servlet_execute_01.java","filename":"CWE89_SQL_Injection__getParameter_Servlet_execute_01.java","source":{"start":46,"end":46,"column":{"start":30,"end":121}},"sink":{"start":46,"end":46,"column":{"start":30,"end":121},"content":"sqlStatement.execute(\"insert into users (status) values ('updated') where name='\"+data+\"'\")"},"parent_line_number":46,"snippet":"sqlStatement.execute(\"insert into users (status) values ('updated') where name='\"+data+\"'\")","fingerprint":"be76d58ed9361a629ab3a8238e146fe1_0","old_fingerprint":"de7854e91e79654cdb56ceb911b385dd_1","code_extract":"            Boolean result = sqlStatement.execute(\"insert into users (status) values ('updated') where name='\"+data+\"'\");"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized user input in SQL query","description":"## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":50,"full_filename":"/Users/federico/.Juliet/src/testcases/CWE89_SQL_Injection/s03/CWE89_SQL_Injection__getParameter_Servlet_execute_16.java","filename":"CWE89_SQL_Injection__getParameter_Servlet_execute_16.java","source":{"start":50,"end":50,"column":{"start":34,"end":125}},"sink":{"start":50,"end":50,"column":{"start":34,"end":125},"content":"sqlStatement.execute(\"insert into users (status) values ('updated') where name='\"+data+\"'\")"},"parent_line_number":50,"snippet":"sqlStatement.execute(\"insert into users (status) values ('updated') where name='\"+data+\"'\")","fingerprint":"7245d25689e3cc60d6c246b278462634_0","old_fingerprint":"e3d882fed316258e987fcb1277b413fc_3","code_extract":"                Boolean result = sqlStatement.execute(\"insert into users (status) values ('updated') where name='\"+data+\"'\");"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized user input in SQL query","description":"## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":51,"full_filename":"/Users/federico/.Juliet/src/testcases/CWE89_SQL_Injection/s03/CWE89_SQL_Injection__getParameter_Servlet_execute_17.java","filename":"CWE89_SQL_Injection__getParameter_Servlet_execute_17.java","source":{"start":51,"end":51,"column":{"start":34,"end":125}},"sink":{"start":51,"end":51,"column":{"start":34,"end":125},"content":"sqlStatement.execute(\"insert into users (status) values ('updated') where name='\"+data+\"'\")"},"parent_line_number":51,"snippet":"sqlStatement.execute(\"insert into users (status) values ('updated') where name='\"+data+\"'\")","fingerprint":"5a1bcf40a8119adc18111fefaf4919c8_0","old_fingerprint":"d69e630631b4ff272128eb59c2807e1f_5","code_extract":"                Boolean result = sqlStatement.execute(\"insert into users (status) values ('updated') where name='\"+data+\"'\");"},{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized user input in SQL query","description":"## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":53,"full_filename":"/Users/federico/.Juliet/src/testcases/CWE89_SQL_Injection/s03/CWE89_SQL_Injection__getParameter_Servlet_execute_31.java","filename":"CWE89_SQL_Injection__getParameter_Servlet_execute_31.java","source":{"start":53,"end":53,"column":{"start":34,"end":125}},"sink":{"start":53,"end":53,"column":{"start":34,"end":125},"content":"sqlStatement.execute(\"insert into users (status) values ('updated') where name='\"+data+\"'\")"},"parent_line_number":53,"snippet":"sqlStatement.execute(\"insert into users (status) values ('updated') where name='\"+data+\"'\")","fingerprint":"4823e685e556125a018ac411796dec1e_0","old_fingerprint":"125b3a3b74e927b58dee26d4f8891d3c_7","code_extract":"                Boolean result = sqlStatement.execute(\"insert into users (status) values ('updated') where name='\"+data+\"'\");"}],"warning":[{"cwe_ids":["209"],"id":"java_lang_information_leakage","title":"Leakage of sensitive information in exception message","description":"## Description\n\nPrinting a stack trace to the default output is risky because it may contain sensitive information such as the technical details of your application or environment (which in turn could expose your application to path traversal attacks, for example), or worse, user-specific data.\n\n## Remediations\n\n❌ Avoid printing the full stack trace\n\n✅ Less is more! Only log the minimum required details in error messages\n\n## Resources\n\n- [Web Application Security Consortium: Information Leakage](http://projects.webappsec.org/w/page/13246936/Information%20Leakage)\n","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_information_leakage","line_number":47,"full_filename":"/Users/federico/.Juliet/src/testcases/CWE89_SQL_Injection/s03/Main.java","filename":"Main.java","source":{"start":47,"end":47,"column":{"start":6,"end":26}},"sink":{"start":47,"end":47,"column":{"start":6,"end":26},"content":"ex.printStackTrace()"},"parent_line_number":47,"snippet":"ex.printStackTrace()","fingerprint":"913aab8cb77a8ee6e31c915a33982b81_0","old_fingerprint":"dd1d8d594ec2c9d3d459b52603c7b585_0","code_extract":"\t\t\t\t\tex.printStackTrace();"},{"cwe_ids":["209"],"id":"java_lang_information_leakage","title":"Leakage of sensitive information in exception message","description":"## Description\n\nPrinting a stack trace to the default output is risky because it may contain sensitive information such as the technical details of your application or environment (which in turn could expose your application to path traversal attacks, for example), or worse, user-specific data.\n\n## Remediations\n\n❌ Avoid printing the full stack trace\n\n✅ Less is more! Only log the minimum required details in error messages\n\n## Resources\n\n- [Web Application Security Consortium: Information Leakage](http://projects.webappsec.org/w/page/13246936/Information%20Leakage)\n","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_information_leakage","line_number":47,"full_filename":"/Users/federico/.Juliet/src/testcases/CWE89_SQL_Injection/s03/antbuild/testcases/CWE89_SQL_Injection/Main.java","filename":"antbuild/testcases/CWE89_SQL_Injection/Main.java","source":{"start":47,"end":47,"column":{"start":6,"end":26}},"sink":{"start":47,"end":47,"column":{"start":6,"end":26},"content":"ex.printStackTrace()"},"parent_line_number":47,"snippet":"ex.printStackTrace()","fingerprint":"f890850ea5401a6c039e2fe52cdf186c_0","old_fingerprint":"e9e6042a55ecf48ab20555690fc5aee3_1","code_extract":"\t\t\t\t\tex.printStackTrace();"},{"cwe_ids":["209"],"id":"java_lang_information_leakage","title":"Leakage of sensitive information in exception message","description":"## Description\n\nPrinting a stack trace to the default output is risky because it may contain sensitive information such as the technical details of your application or environment (which in turn could expose your application to path traversal attacks, for example), or worse, user-specific data.\n\n## Remediations\n\n❌ Avoid printing the full stack trace\n\n✅ Less is more! Only log the minimum required details in error messages\n\n## Resources\n\n- [Web Application Security Consortium: Information Leakage](http://projects.webappsec.org/w/page/13246936/Information%20Leakage)\n","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_information_leakage","line_number":47,"full_filename":"/Users/federico/.Juliet/src/testcases/CWE89_SQL_Injection/s03/antbuild/testcases/CWE89_SQL_Injection/s03/Main.java","filename":"antbuild/testcases/CWE89_SQL_Injection/s03/Main.java","source":{"start":47,"end":47,"column":{"start":6,"end":26}},"sink":{"start":47,"end":47,"column":{"start":6,"end":26},"content":"ex.printStackTrace()"},"parent_line_number":47,"snippet":"ex.printStackTrace()","fingerprint":"b54dc80c8a06f60cec6b0993a3a9263d_0","old_fingerprint":"d59fa1da35f1295a470a3820231691c1_2","code_extract":"\t\t\t\t\tex.printStackTrace();"}]}
