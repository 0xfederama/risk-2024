{"high":[{"cwe_ids":["798"],"id":"javascript_express_hardcoded_secret","title":"Usage of hard-coded secret","description":"## Description\n\nCode is not a safe place to store secrets. Use environment variables or a secret management system instead.\n\n## Remediations\n\n❌ Do not store plaintext secrets in your code\n\n```javascript\n app.use(\n  session({\n    secret: \"shh-my-secret\",\n    name: \"my-custom-session-name\",\n  })\n)\n```\n\n✅ Use environment variables\n\n```javascript\n app.use(\n  session({\n    secret: process.env.secret,\n    name: \"my-custom-session-name\",\n  })\n)\n```\n\n✅ Use a secret management system or even better, a key management service (KMS) with encryption\n\n## Resources\n- [OWASP hardcoded passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)\n- [Google Cloud Key Management Service](https://cloud.google.com/kms/docs)\n- [AWS Key Management Service](https://aws.amazon.com/kms/)\n","documentation_url":"https://docs.bearer.com/reference/rules/javascript_express_hardcoded_secret","line_number":56,"full_filename":"../juice-shop/lib/insecurity.ts","filename":"lib/insecurity.ts","category_groups":["PII","Personal Data"],"source":{"start":56,"end":56,"column":{"start":41,"end":108}},"sink":{"start":56,"end":56,"column":{"start":41,"end":108},"content":"jwt.sign(user, privateKey, { expiresIn: '6h', algorithm: 'RS256' })"},"parent_line_number":56,"snippet":"jwt.sign(user, privateKey, { expiresIn: '6h', algorithm: 'RS256' })","fingerprint":"c095a5cc1948bae67c38b5c5d85eb4f4_0","old_fingerprint":"7a37b73ff2ec770b5e8370623cab2b21_0","code_extract":"export const authorize = (user = {}) =\u003e jwt.sign(user, privateKey, { expiresIn: '6h', algorithm: 'RS256' })"},{"cwe_ids":["73"],"id":"javascript_express_path_traversal","title":"Unsanitized user input in file path","description":"## Description\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\n- Use `replace()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n- Actively guard against paths that end in \"%00\" (poison NULL byte attacks)\n- Use path concatenation to ensure the intended scope is respected\n\n```javascript\nconst path = require(\"path\");\n\napp.get(\"/\", (req, res) =\u003e {\n  if (req.params.path.indexOf('\\0')) !== -1 {\n    // prevent access\n  }\n\n  var folder = req.params.path.replace(/^(\\.\\.(\\/|\\\\|$))+/, '')\n\n  var pathname = path.join(\"/public/\", folder)\n  if pathname.indexOf(\"/public/\") !== 0 {\n    // prevent access\n  }\n\n  path.resolve(pathname)\n})\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n","documentation_url":"https://docs.bearer.com/reference/rules/javascript_express_path_traversal","line_number":69,"full_filename":"../juice-shop/routes/dataErasure.ts","filename":"routes/dataErasure.ts","category_groups":["PII","Personal Data"],"source":{"start":69,"end":69,"column":{"start":32,"end":61}},"sink":{"start":69,"end":69,"column":{"start":32,"end":61},"content":"path.resolve(req.body.layout)"},"parent_line_number":69,"snippet":"path.resolve(req.body.layout)","fingerprint":"730d1c5106516470d1853a35c4aca01b_0","old_fingerprint":"d5f9262c18e1b80e1637dbf0016b6635_3","code_extract":"      const filePath: string = path.resolve(req.body.layout).toLowerCase()"},{"cwe_ids":["73"],"id":"javascript_express_path_traversal","title":"Unsanitized user input in file path","description":"## Description\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\n- Use `replace()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n- Actively guard against paths that end in \"%00\" (poison NULL byte attacks)\n- Use path concatenation to ensure the intended scope is respected\n\n```javascript\nconst path = require(\"path\");\n\napp.get(\"/\", (req, res) =\u003e {\n  if (req.params.path.indexOf('\\0')) !== -1 {\n    // prevent access\n  }\n\n  var folder = req.params.path.replace(/^(\\.\\.(\\/|\\\\|$))+/, '')\n\n  var pathname = path.join(\"/public/\", folder)\n  if pathname.indexOf(\"/public/\") !== 0 {\n    // prevent access\n  }\n\n  path.resolve(pathname)\n})\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n","documentation_url":"https://docs.bearer.com/reference/rules/javascript_express_path_traversal","line_number":14,"full_filename":"../juice-shop/routes/keyServer.ts","filename":"routes/keyServer.ts","category_groups":["PII","Personal Data"],"source":{"start":14,"end":14,"column":{"start":20,"end":57}},"sink":{"start":14,"end":14,"column":{"start":20,"end":57},"content":"path.resolve('encryptionkeys/', file)"},"parent_line_number":14,"snippet":"path.resolve('encryptionkeys/', file)","fingerprint":"f0fdc8f875e9b77313305edb186aec62_0","old_fingerprint":"b87b14c88033a3e39e6caaa479df5ac1_0","code_extract":"      res.sendFile(path.resolve('encryptionkeys/', file))"},{"cwe_ids":["73"],"id":"javascript_express_path_traversal","title":"Unsanitized user input in file path","description":"## Description\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\n- Use `replace()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n- Actively guard against paths that end in \"%00\" (poison NULL byte attacks)\n- Use path concatenation to ensure the intended scope is respected\n\n```javascript\nconst path = require(\"path\");\n\napp.get(\"/\", (req, res) =\u003e {\n  if (req.params.path.indexOf('\\0')) !== -1 {\n    // prevent access\n  }\n\n  var folder = req.params.path.replace(/^(\\.\\.(\\/|\\\\|$))+/, '')\n\n  var pathname = path.join(\"/public/\", folder)\n  if pathname.indexOf(\"/public/\") !== 0 {\n    // prevent access\n  }\n\n  path.resolve(pathname)\n})\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n","documentation_url":"https://docs.bearer.com/reference/rules/javascript_express_path_traversal","line_number":14,"full_filename":"../juice-shop/routes/logfileServer.ts","filename":"routes/logfileServer.ts","category_groups":["PII","Personal Data"],"source":{"start":14,"end":14,"column":{"start":20,"end":47}},"sink":{"start":14,"end":14,"column":{"start":20,"end":47},"content":"path.resolve('logs/', file)"},"parent_line_number":14,"snippet":"path.resolve('logs/', file)","fingerprint":"51001ae13fdae4f062cec51a842161b2_0","old_fingerprint":"4f4d7f1e4601594ee761e930611b8581_1","code_extract":"      res.sendFile(path.resolve('logs/', file))"},{"cwe_ids":["73"],"id":"javascript_express_path_traversal","title":"Unsanitized user input in file path","description":"## Description\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\n- Use `replace()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n- Actively guard against paths that end in \"%00\" (poison NULL byte attacks)\n- Use path concatenation to ensure the intended scope is respected\n\n```javascript\nconst path = require(\"path\");\n\napp.get(\"/\", (req, res) =\u003e {\n  if (req.params.path.indexOf('\\0')) !== -1 {\n    // prevent access\n  }\n\n  var folder = req.params.path.replace(/^(\\.\\.(\\/|\\\\|$))+/, '')\n\n  var pathname = path.join(\"/public/\", folder)\n  if pathname.indexOf(\"/public/\") !== 0 {\n    // prevent access\n  }\n\n  path.resolve(pathname)\n})\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n","documentation_url":"https://docs.bearer.com/reference/rules/javascript_express_path_traversal","line_number":14,"full_filename":"../juice-shop/routes/quarantineServer.ts","filename":"routes/quarantineServer.ts","category_groups":["PII","Personal Data"],"source":{"start":14,"end":14,"column":{"start":20,"end":57}},"sink":{"start":14,"end":14,"column":{"start":20,"end":57},"content":"path.resolve('ftp/quarantine/', file)"},"parent_line_number":14,"snippet":"path.resolve('ftp/quarantine/', file)","fingerprint":"a59cb4c55fa6ab0b98f1f061b0262ee1_0","old_fingerprint":"ffff1abbe6f2a3417c49bb593804367d_2","code_extract":"      res.sendFile(path.resolve('ftp/quarantine/', file))"},{"cwe_ids":["79"],"id":"javascript_lang_dangerous_insert_html","title":"Unsanitized user input in dynamic HTML insertion (XSS)","description":"## Description\nThere are XSS vulnerabilities when dynamically inserting HTML that contains unsanitized data.\n\n## Remediations\nMake sure you use HTML sanitization library before inserting html\n\n```javascript\nimport sanitizeHtml from 'sanitize-html';\n\nconst html = `\u003cstrong\u003e${user.Input}\u003c/strong\u003e`;\ndocument.body.innerHTML = sanitizeHtml(html)\n```\n\n## Resources\n- [OWASP XSS explained](https://owasp.org/www-community/attacks/xss/)\n","documentation_url":"https://docs.bearer.com/reference/rules/javascript_lang_dangerous_insert_html","line_number":107,"full_filename":"../juice-shop/frontend/src/hacking-instructor/index.ts","filename":"frontend/src/hacking-instructor/index.ts","category_groups":["PII","Personal Data"],"source":{"start":107,"end":107,"column":{"start":3,"end":43}},"sink":{"start":107,"end":107,"column":{"start":3,"end":43},"content":"textBox.innerHTML = snarkdown(hint.text)"},"parent_line_number":107,"snippet":"textBox.innerHTML = snarkdown(hint.text)","fingerprint":"bf127e52a210d7d5cdb66cacceb977ff_0","old_fingerprint":"1051225ab7c3288fa899e585c14564d4_0","code_extract":"  textBox.innerHTML = snarkdown(hint.text)"},{"cwe_ids":["95"],"id":"javascript_lang_eval_user_input","title":"Unsanitized user input in 'eval' type function","description":"## Description\nUsing `eval` (and similar code execution methods such as `setTimeout`) with user input is dangerous and can lead to remote code execution.\n\n## Remediation\n❌ As a general rule, avoid using `eval`.\n\n❌ Avoid using code execution methods with unsanitized user input.\n\nInstead, it might be possible to use dynamic hardcoded values:\n```javascript\n  app.post(\"/:id\", (req, res) =\u003e {\n    let myFunc = \"(a, b) =\u003e a + b\"\n    if req.params[\"single_item\"] {\n      myFunc = \"(a) =\u003e a\"\n    }\n\n    setTimeout(myFunc);\n  };\n```\nor pass user input to a compiled function, instead of compiling it with user input.\n```javascript\n  app.post(\"/:id\", (req, res) =\u003e {\n    let myFunc = \"(a, b) =\u003e a + b\"\n    let compiledFunction = vm.compileFunction(myFunc);\n    compiledFunction(req.params[\"pageCount\"], req.params[\"appendixPageCount\"])\n  };\n```\n\n✅ Use JavaScript's strict mode as best practice and to minimize the reach of code execution methods\n\n```javascript\n  \"use strict\"\n\n  app.post(\"/:id\", (req, res) =\u003e {\n    ...\n  })\n```\n\n## Resources\n- [MDN JavaScript strict mode reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode)\n","documentation_url":"https://docs.bearer.com/reference/rules/javascript_lang_eval_user_input","line_number":21,"full_filename":"../juice-shop/routes/b2bOrder.ts","filename":"routes/b2bOrder.ts","category_groups":["PII","Personal Data"],"source":{"start":21,"end":21,"column":{"start":9,"end":34}},"sink":{"start":21,"end":21,"column":{"start":9,"end":34},"content":"vm.createContext(sandbox)"},"parent_line_number":21,"snippet":"vm.createContext(sandbox)","fingerprint":"07e54b106f46e8d2158d7cc39518dab0_0","old_fingerprint":"ef2507b5570874457dd8252974a5cba7_0","code_extract":"        vm.createContext(sandbox)"},{"cwe_ids":["95"],"id":"javascript_lang_eval_user_input","title":"Unsanitized user input in 'eval' type function","description":"## Description\nUsing `eval` (and similar code execution methods such as `setTimeout`) with user input is dangerous and can lead to remote code execution.\n\n## Remediation\n❌ As a general rule, avoid using `eval`.\n\n❌ Avoid using code execution methods with unsanitized user input.\n\nInstead, it might be possible to use dynamic hardcoded values:\n```javascript\n  app.post(\"/:id\", (req, res) =\u003e {\n    let myFunc = \"(a, b) =\u003e a + b\"\n    if req.params[\"single_item\"] {\n      myFunc = \"(a) =\u003e a\"\n    }\n\n    setTimeout(myFunc);\n  };\n```\nor pass user input to a compiled function, instead of compiling it with user input.\n```javascript\n  app.post(\"/:id\", (req, res) =\u003e {\n    let myFunc = \"(a, b) =\u003e a + b\"\n    let compiledFunction = vm.compileFunction(myFunc);\n    compiledFunction(req.params[\"pageCount\"], req.params[\"appendixPageCount\"])\n  };\n```\n\n✅ Use JavaScript's strict mode as best practice and to minimize the reach of code execution methods\n\n```javascript\n  \"use strict\"\n\n  app.post(\"/:id\", (req, res) =\u003e {\n    ...\n  })\n```\n\n## Resources\n- [MDN JavaScript strict mode reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode)\n","documentation_url":"https://docs.bearer.com/reference/rules/javascript_lang_eval_user_input","line_number":22,"full_filename":"../juice-shop/routes/b2bOrder.ts","filename":"routes/b2bOrder.ts","category_groups":["PII","Personal Data"],"source":{"start":22,"end":22,"column":{"start":9,"end":80}},"sink":{"start":22,"end":22,"column":{"start":9,"end":80},"content":"vm.runInContext('safeEval(orderLinesData)', sandbox, { timeout: 2000 })"},"parent_line_number":22,"snippet":"vm.runInContext('safeEval(orderLinesData)', sandbox, { timeout: 2000 })","fingerprint":"07e54b106f46e8d2158d7cc39518dab0_1","old_fingerprint":"ef2507b5570874457dd8252974a5cba7_1","code_extract":"        vm.runInContext('safeEval(orderLinesData)', sandbox, { timeout: 2000 })"},{"cwe_ids":["798"],"id":"javascript_lang_hardcoded_secret","title":"Usage of hard-coded secret","description":"## Description\n\nCode is not a safe place to store secrets. Use environment variables or a secret management system instead.\n\n## Remediations\n\n❌ Do not store plaintext secrets in your code\n\n```javascript\n  passport.use(new OAuth2Strategy({\n      authorizationURL: 'https://www.example.com/oauth2/authorize',\n      tokenURL: 'https://www.example.com/oauth2/token',\n      clientID: 'my-id-123',\n      clientSecret: 'shh-my-secret',\n      callbackURL: 'http://localhost:3000/auth/example/callback'\n    },\n    function(accessToken, refreshToken, profile, cb) {\n      User.findOrCreate({ exampleId: profile.id }, function (err, user) {\n        return cb(err, user);\n      });\n    }\n  ));\n```\n\n✅ Use environment variables\n\n```javascript\n  passport.use(new OAuth2Strategy({\n      authorizationURL: 'https://www.example.com/oauth2/authorize',\n      tokenURL: 'https://www.example.com/oauth2/token',\n      clientID:  process.env.CLIENT_ID,\n      clientSecret: process.env.CLIENT_SECRET,\n      callbackURL: 'http://localhost:3000/auth/example/callback'\n    },\n    function(accessToken, refreshToken, profile, cb) {\n      User.findOrCreate({ exampleId: profile.id }, function (err, user) {\n        return cb(err, user);\n      });\n    }\n  ));\n```\n\n✅ Use a secret management system or even better, a key management service (KMS) with encryption, to manage and access your secrets\n\n## Resources\n- [OWASP hardcoded passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)\n- [Google Cloud Key Management Service](https://cloud.google.com/kms/docs)\n- [AWS Key Management Service](https://aws.amazon.com/kms/)\n","documentation_url":"https://docs.bearer.com/reference/rules/javascript_lang_hardcoded_secret","line_number":44,"full_filename":"../juice-shop/lib/insecurity.ts","filename":"lib/insecurity.ts","category_groups":["PII","Personal Data"],"source":{"start":44,"end":44,"column":{"start":39,"end":94}},"sink":{"start":44,"end":44,"column":{"start":39,"end":94},"content":"crypto.createHmac('sha256', 'pa4qacea4VK9t9nGv7yZtwmj')"},"parent_line_number":44,"snippet":"crypto.createHmac('sha256', 'pa4qacea4VK9t9nGv7yZtwmj')","fingerprint":"d699b64784f6ca1135369f86e4b64ecb_0","old_fingerprint":"0ee003677c34148e78242ade6b104735_0","code_extract":"export const hmac = (data: string) =\u003e crypto.createHmac('sha256', 'pa4qacea4VK9t9nGv7yZtwmj').update(data).digest('hex')"},{"cwe_ids":["798"],"id":"javascript_lang_hardcoded_secret","title":"Usage of hard-coded secret","description":"## Description\n\nCode is not a safe place to store secrets. Use environment variables or a secret management system instead.\n\n## Remediations\n\n❌ Do not store plaintext secrets in your code\n\n```javascript\n  passport.use(new OAuth2Strategy({\n      authorizationURL: 'https://www.example.com/oauth2/authorize',\n      tokenURL: 'https://www.example.com/oauth2/token',\n      clientID: 'my-id-123',\n      clientSecret: 'shh-my-secret',\n      callbackURL: 'http://localhost:3000/auth/example/callback'\n    },\n    function(accessToken, refreshToken, profile, cb) {\n      User.findOrCreate({ exampleId: profile.id }, function (err, user) {\n        return cb(err, user);\n      });\n    }\n  ));\n```\n\n✅ Use environment variables\n\n```javascript\n  passport.use(new OAuth2Strategy({\n      authorizationURL: 'https://www.example.com/oauth2/authorize',\n      tokenURL: 'https://www.example.com/oauth2/token',\n      clientID:  process.env.CLIENT_ID,\n      clientSecret: process.env.CLIENT_SECRET,\n      callbackURL: 'http://localhost:3000/auth/example/callback'\n    },\n    function(accessToken, refreshToken, profile, cb) {\n      User.findOrCreate({ exampleId: profile.id }, function (err, user) {\n        return cb(err, user);\n      });\n    }\n  ));\n```\n\n✅ Use a secret management system or even better, a key management service (KMS) with encryption, to manage and access your secrets\n\n## Resources\n- [OWASP hardcoded passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)\n- [Google Cloud Key Management Service](https://cloud.google.com/kms/docs)\n- [AWS Key Management Service](https://aws.amazon.com/kms/)\n","documentation_url":"https://docs.bearer.com/reference/rules/javascript_lang_hardcoded_secret","line_number":54,"full_filename":"../juice-shop/lib/insecurity.ts","filename":"lib/insecurity.ts","category_groups":["PII","Personal Data"],"source":{"start":54,"end":54,"column":{"start":49,"end":66}},"sink":{"start":54,"end":54,"column":{"start":49,"end":66},"content":"secret: publicKey"},"parent_line_number":54,"snippet":"secret: publicKey","fingerprint":"d699b64784f6ca1135369f86e4b64ecb_1","old_fingerprint":"0ee003677c34148e78242ade6b104735_1","code_extract":"export const isAuthorized = () =\u003e expressJwt(({ secret: publicKey }) as any)"},{"cwe_ids":["798"],"id":"javascript_lang_hardcoded_secret","title":"Usage of hard-coded secret","description":"## Description\n\nCode is not a safe place to store secrets. Use environment variables or a secret management system instead.\n\n## Remediations\n\n❌ Do not store plaintext secrets in your code\n\n```javascript\n  passport.use(new OAuth2Strategy({\n      authorizationURL: 'https://www.example.com/oauth2/authorize',\n      tokenURL: 'https://www.example.com/oauth2/token',\n      clientID: 'my-id-123',\n      clientSecret: 'shh-my-secret',\n      callbackURL: 'http://localhost:3000/auth/example/callback'\n    },\n    function(accessToken, refreshToken, profile, cb) {\n      User.findOrCreate({ exampleId: profile.id }, function (err, user) {\n        return cb(err, user);\n      });\n    }\n  ));\n```\n\n✅ Use environment variables\n\n```javascript\n  passport.use(new OAuth2Strategy({\n      authorizationURL: 'https://www.example.com/oauth2/authorize',\n      tokenURL: 'https://www.example.com/oauth2/token',\n      clientID:  process.env.CLIENT_ID,\n      clientSecret: process.env.CLIENT_SECRET,\n      callbackURL: 'http://localhost:3000/auth/example/callback'\n    },\n    function(accessToken, refreshToken, profile, cb) {\n      User.findOrCreate({ exampleId: profile.id }, function (err, user) {\n        return cb(err, user);\n      });\n    }\n  ));\n```\n\n✅ Use a secret management system or even better, a key management service (KMS) with encryption, to manage and access your secrets\n\n## Resources\n- [OWASP hardcoded passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)\n- [Google Cloud Key Management Service](https://cloud.google.com/kms/docs)\n- [AWS Key Management Service](https://aws.amazon.com/kms/)\n","documentation_url":"https://docs.bearer.com/reference/rules/javascript_lang_hardcoded_secret","line_number":158,"full_filename":"../juice-shop/lib/insecurity.ts","filename":"lib/insecurity.ts","category_groups":["PII","Personal Data"],"source":{"start":158,"end":158,"column":{"start":16,"end":55}},"sink":{"start":158,"end":158,"column":{"start":16,"end":55},"content":"crypto.createHmac('sha256', privateKey)"},"parent_line_number":158,"snippet":"crypto.createHmac('sha256', privateKey)","fingerprint":"d699b64784f6ca1135369f86e4b64ecb_2","old_fingerprint":"0ee003677c34148e78242ade6b104735_2","code_extract":"  const hmac = crypto.createHmac('sha256', privateKey)"},{"cwe_ids":["918"],"id":"javascript_lang_http_url_using_user_input","title":"Unsanitized user input in HTTP request (SSRF)","description":"## Description\n\nApplications should not connect to locations formed from user input.\nThis rule checks for URLs containing user-supplied data.\n\n## Remediations\n\n❌ Avoid using user input in HTTP URLs:\n\n```javascript\nconst response = axios.get(`https://${req.params.host}`)\n```\n\n✅ Use user input indirectly to form a URL:\n\n```javascript\nconst hosts = new Map([\n  [\"option1\", \"api1.com\"],\n  [\"option2\", \"api2.com\"]\n])\n\nconst host = hosts.get(req.params.host)\nconst response = axois.get(`https://${host}`)\n```\n","documentation_url":"https://docs.bearer.com/reference/rules/javascript_lang_http_url_using_user_input","line_number":22,"full_filename":"../juice-shop/routes/profileImageUrlUpload.ts","filename":"routes/profileImageUrlUpload.ts","category_groups":["PII","Personal Data"],"source":{"start":22,"end":23,"column":{"start":30,"end":20}},"sink":{"start":22,"end":23,"column":{"start":30,"end":20},"content":"request\n          .get(url)"},"parent_line_number":22,"snippet":"request\n          .get(url)","fingerprint":"8ed612ce6d89f70e214b65244f8793b4_0","old_fingerprint":"d45d16bcd2a2bd4bbade658e75f085b2_0","code_extract":"        const imageRequest = request\n          .get(url)"},{"cwe_ids":["798"],"id":"javascript_lang_jwt_hardcoded_secret","title":"Leakage of hard-coded secret in JWT","description":"## Description\n\nCode is not a secure place to store secrets, use environment variables instead.\n\n## Remediations\n\nUse environment variables\n\n```javascript\n  var jwt = require(\"jsonwebtoken\");\n\n  var token = jwt.sign({ foo: \"bar\" }, process.env.JWT_SECRET);\n```\n\n## Resources\n- [OWASP hardcoded passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)\n","documentation_url":"https://docs.bearer.com/reference/rules/javascript_lang_jwt_hardcoded_secret","line_number":56,"full_filename":"../juice-shop/lib/insecurity.ts","filename":"lib/insecurity.ts","category_groups":["PII","Personal Data"],"source":{"start":56,"end":56,"column":{"start":41,"end":108}},"sink":{"start":56,"end":56,"column":{"start":41,"end":108},"content":"jwt.sign(user, privateKey, { expiresIn: '6h', algorithm: 'RS256' })"},"parent_line_number":56,"snippet":"jwt.sign(user, privateKey, { expiresIn: '6h', algorithm: 'RS256' })","fingerprint":"50ebccec98d14333da6adb3b94c79730_0","old_fingerprint":"d78b0e6116b936ffb5c4e191a0e64fbf_0","code_extract":"export const authorize = (user = {}) =\u003e jwt.sign(user, privateKey, { expiresIn: '6h', algorithm: 'RS256' })"},{"cwe_ids":["532"],"id":"javascript_lang_logger","title":"Leakage of sensitive information in logger message","description":"## Description\n\nLeaking sensitive data to loggers is a common cause of data leaks and can lead to data breaches. This rule looks for instances of sensitive data sent to loggers.\n\n## Remediations\n\n❌ Avoid using sensitive data in logger messages:\n\n```javascript\nlogger.info(`User is: ${user.email}`)\n```\n\n✅ If you need to identify a user, use their unique identifier instead of their personal identifiable information:\n\n```javascript\nlogger.info(`User is: ${user.uuid}`)\n```\n## Resources\n- [OWASP logging cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html)\n","documentation_url":"https://docs.bearer.com/reference/rules/javascript_lang_logger","line_number":108,"full_filename":"../juice-shop/frontend/src/app/faucet/faucet.component.ts","filename":"frontend/src/app/faucet/faucet.component.ts","data_type":{"category_uuid":"cef587dd-76db-430b-9e18-7b031e1a193b","name":"Physical Address"},"category_groups":["PII","Personal Data"],"source":{"start":106,"end":106,"column":{"start":33,"end":50}},"sink":{"start":108,"end":108,"column":{"start":7,"end":36},"content":"console.log(balanceBigNumber)"},"parent_line_number":108,"snippet":"console.log(balanceBigNumber)","fingerprint":"c44141692e5287b9db7db0edad5e66ca_0","old_fingerprint":"346d384cadd476c9a8bc61a56a2dad95_0","code_extract":"      console.log(balanceBigNumber)"},{"cwe_ids":["532"],"id":"javascript_lang_logger","title":"Leakage of sensitive information in logger message","description":"## Description\n\nLeaking sensitive data to loggers is a common cause of data leaks and can lead to data breaches. This rule looks for instances of sensitive data sent to loggers.\n\n## Remediations\n\n❌ Avoid using sensitive data in logger messages:\n\n```javascript\nlogger.info(`User is: ${user.email}`)\n```\n\n✅ If you need to identify a user, use their unique identifier instead of their personal identifiable information:\n\n```javascript\nlogger.info(`User is: ${user.uuid}`)\n```\n## Resources\n- [OWASP logging cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html)\n","documentation_url":"https://docs.bearer.com/reference/rules/javascript_lang_logger","line_number":213,"full_filename":"../juice-shop/frontend/src/app/faucet/faucet.component.ts","filename":"frontend/src/app/faucet/faucet.component.ts","data_type":{"category_uuid":"cef587dd-76db-430b-9e18-7b031e1a193b","name":"Physical Address"},"category_groups":["PII","Personal Data"],"source":{"start":207,"end":207,"column":{"start":33,"end":50}},"sink":{"start":213,"end":213,"column":{"start":7,"end":65},"content":"console.log('ETH balance:', balanceEth, typeof balanceEth)"},"parent_line_number":213,"snippet":"console.log('ETH balance:', balanceEth, typeof balanceEth)","fingerprint":"c44141692e5287b9db7db0edad5e66ca_1","old_fingerprint":"346d384cadd476c9a8bc61a56a2dad95_1","code_extract":"      console.log('ETH balance:', balanceEth, typeof balanceEth)"},{"cwe_ids":["312"],"id":"javascript_lang_session","title":"Leakage of sensitive data in local storage","description":"## Description\n\nSensitive data should not be stored in a `localStorage` session. This policy looks for any sensitive data stored within the localstorage.\n\n## Remediations\n\nIt's best to avoid storing sensitive data in `localStorage` whenever possible. To keep session data safe, use a server-based session storage solution instead.\n\n❌ If you do need do store data in `localStorage`, avoid including sensitive data:\n\n```javascript\nlocalStorage.setItem('user', email)\n```\n\n✅ Instead, use a unique identifier:\n\n```javascript\nlocalStorage.setItem('user', user.uuid)\n```\n\n## Resources\n  - [OWASP sensitive data exposure](https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure)\n","documentation_url":"https://docs.bearer.com/reference/rules/javascript_lang_session","line_number":101,"full_filename":"../juice-shop/frontend/src/app/login/login.component.ts","filename":"frontend/src/app/login/login.component.ts","data_type":{"category_uuid":"cef587dd-76db-430b-9e18-7b031e1a193b","name":"Email Address"},"category_groups":["PII","Personal Data"],"source":{"start":101,"end":101,"column":{"start":37,"end":52}},"sink":{"start":101,"end":101,"column":{"start":7,"end":53},"content":"localStorage.setItem('email', this.user.email)"},"parent_line_number":101,"snippet":"localStorage.setItem('email', this.user.email)","fingerprint":"f9657c5f0e228532df66e6987928ea19_0","old_fingerprint":"9184af87a131899637624e749a5732c5_0","code_extract":"      localStorage.setItem('email', this.user.email)"},{"cwe_ids":["89"],"id":"javascript_lang_sql_injection","title":"Unsanitized user input in SQL query","description":"## Description\nIncluding unsanitized data, such as user input or request data, in raw SQL queries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input\n\n```javascript\n  var sqlite = new Sequelize(\"sqlite::memory:\");\n  sqlite.query(\"SELECT * FROM users WHERE ID = \" + req.params.userId);\n```\n\nInstead, consider the following approaches when writing SQL queries\n\n✅ Validate query input wherever possible\n\n```javascript\n  var rawId = req.params.userId\n  if !(/[0-9]+/.test(rawId)) {\n    // input is unexpected; don't make the query\n  }\n```\n\n✅ Use prepared (or parameterized) statements when querying\n\nSequelize example -\n```javascript\n  var sqlite = new Sequelize(\"sqlite::memory:\");\n  sqlite.query(\n    \"SELECT * FROM users WHERE ID = ?\",\n    { replacements: [req.params.userId] },\n    type: sequelize.QueryTypes.SELECT\n  )\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n","documentation_url":"https://docs.bearer.com/reference/rules/javascript_lang_sql_injection","line_number":5,"full_filename":"../juice-shop/data/static/codefixes/dbSchemaChallenge_1.ts","filename":"data/static/codefixes/dbSchemaChallenge_1.ts","category_groups":["PII","Personal Data"],"source":{"start":5,"end":5,"column":{"start":5,"end":163}},"sink":{"start":5,"end":5,"column":{"start":5,"end":163},"content":"models.sequelize.query(\"SELECT * FROM Products WHERE ((name LIKE '%\"+criteria+\"%' OR description LIKE '%\"+criteria+\"%') AND deletedAt IS NULL) ORDER BY name\")"},"parent_line_number":5,"snippet":"models.sequelize.query(\"SELECT * FROM Products WHERE ((name LIKE '%\"+criteria+\"%' OR description LIKE '%\"+criteria+\"%') AND deletedAt IS NULL) ORDER BY name\")","fingerprint":"2422999ee983c379479a0d13296d2b45_0","old_fingerprint":"5546bf07b1bd0cdc99d0cfd26e1957dd_0","code_extract":"    models.sequelize.query(\"SELECT * FROM Products WHERE ((name LIKE '%\"+criteria+\"%' OR description LIKE '%\"+criteria+\"%') AND deletedAt IS NULL) ORDER BY name\")"},{"cwe_ids":["89"],"id":"javascript_lang_sql_injection","title":"Unsanitized user input in SQL query","description":"## Description\nIncluding unsanitized data, such as user input or request data, in raw SQL queries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input\n\n```javascript\n  var sqlite = new Sequelize(\"sqlite::memory:\");\n  sqlite.query(\"SELECT * FROM users WHERE ID = \" + req.params.userId);\n```\n\nInstead, consider the following approaches when writing SQL queries\n\n✅ Validate query input wherever possible\n\n```javascript\n  var rawId = req.params.userId\n  if !(/[0-9]+/.test(rawId)) {\n    // input is unexpected; don't make the query\n  }\n```\n\n✅ Use prepared (or parameterized) statements when querying\n\nSequelize example -\n```javascript\n  var sqlite = new Sequelize(\"sqlite::memory:\");\n  sqlite.query(\n    \"SELECT * FROM users WHERE ID = ?\",\n    { replacements: [req.params.userId] },\n    type: sequelize.QueryTypes.SELECT\n  )\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n","documentation_url":"https://docs.bearer.com/reference/rules/javascript_lang_sql_injection","line_number":11,"full_filename":"../juice-shop/data/static/codefixes/dbSchemaChallenge_3.ts","filename":"data/static/codefixes/dbSchemaChallenge_3.ts","category_groups":["PII","Personal Data"],"source":{"start":11,"end":11,"column":{"start":5,"end":161}},"sink":{"start":11,"end":11,"column":{"start":5,"end":161},"content":"models.sequelize.query(`SELECT * FROM Products WHERE ((name LIKE '%${criteria}%' OR description LIKE '%${criteria}%') AND deletedAt IS NULL) ORDER BY name`)"},"parent_line_number":11,"snippet":"models.sequelize.query(`SELECT * FROM Products WHERE ((name LIKE '%${criteria}%' OR description LIKE '%${criteria}%') AND deletedAt IS NULL) ORDER BY name`)","fingerprint":"8014e30891e8e3cb3c4a378fcf1afa38_0","old_fingerprint":"d324a40fb1dd59c63a01132851ed7fd4_3","code_extract":"    models.sequelize.query(`SELECT * FROM Products WHERE ((name LIKE '%${criteria}%' OR description LIKE '%${criteria}%') AND deletedAt IS NULL) ORDER BY name`)"},{"cwe_ids":["89"],"id":"javascript_lang_sql_injection","title":"Unsanitized user input in SQL query","description":"## Description\nIncluding unsanitized data, such as user input or request data, in raw SQL queries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input\n\n```javascript\n  var sqlite = new Sequelize(\"sqlite::memory:\");\n  sqlite.query(\"SELECT * FROM users WHERE ID = \" + req.params.userId);\n```\n\nInstead, consider the following approaches when writing SQL queries\n\n✅ Validate query input wherever possible\n\n```javascript\n  var rawId = req.params.userId\n  if !(/[0-9]+/.test(rawId)) {\n    // input is unexpected; don't make the query\n  }\n```\n\n✅ Use prepared (or parameterized) statements when querying\n\nSequelize example -\n```javascript\n  var sqlite = new Sequelize(\"sqlite::memory:\");\n  sqlite.query(\n    \"SELECT * FROM users WHERE ID = ?\",\n    { replacements: [req.params.userId] },\n    type: sequelize.QueryTypes.SELECT\n  )\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n","documentation_url":"https://docs.bearer.com/reference/rules/javascript_lang_sql_injection","line_number":20,"full_filename":"../juice-shop/data/static/codefixes/loginAdminChallenge_1.ts","filename":"data/static/codefixes/loginAdminChallenge_1.ts","category_groups":["PII","Personal Data"],"source":{"start":20,"end":20,"column":{"start":5,"end":208}},"sink":{"start":20,"end":20,"column":{"start":5,"end":208},"content":"models.sequelize.query(`SELECT * FROM Users WHERE email = '${req.body.email || ''}' AND password = '${security.hash(req.body.password || '')}' AND deletedAt IS NULL`, { model: models.User, plain: true })"},"parent_line_number":20,"snippet":"models.sequelize.query(`SELECT * FROM Users WHERE email = '${req.body.email || ''}' AND password = '${security.hash(req.body.password || '')}' AND deletedAt IS NULL`, { model: models.User, plain: true })","fingerprint":"e3d18d5f0ca1f301fa884039dc723bf6_0","old_fingerprint":"b7f22e7cb0bc5cee2c9d55345424b27b_6","code_extract":"    models.sequelize.query(`SELECT * FROM Users WHERE email = '${req.body.email || ''}' AND password = '${security.hash(req.body.password || '')}' AND deletedAt IS NULL`, { model: models.User, plain: true })"},{"cwe_ids":["89"],"id":"javascript_lang_sql_injection","title":"Unsanitized user input in SQL query","description":"## Description\nIncluding unsanitized data, such as user input or request data, in raw SQL queries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input\n\n```javascript\n  var sqlite = new Sequelize(\"sqlite::memory:\");\n  sqlite.query(\"SELECT * FROM users WHERE ID = \" + req.params.userId);\n```\n\nInstead, consider the following approaches when writing SQL queries\n\n✅ Validate query input wherever possible\n\n```javascript\n  var rawId = req.params.userId\n  if !(/[0-9]+/.test(rawId)) {\n    // input is unexpected; don't make the query\n  }\n```\n\n✅ Use prepared (or parameterized) statements when querying\n\nSequelize example -\n```javascript\n  var sqlite = new Sequelize(\"sqlite::memory:\");\n  sqlite.query(\n    \"SELECT * FROM users WHERE ID = ?\",\n    { replacements: [req.params.userId] },\n    type: sequelize.QueryTypes.SELECT\n  )\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n","documentation_url":"https://docs.bearer.com/reference/rules/javascript_lang_sql_injection","line_number":20,"full_filename":"../juice-shop/data/static/codefixes/loginBenderChallenge_1.ts","filename":"data/static/codefixes/loginBenderChallenge_1.ts","category_groups":["PII","Personal Data"],"source":{"start":20,"end":20,"column":{"start":5,"end":208}},"sink":{"start":20,"end":20,"column":{"start":5,"end":208},"content":"models.sequelize.query(`SELECT * FROM Users WHERE email = '${req.body.email || ''}' AND password = '${security.hash(req.body.password || '')}' AND deletedAt IS NULL`, { model: models.User, plain: true })"},"parent_line_number":20,"snippet":"models.sequelize.query(`SELECT * FROM Users WHERE email = '${req.body.email || ''}' AND password = '${security.hash(req.body.password || '')}' AND deletedAt IS NULL`, { model: models.User, plain: true })","fingerprint":"4b0883d52334dfd9a4acce2fcf810121_0","old_fingerprint":"c97fac18379203e0b84138700ece0c6f_7","code_extract":"    models.sequelize.query(`SELECT * FROM Users WHERE email = '${req.body.email || ''}' AND password = '${security.hash(req.body.password || '')}' AND deletedAt IS NULL`, { model: models.User, plain: true })"},{"cwe_ids":["89"],"id":"javascript_lang_sql_injection","title":"Unsanitized user input in SQL query","description":"## Description\nIncluding unsanitized data, such as user input or request data, in raw SQL queries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input\n\n```javascript\n  var sqlite = new Sequelize(\"sqlite::memory:\");\n  sqlite.query(\"SELECT * FROM users WHERE ID = \" + req.params.userId);\n```\n\nInstead, consider the following approaches when writing SQL queries\n\n✅ Validate query input wherever possible\n\n```javascript\n  var rawId = req.params.userId\n  if !(/[0-9]+/.test(rawId)) {\n    // input is unexpected; don't make the query\n  }\n```\n\n✅ Use prepared (or parameterized) statements when querying\n\nSequelize example -\n```javascript\n  var sqlite = new Sequelize(\"sqlite::memory:\");\n  sqlite.query(\n    \"SELECT * FROM users WHERE ID = ?\",\n    { replacements: [req.params.userId] },\n    type: sequelize.QueryTypes.SELECT\n  )\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n","documentation_url":"https://docs.bearer.com/reference/rules/javascript_lang_sql_injection","line_number":17,"full_filename":"../juice-shop/data/static/codefixes/loginBenderChallenge_4.ts","filename":"data/static/codefixes/loginBenderChallenge_4.ts","category_groups":["PII","Personal Data"],"source":{"start":17,"end":17,"column":{"start":5,"end":209}},"sink":{"start":17,"end":17,"column":{"start":5,"end":209},"content":"models.sequelize.query(`SELECT * FROM Users WHERE email = '${req.body.email || ''}' AND password = '${security.hash(req.body.password || '')}' AND deletedAt IS NULL`, { model: models.User, plain: false })"},"parent_line_number":17,"snippet":"models.sequelize.query(`SELECT * FROM Users WHERE email = '${req.body.email || ''}' AND password = '${security.hash(req.body.password || '')}' AND deletedAt IS NULL`, { model: models.User, plain: false })","fingerprint":"4a25d479d29e305cf7b9b7181f917eb8_0","old_fingerprint":"6f6e9554ffc698397ccd15acacb0bf09_4","code_extract":"    models.sequelize.query(`SELECT * FROM Users WHERE email = '${req.body.email || ''}' AND password = '${security.hash(req.body.password || '')}' AND deletedAt IS NULL`, { model: models.User, plain: false })"},{"cwe_ids":["89"],"id":"javascript_lang_sql_injection","title":"Unsanitized user input in SQL query","description":"## Description\nIncluding unsanitized data, such as user input or request data, in raw SQL queries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input\n\n```javascript\n  var sqlite = new Sequelize(\"sqlite::memory:\");\n  sqlite.query(\"SELECT * FROM users WHERE ID = \" + req.params.userId);\n```\n\nInstead, consider the following approaches when writing SQL queries\n\n✅ Validate query input wherever possible\n\n```javascript\n  var rawId = req.params.userId\n  if !(/[0-9]+/.test(rawId)) {\n    // input is unexpected; don't make the query\n  }\n```\n\n✅ Use prepared (or parameterized) statements when querying\n\nSequelize example -\n```javascript\n  var sqlite = new Sequelize(\"sqlite::memory:\");\n  sqlite.query(\n    \"SELECT * FROM users WHERE ID = ?\",\n    { replacements: [req.params.userId] },\n    type: sequelize.QueryTypes.SELECT\n  )\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n","documentation_url":"https://docs.bearer.com/reference/rules/javascript_lang_sql_injection","line_number":17,"full_filename":"../juice-shop/data/static/codefixes/loginJimChallenge_2.ts","filename":"data/static/codefixes/loginJimChallenge_2.ts","category_groups":["PII","Personal Data"],"source":{"start":17,"end":17,"column":{"start":5,"end":209}},"sink":{"start":17,"end":17,"column":{"start":5,"end":209},"content":"models.sequelize.query(`SELECT * FROM Users WHERE email = '${req.body.email || ''}' AND password = '${security.hash(req.body.password || '')}' AND deletedAt IS NULL`, { model: models.User, plain: false })"},"parent_line_number":17,"snippet":"models.sequelize.query(`SELECT * FROM Users WHERE email = '${req.body.email || ''}' AND password = '${security.hash(req.body.password || '')}' AND deletedAt IS NULL`, { model: models.User, plain: false })","fingerprint":"df98e54f62e0cc9172446bbd0361c29c_0","old_fingerprint":"8f9feea56b0b6e9f65a1f1eab24c74f8_5","code_extract":"    models.sequelize.query(`SELECT * FROM Users WHERE email = '${req.body.email || ''}' AND password = '${security.hash(req.body.password || '')}' AND deletedAt IS NULL`, { model: models.User, plain: false })"},{"cwe_ids":["89"],"id":"javascript_lang_sql_injection","title":"Unsanitized user input in SQL query","description":"## Description\nIncluding unsanitized data, such as user input or request data, in raw SQL queries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input\n\n```javascript\n  var sqlite = new Sequelize(\"sqlite::memory:\");\n  sqlite.query(\"SELECT * FROM users WHERE ID = \" + req.params.userId);\n```\n\nInstead, consider the following approaches when writing SQL queries\n\n✅ Validate query input wherever possible\n\n```javascript\n  var rawId = req.params.userId\n  if !(/[0-9]+/.test(rawId)) {\n    // input is unexpected; don't make the query\n  }\n```\n\n✅ Use prepared (or parameterized) statements when querying\n\nSequelize example -\n```javascript\n  var sqlite = new Sequelize(\"sqlite::memory:\");\n  sqlite.query(\n    \"SELECT * FROM users WHERE ID = ?\",\n    { replacements: [req.params.userId] },\n    type: sequelize.QueryTypes.SELECT\n  )\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n","documentation_url":"https://docs.bearer.com/reference/rules/javascript_lang_sql_injection","line_number":20,"full_filename":"../juice-shop/data/static/codefixes/loginJimChallenge_4.ts","filename":"data/static/codefixes/loginJimChallenge_4.ts","category_groups":["PII","Personal Data"],"source":{"start":20,"end":20,"column":{"start":5,"end":208}},"sink":{"start":20,"end":20,"column":{"start":5,"end":208},"content":"models.sequelize.query(`SELECT * FROM Users WHERE email = '${req.body.email || ''}' AND password = '${security.hash(req.body.password || '')}' AND deletedAt IS NULL`, { model: models.User, plain: true })"},"parent_line_number":20,"snippet":"models.sequelize.query(`SELECT * FROM Users WHERE email = '${req.body.email || ''}' AND password = '${security.hash(req.body.password || '')}' AND deletedAt IS NULL`, { model: models.User, plain: true })","fingerprint":"1b0805db0c0342c03908f442d4972b13_0","old_fingerprint":"91eb70ac55e1aad13bb17f0ebad2e22d_8","code_extract":"    models.sequelize.query(`SELECT * FROM Users WHERE email = '${req.body.email || ''}' AND password = '${security.hash(req.body.password || '')}' AND deletedAt IS NULL`, { model: models.User, plain: true })"},{"cwe_ids":["89"],"id":"javascript_lang_sql_injection","title":"Unsanitized user input in SQL query","description":"## Description\nIncluding unsanitized data, such as user input or request data, in raw SQL queries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input\n\n```javascript\n  var sqlite = new Sequelize(\"sqlite::memory:\");\n  sqlite.query(\"SELECT * FROM users WHERE ID = \" + req.params.userId);\n```\n\nInstead, consider the following approaches when writing SQL queries\n\n✅ Validate query input wherever possible\n\n```javascript\n  var rawId = req.params.userId\n  if !(/[0-9]+/.test(rawId)) {\n    // input is unexpected; don't make the query\n  }\n```\n\n✅ Use prepared (or parameterized) statements when querying\n\nSequelize example -\n```javascript\n  var sqlite = new Sequelize(\"sqlite::memory:\");\n  sqlite.query(\n    \"SELECT * FROM users WHERE ID = ?\",\n    { replacements: [req.params.userId] },\n    type: sequelize.QueryTypes.SELECT\n  )\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n","documentation_url":"https://docs.bearer.com/reference/rules/javascript_lang_sql_injection","line_number":6,"full_filename":"../juice-shop/data/static/codefixes/unionSqlInjectionChallenge_1.ts","filename":"data/static/codefixes/unionSqlInjectionChallenge_1.ts","category_groups":["PII","Personal Data"],"source":{"start":6,"end":6,"column":{"start":5,"end":161}},"sink":{"start":6,"end":6,"column":{"start":5,"end":161},"content":"models.sequelize.query(`SELECT * FROM Products WHERE ((name LIKE '%${criteria}%' OR description LIKE '%${criteria}%') AND deletedAt IS NULL) ORDER BY name`)"},"parent_line_number":6,"snippet":"models.sequelize.query(`SELECT * FROM Products WHERE ((name LIKE '%${criteria}%' OR description LIKE '%${criteria}%') AND deletedAt IS NULL) ORDER BY name`)","fingerprint":"7e9979f44c0dbd99c76619f48c4245fa_0","old_fingerprint":"c0d5ce14c225361c2360223ca4b1fb6b_1","code_extract":"    models.sequelize.query(`SELECT * FROM Products WHERE ((name LIKE '%${criteria}%' OR description LIKE '%${criteria}%') AND deletedAt IS NULL) ORDER BY name`)"},{"cwe_ids":["89"],"id":"javascript_lang_sql_injection","title":"Unsanitized user input in SQL query","description":"## Description\nIncluding unsanitized data, such as user input or request data, in raw SQL queries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input\n\n```javascript\n  var sqlite = new Sequelize(\"sqlite::memory:\");\n  sqlite.query(\"SELECT * FROM users WHERE ID = \" + req.params.userId);\n```\n\nInstead, consider the following approaches when writing SQL queries\n\n✅ Validate query input wherever possible\n\n```javascript\n  var rawId = req.params.userId\n  if !(/[0-9]+/.test(rawId)) {\n    // input is unexpected; don't make the query\n  }\n```\n\n✅ Use prepared (or parameterized) statements when querying\n\nSequelize example -\n```javascript\n  var sqlite = new Sequelize(\"sqlite::memory:\");\n  sqlite.query(\n    \"SELECT * FROM users WHERE ID = ?\",\n    { replacements: [req.params.userId] },\n    type: sequelize.QueryTypes.SELECT\n  )\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n","documentation_url":"https://docs.bearer.com/reference/rules/javascript_lang_sql_injection","line_number":10,"full_filename":"../juice-shop/data/static/codefixes/unionSqlInjectionChallenge_3.ts","filename":"data/static/codefixes/unionSqlInjectionChallenge_3.ts","category_groups":["PII","Personal Data"],"source":{"start":10,"end":10,"column":{"start":5,"end":161}},"sink":{"start":10,"end":10,"column":{"start":5,"end":161},"content":"models.sequelize.query(`SELECT * FROM Products WHERE ((name LIKE '%${criteria}%' OR description LIKE '%${criteria}%') AND deletedAt IS NULL) ORDER BY name`)"},"parent_line_number":10,"snippet":"models.sequelize.query(`SELECT * FROM Products WHERE ((name LIKE '%${criteria}%' OR description LIKE '%${criteria}%') AND deletedAt IS NULL) ORDER BY name`)","fingerprint":"d6273bb4e3195d87ba54a7ca10db72be_0","old_fingerprint":"170546b52e01919ef2681babdb35a9be_2","code_extract":"    models.sequelize.query(`SELECT * FROM Products WHERE ((name LIKE '%${criteria}%' OR description LIKE '%${criteria}%') AND deletedAt IS NULL) ORDER BY name`)"},{"cwe_ids":["89"],"id":"javascript_lang_sql_injection","title":"Unsanitized user input in SQL query","description":"## Description\nIncluding unsanitized data, such as user input or request data, in raw SQL queries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input\n\n```javascript\n  var sqlite = new Sequelize(\"sqlite::memory:\");\n  sqlite.query(\"SELECT * FROM users WHERE ID = \" + req.params.userId);\n```\n\nInstead, consider the following approaches when writing SQL queries\n\n✅ Validate query input wherever possible\n\n```javascript\n  var rawId = req.params.userId\n  if !(/[0-9]+/.test(rawId)) {\n    // input is unexpected; don't make the query\n  }\n```\n\n✅ Use prepared (or parameterized) statements when querying\n\nSequelize example -\n```javascript\n  var sqlite = new Sequelize(\"sqlite::memory:\");\n  sqlite.query(\n    \"SELECT * FROM users WHERE ID = ?\",\n    { replacements: [req.params.userId] },\n    type: sequelize.QueryTypes.SELECT\n  )\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n","documentation_url":"https://docs.bearer.com/reference/rules/javascript_lang_sql_injection","line_number":36,"full_filename":"../juice-shop/routes/login.ts","filename":"routes/login.ts","category_groups":["PII","Personal Data"],"source":{"start":36,"end":36,"column":{"start":5,"end":206}},"sink":{"start":36,"end":36,"column":{"start":5,"end":206},"content":"models.sequelize.query(`SELECT * FROM Users WHERE email = '${req.body.email || ''}' AND password = '${security.hash(req.body.password || '')}' AND deletedAt IS NULL`, { model: UserModel, plain: true })"},"parent_line_number":36,"snippet":"models.sequelize.query(`SELECT * FROM Users WHERE email = '${req.body.email || ''}' AND password = '${security.hash(req.body.password || '')}' AND deletedAt IS NULL`, { model: UserModel, plain: true })","fingerprint":"1c2a6e42ca5adc2c078fee1a7cb1a787_0","old_fingerprint":"538f11beb2960a990af62e574d2617be_10","code_extract":"    models.sequelize.query(`SELECT * FROM Users WHERE email = '${req.body.email || ''}' AND password = '${security.hash(req.body.password || '')}' AND deletedAt IS NULL`, { model: UserModel, plain: true }) // vuln-code-snippet vuln-line loginAdminChallenge loginBenderChallenge loginJimChallenge"},{"cwe_ids":["89"],"id":"javascript_lang_sql_injection","title":"Unsanitized user input in SQL query","description":"## Description\nIncluding unsanitized data, such as user input or request data, in raw SQL queries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input\n\n```javascript\n  var sqlite = new Sequelize(\"sqlite::memory:\");\n  sqlite.query(\"SELECT * FROM users WHERE ID = \" + req.params.userId);\n```\n\nInstead, consider the following approaches when writing SQL queries\n\n✅ Validate query input wherever possible\n\n```javascript\n  var rawId = req.params.userId\n  if !(/[0-9]+/.test(rawId)) {\n    // input is unexpected; don't make the query\n  }\n```\n\n✅ Use prepared (or parameterized) statements when querying\n\nSequelize example -\n```javascript\n  var sqlite = new Sequelize(\"sqlite::memory:\");\n  sqlite.query(\n    \"SELECT * FROM users WHERE ID = ?\",\n    { replacements: [req.params.userId] },\n    type: sequelize.QueryTypes.SELECT\n  )\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n","documentation_url":"https://docs.bearer.com/reference/rules/javascript_lang_sql_injection","line_number":23,"full_filename":"../juice-shop/routes/search.ts","filename":"routes/search.ts","category_groups":["PII","Personal Data"],"source":{"start":23,"end":23,"column":{"start":5,"end":161}},"sink":{"start":23,"end":23,"column":{"start":5,"end":161},"content":"models.sequelize.query(`SELECT * FROM Products WHERE ((name LIKE '%${criteria}%' OR description LIKE '%${criteria}%') AND deletedAt IS NULL) ORDER BY name`)"},"parent_line_number":23,"snippet":"models.sequelize.query(`SELECT * FROM Products WHERE ((name LIKE '%${criteria}%' OR description LIKE '%${criteria}%') AND deletedAt IS NULL) ORDER BY name`)","fingerprint":"626e8a24818faf605935d6ca0f0f748f_0","old_fingerprint":"ac3ce3dba04ce172c14947253a01429a_9","code_extract":"    models.sequelize.query(`SELECT * FROM Products WHERE ((name LIKE '%${criteria}%' OR description LIKE '%${criteria}%') AND deletedAt IS NULL) ORDER BY name`) // vuln-code-snippet vuln-line unionSqlInjectionChallenge dbSchemaChallenge"}],"low":[{"cwe_ids":["548"],"id":"javascript_express_exposed_dir_listing","title":"Missing access restriction on directory listing","description":"## Description\nInappropriate exposure of a directory listing could give attackers access to sensitive data or source code, either directly or through exploitation of an exposed file structure.\n\n## Remediations\n✅ Restrict access to sensitive directories and files\n\n## Resources\n- [Express Serve index middleware](https://expressjs.com/en/resources/middleware/serve-index.html)\n","documentation_url":"https://docs.bearer.com/reference/rules/javascript_express_exposed_dir_listing","line_number":2,"full_filename":"../juice-shop/data/static/codefixes/accessLogDisclosureChallenge_1_correct.ts","filename":"data/static/codefixes/accessLogDisclosureChallenge_1_correct.ts","category_groups":["PII","Personal Data"],"source":{"start":2,"end":2,"column":{"start":3,"end":76}},"sink":{"start":2,"end":2,"column":{"start":3,"end":76},"content":"app.use('/ftp', serveIndexMiddleware, serveIndex('ftp', { icons: true }))"},"parent_line_number":2,"snippet":"app.use('/ftp', serveIndexMiddleware, serveIndex('ftp', { icons: true }))","fingerprint":"f561fa26365b6c05e91ddc3b18fbed28_0","old_fingerprint":"87bc11ad23863a0ce95e73f1f0dc8b61_2","code_extract":"  app.use('/ftp', serveIndexMiddleware, serveIndex('ftp', { icons: true }))"},{"cwe_ids":["548"],"id":"javascript_express_exposed_dir_listing","title":"Missing access restriction on directory listing","description":"## Description\nInappropriate exposure of a directory listing could give attackers access to sensitive data or source code, either directly or through exploitation of an exposed file structure.\n\n## Remediations\n✅ Restrict access to sensitive directories and files\n\n## Resources\n- [Express Serve index middleware](https://expressjs.com/en/resources/middleware/serve-index.html)\n","documentation_url":"https://docs.bearer.com/reference/rules/javascript_express_exposed_dir_listing","line_number":7,"full_filename":"../juice-shop/data/static/codefixes/accessLogDisclosureChallenge_1_correct.ts","filename":"data/static/codefixes/accessLogDisclosureChallenge_1_correct.ts","category_groups":["PII","Personal Data"],"source":{"start":7,"end":7,"column":{"start":3,"end":115}},"sink":{"start":7,"end":7,"column":{"start":3,"end":115},"content":"app.use('/encryptionkeys', serveIndexMiddleware, serveIndex('encryptionkeys', { icons: true, view: 'details' }))"},"parent_line_number":7,"snippet":"app.use('/encryptionkeys', serveIndexMiddleware, serveIndex('encryptionkeys', { icons: true, view: 'details' }))","fingerprint":"f561fa26365b6c05e91ddc3b18fbed28_1","old_fingerprint":"87bc11ad23863a0ce95e73f1f0dc8b61_13","code_extract":"  app.use('/encryptionkeys', serveIndexMiddleware, serveIndex('encryptionkeys', { icons: true, view: 'details' }))"},{"cwe_ids":["548"],"id":"javascript_express_exposed_dir_listing","title":"Missing access restriction on directory listing","description":"## Description\nInappropriate exposure of a directory listing could give attackers access to sensitive data or source code, either directly or through exploitation of an exposed file structure.\n\n## Remediations\n✅ Restrict access to sensitive directories and files\n\n## Resources\n- [Express Serve index middleware](https://expressjs.com/en/resources/middleware/serve-index.html)\n","documentation_url":"https://docs.bearer.com/reference/rules/javascript_express_exposed_dir_listing","line_number":2,"full_filename":"../juice-shop/data/static/codefixes/accessLogDisclosureChallenge_2.ts","filename":"data/static/codefixes/accessLogDisclosureChallenge_2.ts","category_groups":["PII","Personal Data"],"source":{"start":2,"end":2,"column":{"start":3,"end":76}},"sink":{"start":2,"end":2,"column":{"start":3,"end":76},"content":"app.use('/ftp', serveIndexMiddleware, serveIndex('ftp', { icons: true }))"},"parent_line_number":2,"snippet":"app.use('/ftp', serveIndexMiddleware, serveIndex('ftp', { icons: true }))","fingerprint":"7431053925541a9e4feb79b7adbba3a3_0","old_fingerprint":"c1b0631a3d2cd324cb0a042a9080f9ed_6","code_extract":"  app.use('/ftp', serveIndexMiddleware, serveIndex('ftp', { icons: true }))"},{"cwe_ids":["548"],"id":"javascript_express_exposed_dir_listing","title":"Missing access restriction on directory listing","description":"## Description\nInappropriate exposure of a directory listing could give attackers access to sensitive data or source code, either directly or through exploitation of an exposed file structure.\n\n## Remediations\n✅ Restrict access to sensitive directories and files\n\n## Resources\n- [Express Serve index middleware](https://expressjs.com/en/resources/middleware/serve-index.html)\n","documentation_url":"https://docs.bearer.com/reference/rules/javascript_express_exposed_dir_listing","line_number":7,"full_filename":"../juice-shop/data/static/codefixes/accessLogDisclosureChallenge_2.ts","filename":"data/static/codefixes/accessLogDisclosureChallenge_2.ts","category_groups":["PII","Personal Data"],"source":{"start":7,"end":7,"column":{"start":3,"end":115}},"sink":{"start":7,"end":7,"column":{"start":3,"end":115},"content":"app.use('/encryptionkeys', serveIndexMiddleware, serveIndex('encryptionkeys', { icons: true, view: 'details' }))"},"parent_line_number":7,"snippet":"app.use('/encryptionkeys', serveIndexMiddleware, serveIndex('encryptionkeys', { icons: true, view: 'details' }))","fingerprint":"7431053925541a9e4feb79b7adbba3a3_1","old_fingerprint":"c1b0631a3d2cd324cb0a042a9080f9ed_14","code_extract":"  app.use('/encryptionkeys', serveIndexMiddleware, serveIndex('encryptionkeys', { icons: true, view: 'details' }))"},{"cwe_ids":["548"],"id":"javascript_express_exposed_dir_listing","title":"Missing access restriction on directory listing","description":"## Description\nInappropriate exposure of a directory listing could give attackers access to sensitive data or source code, either directly or through exploitation of an exposed file structure.\n\n## Remediations\n✅ Restrict access to sensitive directories and files\n\n## Resources\n- [Express Serve index middleware](https://expressjs.com/en/resources/middleware/serve-index.html)\n","documentation_url":"https://docs.bearer.com/reference/rules/javascript_express_exposed_dir_listing","line_number":11,"full_filename":"../juice-shop/data/static/codefixes/accessLogDisclosureChallenge_2.ts","filename":"data/static/codefixes/accessLogDisclosureChallenge_2.ts","category_groups":["PII","Personal Data"],"source":{"start":11,"end":11,"column":{"start":3,"end":86}},"sink":{"start":11,"end":11,"column":{"start":3,"end":86},"content":"app.use('/support/logs', serveIndexMiddleware, serveIndex('logs', { icons: true }))"},"parent_line_number":11,"snippet":"app.use('/support/logs', serveIndexMiddleware, serveIndex('logs', { icons: true }))","fingerprint":"7431053925541a9e4feb79b7adbba3a3_2","old_fingerprint":"c1b0631a3d2cd324cb0a042a9080f9ed_19","code_extract":"  app.use('/support/logs', serveIndexMiddleware, serveIndex('logs', { icons: true }))"},{"cwe_ids":["548"],"id":"javascript_express_exposed_dir_listing","title":"Missing access restriction on directory listing","description":"## Description\nInappropriate exposure of a directory listing could give attackers access to sensitive data or source code, either directly or through exploitation of an exposed file structure.\n\n## Remediations\n✅ Restrict access to sensitive directories and files\n\n## Resources\n- [Express Serve index middleware](https://expressjs.com/en/resources/middleware/serve-index.html)\n","documentation_url":"https://docs.bearer.com/reference/rules/javascript_express_exposed_dir_listing","line_number":2,"full_filename":"../juice-shop/data/static/codefixes/accessLogDisclosureChallenge_3.ts","filename":"data/static/codefixes/accessLogDisclosureChallenge_3.ts","category_groups":["PII","Personal Data"],"source":{"start":2,"end":2,"column":{"start":3,"end":76}},"sink":{"start":2,"end":2,"column":{"start":3,"end":76},"content":"app.use('/ftp', serveIndexMiddleware, serveIndex('ftp', { icons: true }))"},"parent_line_number":2,"snippet":"app.use('/ftp', serveIndexMiddleware, serveIndex('ftp', { icons: true }))","fingerprint":"1bde540dc2dc7eadc0a5563ef8d50744_0","old_fingerprint":"1094f2bb66828763a9b7798891d5a4dd_4","code_extract":"  app.use('/ftp', serveIndexMiddleware, serveIndex('ftp', { icons: true }))"},{"cwe_ids":["548"],"id":"javascript_express_exposed_dir_listing","title":"Missing access restriction on directory listing","description":"## Description\nInappropriate exposure of a directory listing could give attackers access to sensitive data or source code, either directly or through exploitation of an exposed file structure.\n\n## Remediations\n✅ Restrict access to sensitive directories and files\n\n## Resources\n- [Express Serve index middleware](https://expressjs.com/en/resources/middleware/serve-index.html)\n","documentation_url":"https://docs.bearer.com/reference/rules/javascript_express_exposed_dir_listing","line_number":7,"full_filename":"../juice-shop/data/static/codefixes/accessLogDisclosureChallenge_3.ts","filename":"data/static/codefixes/accessLogDisclosureChallenge_3.ts","category_groups":["PII","Personal Data"],"source":{"start":7,"end":7,"column":{"start":3,"end":115}},"sink":{"start":7,"end":7,"column":{"start":3,"end":115},"content":"app.use('/encryptionkeys', serveIndexMiddleware, serveIndex('encryptionkeys', { icons: true, view: 'details' }))"},"parent_line_number":7,"snippet":"app.use('/encryptionkeys', serveIndexMiddleware, serveIndex('encryptionkeys', { icons: true, view: 'details' }))","fingerprint":"1bde540dc2dc7eadc0a5563ef8d50744_1","old_fingerprint":"1094f2bb66828763a9b7798891d5a4dd_11","code_extract":"  app.use('/encryptionkeys', serveIndexMiddleware, serveIndex('encryptionkeys', { icons: true, view: 'details' }))"},{"cwe_ids":["548"],"id":"javascript_express_exposed_dir_listing","title":"Missing access restriction on directory listing","description":"## Description\nInappropriate exposure of a directory listing could give attackers access to sensitive data or source code, either directly or through exploitation of an exposed file structure.\n\n## Remediations\n✅ Restrict access to sensitive directories and files\n\n## Resources\n- [Express Serve index middleware](https://expressjs.com/en/resources/middleware/serve-index.html)\n","documentation_url":"https://docs.bearer.com/reference/rules/javascript_express_exposed_dir_listing","line_number":11,"full_filename":"../juice-shop/data/static/codefixes/accessLogDisclosureChallenge_3.ts","filename":"data/static/codefixes/accessLogDisclosureChallenge_3.ts","category_groups":["PII","Personal Data"],"source":{"start":11,"end":11,"column":{"start":3,"end":103}},"sink":{"start":11,"end":11,"column":{"start":3,"end":103},"content":"app.use('/support/logs', serveIndexMiddleware, serveIndex('logs', { icons: true, view: 'details' }))"},"parent_line_number":11,"snippet":"app.use('/support/logs', serveIndexMiddleware, serveIndex('logs', { icons: true, view: 'details' }))","fingerprint":"1bde540dc2dc7eadc0a5563ef8d50744_2","old_fingerprint":"1094f2bb66828763a9b7798891d5a4dd_17","code_extract":"  app.use('/support/logs', serveIndexMiddleware, serveIndex('logs', { icons: true, view: 'details' }))"},{"cwe_ids":["548"],"id":"javascript_express_exposed_dir_listing","title":"Missing access restriction on directory listing","description":"## Description\nInappropriate exposure of a directory listing could give attackers access to sensitive data or source code, either directly or through exploitation of an exposed file structure.\n\n## Remediations\n✅ Restrict access to sensitive directories and files\n\n## Resources\n- [Express Serve index middleware](https://expressjs.com/en/resources/middleware/serve-index.html)\n","documentation_url":"https://docs.bearer.com/reference/rules/javascript_express_exposed_dir_listing","line_number":2,"full_filename":"../juice-shop/data/static/codefixes/accessLogDisclosureChallenge_4.ts","filename":"data/static/codefixes/accessLogDisclosureChallenge_4.ts","category_groups":["PII","Personal Data"],"source":{"start":2,"end":2,"column":{"start":3,"end":76}},"sink":{"start":2,"end":2,"column":{"start":3,"end":76},"content":"app.use('/ftp', serveIndexMiddleware, serveIndex('ftp', { icons: true }))"},"parent_line_number":2,"snippet":"app.use('/ftp', serveIndexMiddleware, serveIndex('ftp', { icons: true }))","fingerprint":"87838e0cadbae4b996ea2ba0ce225f2e_0","old_fingerprint":"7979710213df12b3d228433c91d2a83a_1","code_extract":"  app.use('/ftp', serveIndexMiddleware, serveIndex('ftp', { icons: true }))"},{"cwe_ids":["548"],"id":"javascript_express_exposed_dir_listing","title":"Missing access restriction on directory listing","description":"## Description\nInappropriate exposure of a directory listing could give attackers access to sensitive data or source code, either directly or through exploitation of an exposed file structure.\n\n## Remediations\n✅ Restrict access to sensitive directories and files\n\n## Resources\n- [Express Serve index middleware](https://expressjs.com/en/resources/middleware/serve-index.html)\n","documentation_url":"https://docs.bearer.com/reference/rules/javascript_express_exposed_dir_listing","line_number":7,"full_filename":"../juice-shop/data/static/codefixes/accessLogDisclosureChallenge_4.ts","filename":"data/static/codefixes/accessLogDisclosureChallenge_4.ts","category_groups":["PII","Personal Data"],"source":{"start":7,"end":7,"column":{"start":3,"end":115}},"sink":{"start":7,"end":7,"column":{"start":3,"end":115},"content":"app.use('/encryptionkeys', serveIndexMiddleware, serveIndex('encryptionkeys', { icons: true, view: 'details' }))"},"parent_line_number":7,"snippet":"app.use('/encryptionkeys', serveIndexMiddleware, serveIndex('encryptionkeys', { icons: true, view: 'details' }))","fingerprint":"87838e0cadbae4b996ea2ba0ce225f2e_1","old_fingerprint":"7979710213df12b3d228433c91d2a83a_12","code_extract":"  app.use('/encryptionkeys', serveIndexMiddleware, serveIndex('encryptionkeys', { icons: true, view: 'details' }))"},{"cwe_ids":["548"],"id":"javascript_express_exposed_dir_listing","title":"Missing access restriction on directory listing","description":"## Description\nInappropriate exposure of a directory listing could give attackers access to sensitive data or source code, either directly or through exploitation of an exposed file structure.\n\n## Remediations\n✅ Restrict access to sensitive directories and files\n\n## Resources\n- [Express Serve index middleware](https://expressjs.com/en/resources/middleware/serve-index.html)\n","documentation_url":"https://docs.bearer.com/reference/rules/javascript_express_exposed_dir_listing","line_number":2,"full_filename":"../juice-shop/data/static/codefixes/directoryListingChallenge_1_correct.ts","filename":"data/static/codefixes/directoryListingChallenge_1_correct.ts","category_groups":["PII","Personal Data"],"source":{"start":2,"end":2,"column":{"start":3,"end":115}},"sink":{"start":2,"end":2,"column":{"start":3,"end":115},"content":"app.use('/encryptionkeys', serveIndexMiddleware, serveIndex('encryptionkeys', { icons: true, view: 'details' }))"},"parent_line_number":2,"snippet":"app.use('/encryptionkeys', serveIndexMiddleware, serveIndex('encryptionkeys', { icons: true, view: 'details' }))","fingerprint":"d0c7f09f2c9927118811b6920976dbde_0","old_fingerprint":"09dd100e703678d4a8a55160ecae5d4c_0","code_extract":"  app.use('/encryptionkeys', serveIndexMiddleware, serveIndex('encryptionkeys', { icons: true, view: 'details' }))"},{"cwe_ids":["548"],"id":"javascript_express_exposed_dir_listing","title":"Missing access restriction on directory listing","description":"## Description\nInappropriate exposure of a directory listing could give attackers access to sensitive data or source code, either directly or through exploitation of an exposed file structure.\n\n## Remediations\n✅ Restrict access to sensitive directories and files\n\n## Resources\n- [Express Serve index middleware](https://expressjs.com/en/resources/middleware/serve-index.html)\n","documentation_url":"https://docs.bearer.com/reference/rules/javascript_express_exposed_dir_listing","line_number":6,"full_filename":"../juice-shop/data/static/codefixes/directoryListingChallenge_1_correct.ts","filename":"data/static/codefixes/directoryListingChallenge_1_correct.ts","category_groups":["PII","Personal Data"],"source":{"start":6,"end":6,"column":{"start":3,"end":103}},"sink":{"start":6,"end":6,"column":{"start":3,"end":103},"content":"app.use('/support/logs', serveIndexMiddleware, serveIndex('logs', { icons: true, view: 'details' }))"},"parent_line_number":6,"snippet":"app.use('/support/logs', serveIndexMiddleware, serveIndex('logs', { icons: true, view: 'details' }))","fingerprint":"d0c7f09f2c9927118811b6920976dbde_1","old_fingerprint":"09dd100e703678d4a8a55160ecae5d4c_8","code_extract":"  app.use('/support/logs', serveIndexMiddleware, serveIndex('logs', { icons: true, view: 'details' }))"},{"cwe_ids":["548"],"id":"javascript_express_exposed_dir_listing","title":"Missing access restriction on directory listing","description":"## Description\nInappropriate exposure of a directory listing could give attackers access to sensitive data or source code, either directly or through exploitation of an exposed file structure.\n\n## Remediations\n✅ Restrict access to sensitive directories and files\n\n## Resources\n- [Express Serve index middleware](https://expressjs.com/en/resources/middleware/serve-index.html)\n","documentation_url":"https://docs.bearer.com/reference/rules/javascript_express_exposed_dir_listing","line_number":6,"full_filename":"../juice-shop/data/static/codefixes/directoryListingChallenge_2.ts","filename":"data/static/codefixes/directoryListingChallenge_2.ts","category_groups":["PII","Personal Data"],"source":{"start":6,"end":6,"column":{"start":3,"end":115}},"sink":{"start":6,"end":6,"column":{"start":3,"end":115},"content":"app.use('/encryptionkeys', serveIndexMiddleware, serveIndex('encryptionkeys', { icons: true, view: 'details' }))"},"parent_line_number":6,"snippet":"app.use('/encryptionkeys', serveIndexMiddleware, serveIndex('encryptionkeys', { icons: true, view: 'details' }))","fingerprint":"84a18ba9c67531b0f1271ecfad9a6522_0","old_fingerprint":"9a19efa79cae2f824127e324ae0bbae6_9","code_extract":"  app.use('/encryptionkeys', serveIndexMiddleware, serveIndex('encryptionkeys', { icons: true, view: 'details' }))"},{"cwe_ids":["548"],"id":"javascript_express_exposed_dir_listing","title":"Missing access restriction on directory listing","description":"## Description\nInappropriate exposure of a directory listing could give attackers access to sensitive data or source code, either directly or through exploitation of an exposed file structure.\n\n## Remediations\n✅ Restrict access to sensitive directories and files\n\n## Resources\n- [Express Serve index middleware](https://expressjs.com/en/resources/middleware/serve-index.html)\n","documentation_url":"https://docs.bearer.com/reference/rules/javascript_express_exposed_dir_listing","line_number":10,"full_filename":"../juice-shop/data/static/codefixes/directoryListingChallenge_2.ts","filename":"data/static/codefixes/directoryListingChallenge_2.ts","category_groups":["PII","Personal Data"],"source":{"start":10,"end":10,"column":{"start":3,"end":103}},"sink":{"start":10,"end":10,"column":{"start":3,"end":103},"content":"app.use('/support/logs', serveIndexMiddleware, serveIndex('logs', { icons: true, view: 'details' }))"},"parent_line_number":10,"snippet":"app.use('/support/logs', serveIndexMiddleware, serveIndex('logs', { icons: true, view: 'details' }))","fingerprint":"84a18ba9c67531b0f1271ecfad9a6522_1","old_fingerprint":"9a19efa79cae2f824127e324ae0bbae6_16","code_extract":"  app.use('/support/logs', serveIndexMiddleware, serveIndex('logs', { icons: true, view: 'details' }))"},{"cwe_ids":["548"],"id":"javascript_express_exposed_dir_listing","title":"Missing access restriction on directory listing","description":"## Description\nInappropriate exposure of a directory listing could give attackers access to sensitive data or source code, either directly or through exploitation of an exposed file structure.\n\n## Remediations\n✅ Restrict access to sensitive directories and files\n\n## Resources\n- [Express Serve index middleware](https://expressjs.com/en/resources/middleware/serve-index.html)\n","documentation_url":"https://docs.bearer.com/reference/rules/javascript_express_exposed_dir_listing","line_number":2,"full_filename":"../juice-shop/data/static/codefixes/directoryListingChallenge_3.ts","filename":"data/static/codefixes/directoryListingChallenge_3.ts","category_groups":["PII","Personal Data"],"source":{"start":2,"end":2,"column":{"start":3,"end":76}},"sink":{"start":2,"end":2,"column":{"start":3,"end":76},"content":"app.use('/ftp', serveIndexMiddleware, serveIndex('ftp', { icons: true }))"},"parent_line_number":2,"snippet":"app.use('/ftp', serveIndexMiddleware, serveIndex('ftp', { icons: true }))","fingerprint":"8ebcfc95a36b5c20927ea9e466b8715c_0","old_fingerprint":"5db120cf4a2719a554828a1545eec3bf_3","code_extract":"  app.use('/ftp', serveIndexMiddleware, serveIndex('ftp', { icons: true }))"},{"cwe_ids":["548"],"id":"javascript_express_exposed_dir_listing","title":"Missing access restriction on directory listing","description":"## Description\nInappropriate exposure of a directory listing could give attackers access to sensitive data or source code, either directly or through exploitation of an exposed file structure.\n\n## Remediations\n✅ Restrict access to sensitive directories and files\n\n## Resources\n- [Express Serve index middleware](https://expressjs.com/en/resources/middleware/serve-index.html)\n","documentation_url":"https://docs.bearer.com/reference/rules/javascript_express_exposed_dir_listing","line_number":5,"full_filename":"../juice-shop/data/static/codefixes/directoryListingChallenge_3.ts","filename":"data/static/codefixes/directoryListingChallenge_3.ts","category_groups":["PII","Personal Data"],"source":{"start":5,"end":5,"column":{"start":3,"end":115}},"sink":{"start":5,"end":5,"column":{"start":3,"end":115},"content":"app.use('/encryptionkeys', serveIndexMiddleware, serveIndex('encryptionkeys', { icons: true, view: 'details' }))"},"parent_line_number":5,"snippet":"app.use('/encryptionkeys', serveIndexMiddleware, serveIndex('encryptionkeys', { icons: true, view: 'details' }))","fingerprint":"8ebcfc95a36b5c20927ea9e466b8715c_1","old_fingerprint":"5db120cf4a2719a554828a1545eec3bf_7","code_extract":"  app.use('/encryptionkeys', serveIndexMiddleware, serveIndex('encryptionkeys', { icons: true, view: 'details' }))"},{"cwe_ids":["548"],"id":"javascript_express_exposed_dir_listing","title":"Missing access restriction on directory listing","description":"## Description\nInappropriate exposure of a directory listing could give attackers access to sensitive data or source code, either directly or through exploitation of an exposed file structure.\n\n## Remediations\n✅ Restrict access to sensitive directories and files\n\n## Resources\n- [Express Serve index middleware](https://expressjs.com/en/resources/middleware/serve-index.html)\n","documentation_url":"https://docs.bearer.com/reference/rules/javascript_express_exposed_dir_listing","line_number":9,"full_filename":"../juice-shop/data/static/codefixes/directoryListingChallenge_3.ts","filename":"data/static/codefixes/directoryListingChallenge_3.ts","category_groups":["PII","Personal Data"],"source":{"start":9,"end":9,"column":{"start":3,"end":103}},"sink":{"start":9,"end":9,"column":{"start":3,"end":103},"content":"app.use('/support/logs', serveIndexMiddleware, serveIndex('logs', { icons: true, view: 'details' }))"},"parent_line_number":9,"snippet":"app.use('/support/logs', serveIndexMiddleware, serveIndex('logs', { icons: true, view: 'details' }))","fingerprint":"8ebcfc95a36b5c20927ea9e466b8715c_2","old_fingerprint":"5db120cf4a2719a554828a1545eec3bf_15","code_extract":"  app.use('/support/logs', serveIndexMiddleware, serveIndex('logs', { icons: true, view: 'details' }))"},{"cwe_ids":["548"],"id":"javascript_express_exposed_dir_listing","title":"Missing access restriction on directory listing","description":"## Description\nInappropriate exposure of a directory listing could give attackers access to sensitive data or source code, either directly or through exploitation of an exposed file structure.\n\n## Remediations\n✅ Restrict access to sensitive directories and files\n\n## Resources\n- [Express Serve index middleware](https://expressjs.com/en/resources/middleware/serve-index.html)\n","documentation_url":"https://docs.bearer.com/reference/rules/javascript_express_exposed_dir_listing","line_number":2,"full_filename":"../juice-shop/data/static/codefixes/directoryListingChallenge_4.ts","filename":"data/static/codefixes/directoryListingChallenge_4.ts","category_groups":["PII","Personal Data"],"source":{"start":2,"end":2,"column":{"start":3,"end":77}},"sink":{"start":2,"end":2,"column":{"start":3,"end":77},"content":"app.use('/ftp', serveIndexMiddleware, serveIndex('ftp', { icons: false }))"},"parent_line_number":2,"snippet":"app.use('/ftp', serveIndexMiddleware, serveIndex('ftp', { icons: false }))","fingerprint":"d1d7fd4f95a122aab479067df9323e6c_0","old_fingerprint":"8d2d713022b45c274c1e5365646c48a9_5","code_extract":"  app.use('/ftp', serveIndexMiddleware, serveIndex('ftp', { icons: false }))"},{"cwe_ids":["548"],"id":"javascript_express_exposed_dir_listing","title":"Missing access restriction on directory listing","description":"## Description\nInappropriate exposure of a directory listing could give attackers access to sensitive data or source code, either directly or through exploitation of an exposed file structure.\n\n## Remediations\n✅ Restrict access to sensitive directories and files\n\n## Resources\n- [Express Serve index middleware](https://expressjs.com/en/resources/middleware/serve-index.html)\n","documentation_url":"https://docs.bearer.com/reference/rules/javascript_express_exposed_dir_listing","line_number":7,"full_filename":"../juice-shop/data/static/codefixes/directoryListingChallenge_4.ts","filename":"data/static/codefixes/directoryListingChallenge_4.ts","category_groups":["PII","Personal Data"],"source":{"start":7,"end":7,"column":{"start":3,"end":115}},"sink":{"start":7,"end":7,"column":{"start":3,"end":115},"content":"app.use('/encryptionkeys', serveIndexMiddleware, serveIndex('encryptionkeys', { icons: true, view: 'details' }))"},"parent_line_number":7,"snippet":"app.use('/encryptionkeys', serveIndexMiddleware, serveIndex('encryptionkeys', { icons: true, view: 'details' }))","fingerprint":"d1d7fd4f95a122aab479067df9323e6c_1","old_fingerprint":"8d2d713022b45c274c1e5365646c48a9_10","code_extract":"  app.use('/encryptionkeys', serveIndexMiddleware, serveIndex('encryptionkeys', { icons: true, view: 'details' }))"},{"cwe_ids":["548"],"id":"javascript_express_exposed_dir_listing","title":"Missing access restriction on directory listing","description":"## Description\nInappropriate exposure of a directory listing could give attackers access to sensitive data or source code, either directly or through exploitation of an exposed file structure.\n\n## Remediations\n✅ Restrict access to sensitive directories and files\n\n## Resources\n- [Express Serve index middleware](https://expressjs.com/en/resources/middleware/serve-index.html)\n","documentation_url":"https://docs.bearer.com/reference/rules/javascript_express_exposed_dir_listing","line_number":11,"full_filename":"../juice-shop/data/static/codefixes/directoryListingChallenge_4.ts","filename":"data/static/codefixes/directoryListingChallenge_4.ts","category_groups":["PII","Personal Data"],"source":{"start":11,"end":11,"column":{"start":3,"end":103}},"sink":{"start":11,"end":11,"column":{"start":3,"end":103},"content":"app.use('/support/logs', serveIndexMiddleware, serveIndex('logs', { icons: true, view: 'details' }))"},"parent_line_number":11,"snippet":"app.use('/support/logs', serveIndexMiddleware, serveIndex('logs', { icons: true, view: 'details' }))","fingerprint":"d1d7fd4f95a122aab479067df9323e6c_2","old_fingerprint":"8d2d713022b45c274c1e5365646c48a9_18","code_extract":"  app.use('/support/logs', serveIndexMiddleware, serveIndex('logs', { icons: true, view: 'details' }))"},{"cwe_ids":["548"],"id":"javascript_express_exposed_dir_listing","title":"Missing access restriction on directory listing","description":"## Description\nInappropriate exposure of a directory listing could give attackers access to sensitive data or source code, either directly or through exploitation of an exposed file structure.\n\n## Remediations\n✅ Restrict access to sensitive directories and files\n\n## Resources\n- [Express Serve index middleware](https://expressjs.com/en/resources/middleware/serve-index.html)\n","documentation_url":"https://docs.bearer.com/reference/rules/javascript_express_exposed_dir_listing","line_number":249,"full_filename":"../juice-shop/server.ts","filename":"server.ts","category_groups":["PII","Personal Data"],"source":{"start":249,"end":249,"column":{"start":3,"end":76}},"sink":{"start":249,"end":249,"column":{"start":3,"end":76},"content":"app.use('/ftp', serveIndexMiddleware, serveIndex('ftp', { icons: true }))"},"parent_line_number":249,"snippet":"app.use('/ftp', serveIndexMiddleware, serveIndex('ftp', { icons: true }))","fingerprint":"c539465e8119e4d020831d9f6cf0a973_0","old_fingerprint":"ad56a14d1d1efc9e28b032f70949ba9a_20","code_extract":"  app.use('/ftp', serveIndexMiddleware, serveIndex('ftp', { icons: true })) // vuln-code-snippet vuln-line directoryListingChallenge"},{"cwe_ids":["548"],"id":"javascript_express_exposed_dir_listing","title":"Missing access restriction on directory listing","description":"## Description\nInappropriate exposure of a directory listing could give attackers access to sensitive data or source code, either directly or through exploitation of an exposed file structure.\n\n## Remediations\n✅ Restrict access to sensitive directories and files\n\n## Resources\n- [Express Serve index middleware](https://expressjs.com/en/resources/middleware/serve-index.html)\n","documentation_url":"https://docs.bearer.com/reference/rules/javascript_express_exposed_dir_listing","line_number":254,"full_filename":"../juice-shop/server.ts","filename":"server.ts","category_groups":["PII","Personal Data"],"source":{"start":254,"end":254,"column":{"start":3,"end":115}},"sink":{"start":254,"end":254,"column":{"start":3,"end":115},"content":"app.use('/encryptionkeys', serveIndexMiddleware, serveIndex('encryptionkeys', { icons: true, view: 'details' }))"},"parent_line_number":254,"snippet":"app.use('/encryptionkeys', serveIndexMiddleware, serveIndex('encryptionkeys', { icons: true, view: 'details' }))","fingerprint":"c539465e8119e4d020831d9f6cf0a973_1","old_fingerprint":"ad56a14d1d1efc9e28b032f70949ba9a_21","code_extract":"  app.use('/encryptionkeys', serveIndexMiddleware, serveIndex('encryptionkeys', { icons: true, view: 'details' }))"},{"cwe_ids":["548"],"id":"javascript_express_exposed_dir_listing","title":"Missing access restriction on directory listing","description":"## Description\nInappropriate exposure of a directory listing could give attackers access to sensitive data or source code, either directly or through exploitation of an exposed file structure.\n\n## Remediations\n✅ Restrict access to sensitive directories and files\n\n## Resources\n- [Express Serve index middleware](https://expressjs.com/en/resources/middleware/serve-index.html)\n","documentation_url":"https://docs.bearer.com/reference/rules/javascript_express_exposed_dir_listing","line_number":258,"full_filename":"../juice-shop/server.ts","filename":"server.ts","category_groups":["PII","Personal Data"],"source":{"start":258,"end":258,"column":{"start":3,"end":103}},"sink":{"start":258,"end":258,"column":{"start":3,"end":103},"content":"app.use('/support/logs', serveIndexMiddleware, serveIndex('logs', { icons: true, view: 'details' }))"},"parent_line_number":258,"snippet":"app.use('/support/logs', serveIndexMiddleware, serveIndex('logs', { icons: true, view: 'details' }))","fingerprint":"c539465e8119e4d020831d9f6cf0a973_2","old_fingerprint":"ad56a14d1d1efc9e28b032f70949ba9a_22","code_extract":"  app.use('/support/logs', serveIndexMiddleware, serveIndex('logs', { icons: true, view: 'details' })) // vuln-code-snippet vuln-line accessLogDisclosureChallenge"},{"cwe_ids":["73"],"id":"javascript_express_external_file_upload","title":"Unsanitized user input in file request","description":"## Description\nPassing unsanitized user input to the sendFile API is bad practice and can lead to path manipulation, by which attackers can gain access to resources and data outside of the intended scope.\n\n## Remediations\n✅ Set the root option to be an absolute path to a directory\n\n```javascript\napp.post(\"/upload\", (req, res) =\u003e {\n  var options = {\n    root: path.join(__dirname, \"upload\")\n  }\n  res.sendFile(req.params.filename, options)\n}\n```\n\n## Resources\n- [Express sendFile API reference](http://expressjs.com/en/5x/api.html#res.sendFile)\n","documentation_url":"https://docs.bearer.com/reference/rules/javascript_express_external_file_upload","line_number":14,"full_filename":"../juice-shop/routes/keyServer.ts","filename":"routes/keyServer.ts","category_groups":["PII","Personal Data"],"source":{"start":14,"end":14,"column":{"start":7,"end":58}},"sink":{"start":14,"end":14,"column":{"start":7,"end":58},"content":"res.sendFile(path.resolve('encryptionkeys/', file))"},"parent_line_number":14,"snippet":"res.sendFile(path.resolve('encryptionkeys/', file))","fingerprint":"8643fdcb8411f54a6af5a25deb2da818_0","old_fingerprint":"0eeaa1a80c62a44bf9aeff267ff4c35d_0","code_extract":"      res.sendFile(path.resolve('encryptionkeys/', file))"},{"cwe_ids":["73"],"id":"javascript_express_external_file_upload","title":"Unsanitized user input in file request","description":"## Description\nPassing unsanitized user input to the sendFile API is bad practice and can lead to path manipulation, by which attackers can gain access to resources and data outside of the intended scope.\n\n## Remediations\n✅ Set the root option to be an absolute path to a directory\n\n```javascript\napp.post(\"/upload\", (req, res) =\u003e {\n  var options = {\n    root: path.join(__dirname, \"upload\")\n  }\n  res.sendFile(req.params.filename, options)\n}\n```\n\n## Resources\n- [Express sendFile API reference](http://expressjs.com/en/5x/api.html#res.sendFile)\n","documentation_url":"https://docs.bearer.com/reference/rules/javascript_express_external_file_upload","line_number":14,"full_filename":"../juice-shop/routes/logfileServer.ts","filename":"routes/logfileServer.ts","category_groups":["PII","Personal Data"],"source":{"start":14,"end":14,"column":{"start":7,"end":48}},"sink":{"start":14,"end":14,"column":{"start":7,"end":48},"content":"res.sendFile(path.resolve('logs/', file))"},"parent_line_number":14,"snippet":"res.sendFile(path.resolve('logs/', file))","fingerprint":"caf5b22a357fad021743f7b2b8da54b8_0","old_fingerprint":"31fc580a27c704ce304ac2a1e6157c43_1","code_extract":"      res.sendFile(path.resolve('logs/', file))"},{"cwe_ids":["73"],"id":"javascript_express_external_file_upload","title":"Unsanitized user input in file request","description":"## Description\nPassing unsanitized user input to the sendFile API is bad practice and can lead to path manipulation, by which attackers can gain access to resources and data outside of the intended scope.\n\n## Remediations\n✅ Set the root option to be an absolute path to a directory\n\n```javascript\napp.post(\"/upload\", (req, res) =\u003e {\n  var options = {\n    root: path.join(__dirname, \"upload\")\n  }\n  res.sendFile(req.params.filename, options)\n}\n```\n\n## Resources\n- [Express sendFile API reference](http://expressjs.com/en/5x/api.html#res.sendFile)\n","documentation_url":"https://docs.bearer.com/reference/rules/javascript_express_external_file_upload","line_number":14,"full_filename":"../juice-shop/routes/quarantineServer.ts","filename":"routes/quarantineServer.ts","category_groups":["PII","Personal Data"],"source":{"start":14,"end":14,"column":{"start":7,"end":58}},"sink":{"start":14,"end":14,"column":{"start":7,"end":58},"content":"res.sendFile(path.resolve('ftp/quarantine/', file))"},"parent_line_number":14,"snippet":"res.sendFile(path.resolve('ftp/quarantine/', file))","fingerprint":"684ac0da58fe48421abddc5208554ab4_0","old_fingerprint":"11cd84adee8983d0805991c69b8703f0_2","code_extract":"      res.sendFile(path.resolve('ftp/quarantine/', file))"},{"cwe_ids":["693"],"id":"javascript_express_jwt_not_revoked","title":"Missing revoke method on JWT","description":"## Description\nThe best practice caching policy is to revoke JWTs especially when these contain senstitive information.\n\n## Remediations\n✅ Ensure JWTs are short-lived by revoking them\n\n```javascript\nexpressjwt({\n  ...\n  isRevoked: this.customRevokeCall(),\n  ...\n})\n```\n\n## Resources\n- [ExpressJWT documentation on revoking tokens](https://github.com/auth0/express-jwt#revoked-tokens)\n","documentation_url":"https://docs.bearer.com/reference/rules/javascript_express_jwt_not_revoked","line_number":54,"full_filename":"../juice-shop/lib/insecurity.ts","filename":"lib/insecurity.ts","category_groups":["PII","Personal Data"],"source":{"start":54,"end":54,"column":{"start":35,"end":77}},"sink":{"start":54,"end":54,"column":{"start":35,"end":77},"content":"expressJwt(({ secret: publicKey }) as any)"},"parent_line_number":54,"snippet":"expressJwt(({ secret: publicKey }) as any)","fingerprint":"d5aa377b45e8572a3f1634b5411f5973_0","old_fingerprint":"525f2d85e6b298eb1dfa2e3b344017e5_0","code_extract":"export const isAuthorized = () =\u003e expressJwt(({ secret: publicKey }) as any)"},{"cwe_ids":["693"],"id":"javascript_express_jwt_not_revoked","title":"Missing revoke method on JWT","description":"## Description\nThe best practice caching policy is to revoke JWTs especially when these contain senstitive information.\n\n## Remediations\n✅ Ensure JWTs are short-lived by revoking them\n\n```javascript\nexpressjwt({\n  ...\n  isRevoked: this.customRevokeCall(),\n  ...\n})\n```\n\n## Resources\n- [ExpressJWT documentation on revoking tokens](https://github.com/auth0/express-jwt#revoked-tokens)\n","documentation_url":"https://docs.bearer.com/reference/rules/javascript_express_jwt_not_revoked","line_number":55,"full_filename":"../juice-shop/lib/insecurity.ts","filename":"lib/insecurity.ts","category_groups":["PII","Personal Data"],"source":{"start":55,"end":55,"column":{"start":30,"end":79}},"sink":{"start":55,"end":55,"column":{"start":30,"end":79},"content":"expressJwt({ secret: '' + Math.random() } as any)"},"parent_line_number":55,"snippet":"expressJwt({ secret: '' + Math.random() } as any)","fingerprint":"d5aa377b45e8572a3f1634b5411f5973_1","old_fingerprint":"525f2d85e6b298eb1dfa2e3b344017e5_1","code_extract":"export const denyAll = () =\u003e expressJwt({ secret: '' + Math.random() } as any)"},{"cwe_ids":["79"],"id":"javascript_lang_manual_html_sanitization","title":"Usage of manual HTML sanitization (XSS)","description":"## Description\nSanitizing HTML manually is error prone and can lead to Cross Site\nScripting (XSS) vulnerabilities.\n\n## Remediations\n\n❌ Avoid manually escaping HTML:\n\n```javascript\nconst sanitizedUserInput = user.Input\n  .replaceAll('\u003c', '\u0026lt;')\n  .replaceAll('\u003e', '\u0026gt;');\nconst html = `\u003cstrong\u003e${sanitizedUserInput}\u003c/strong\u003e`;\n```\n\n✅ Use a HTML sanitization library:\n\n```javascript\nimport sanitizeHtml from 'sanitize-html';\n\nconst html = sanitizeHtml(`\u003cstrong\u003e${user.Input}\u003c/strong\u003e`);\n```\n\n## Resources\n- [OWASP XSS explained](https://owasp.org/www-community/attacks/xss/)\n","documentation_url":"https://docs.bearer.com/reference/rules/javascript_lang_manual_html_sanitization","line_number":21,"full_filename":"../juice-shop/data/static/codefixes/redirectChallenge_3.ts","filename":"data/static/codefixes/redirectChallenge_3.ts","category_groups":["PII","Personal Data"],"source":{"start":21,"end":30,"column":{"start":10,"end":7}},"sink":{"start":21,"end":30,"column":{"start":10,"end":7},"content":"str.replace(/[\u0026\u003c\u003e'\"]/g,\n    tag =\u003e {\n      return ({\n        '\u0026': '\u0026amp;',\n        '\u003c': '\u0026lt;',\n        '\u003e': '\u0026gt;',\n        \"'\": '\u0026#39;',\n        '\"': '\u0026quot;'\n      }[tag])\n    })"},"parent_line_number":21,"snippet":"str.replace(/[\u0026\u003c\u003e'\"]/g,\n    tag =\u003e {\n      return ({\n        '\u0026': '\u0026amp;',\n        '\u003c': '\u0026lt;',\n        '\u003e': '\u0026gt;',\n        \"'\": '\u0026#39;',\n        '\"': '\u0026quot;'\n      }[tag])\n    })","fingerprint":"21de2a29f76880dbfbba700acb3cf4b4_0","old_fingerprint":"84d430d24286abcc0a35b0b11258524a_0","code_extract":"  return str.replace(/[\u0026\u003c\u003e'\"]/g,\n    tag =\u003e {\n      return ({\n        ...omitted (buffer value 3)\n        '\"': '\u0026quot;'\n      }[tag])\n    })"},{"cwe_ids":["79"],"id":"javascript_lang_manual_html_sanitization","title":"Usage of manual HTML sanitization (XSS)","description":"## Description\nSanitizing HTML manually is error prone and can lead to Cross Site\nScripting (XSS) vulnerabilities.\n\n## Remediations\n\n❌ Avoid manually escaping HTML:\n\n```javascript\nconst sanitizedUserInput = user.Input\n  .replaceAll('\u003c', '\u0026lt;')\n  .replaceAll('\u003e', '\u0026gt;');\nconst html = `\u003cstrong\u003e${sanitizedUserInput}\u003c/strong\u003e`;\n```\n\n✅ Use a HTML sanitization library:\n\n```javascript\nimport sanitizeHtml from 'sanitize-html';\n\nconst html = sanitizeHtml(`\u003cstrong\u003e${user.Input}\u003c/strong\u003e`);\n```\n\n## Resources\n- [OWASP XSS explained](https://owasp.org/www-community/attacks/xss/)\n","documentation_url":"https://docs.bearer.com/reference/rules/javascript_lang_manual_html_sanitization","line_number":59,"full_filename":"../juice-shop/data/static/codefixes/restfulXssChallenge_2.ts","filename":"data/static/codefixes/restfulXssChallenge_2.ts","category_groups":["PII","Personal Data"],"source":{"start":59,"end":59,"column":{"start":34,"end":106}},"sink":{"start":59,"end":59,"column":{"start":34,"end":82},"content":"tableData[i].description.replaceAll('\u003c', '\u0026lt;')"},"parent_line_number":59,"snippet":"tableData[i].description.replaceAll('\u003c', '\u0026lt;')","fingerprint":"d098ec6c1ec482df2422801759454ad2_0","old_fingerprint":"92494b7218d5aa07c3192e7209326e28_1","code_extract":"      tableData[i].description = tableData[i].description.replaceAll('\u003c', '\u0026lt;').replaceAll('\u003e', '\u0026gt;')"},{"cwe_ids":["328"],"id":"javascript_lang_weak_hash_md5","title":"Usage of weak hashing library (MD5)","description":"## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), MD5 is considered a weak hash algorithm and therefore shouldn't be used.\n\n✅ Use stronger hashing algorithms when storing data.\n\n```javascript\nconst crypto = require(\"crypto\");\n\nconst key = \"secret key\";\nconst hash = crypto.createHmac(\"es-256-cbc\", key).update(user.password);\n```\n\n## Resources\n- [NodeJS Crypto Module](https://nodejs.org/api/crypto.html)\n","documentation_url":"https://docs.bearer.com/reference/rules/javascript_lang_weak_hash_md5","line_number":77,"full_filename":"../juice-shop/Gruntfile.js","filename":"Gruntfile.js","category_groups":["PII","Personal Data"],"source":{"start":77,"end":77,"column":{"start":7,"end":25}},"sink":{"start":77,"end":77,"column":{"start":7,"end":25},"content":"md5.update(buffer)"},"parent_line_number":77,"snippet":"md5.update(buffer)","fingerprint":"21fa322fb6bf051a5864e6b1e84c7d36_0","old_fingerprint":"d1fcb44d223f8b767dd16954d00ff5b4_1","code_extract":"      md5.update(buffer)"},{"cwe_ids":["328"],"id":"javascript_lang_weak_hash_md5","title":"Usage of weak hashing library (MD5)","description":"## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), MD5 is considered a weak hash algorithm and therefore shouldn't be used.\n\n✅ Use stronger hashing algorithms when storing data.\n\n```javascript\nconst crypto = require(\"crypto\");\n\nconst key = \"secret key\";\nconst hash = crypto.createHmac(\"es-256-cbc\", key).update(user.password);\n```\n\n## Resources\n- [NodeJS Crypto Module](https://nodejs.org/api/crypto.html)\n","documentation_url":"https://docs.bearer.com/reference/rules/javascript_lang_weak_hash_md5","line_number":43,"full_filename":"../juice-shop/lib/insecurity.ts","filename":"lib/insecurity.ts","category_groups":["PII","Personal Data"],"source":{"start":43,"end":43,"column":{"start":39,"end":76}},"sink":{"start":43,"end":43,"column":{"start":39,"end":76},"content":"crypto.createHash('md5').update(data)"},"parent_line_number":43,"snippet":"crypto.createHash('md5').update(data)","fingerprint":"42a76a8c10a52b38c1b8729a2f211830_0","old_fingerprint":"ef400b2c5d5e06f43f41d09577065cdd_0","code_extract":"export const hash = (data: string) =\u003e crypto.createHash('md5').update(data).digest('hex')"}]}
