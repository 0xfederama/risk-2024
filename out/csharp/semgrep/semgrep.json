{"errors": [], "interfile_languages_used": [], "paths": {"scanned": ["/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/.dccache", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/App.config", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/Build.bat", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_CommandText_01.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_CommandText_02.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_CommandText_03.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_CommandText_04.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_CommandText_05.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_CommandText_06.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_CommandText_07.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_CommandText_08.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_CommandText_09.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_CommandText_10.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_CommandText_11.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_CommandText_12.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_CommandText_13.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_CommandText_14.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_CommandText_15.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_CommandText_16.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_CommandText_17.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_CommandText_21.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_CommandText_22a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_CommandText_22b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_CommandText_31.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_CommandText_41.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_CommandText_42.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_CommandText_45.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_CommandText_51a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_CommandText_51b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_CommandText_52a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_CommandText_52b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_CommandText_52c.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_CommandText_53a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_CommandText_53b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_CommandText_53c.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_CommandText_53d.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_CommandText_54a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_CommandText_54b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_CommandText_54c.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_CommandText_54d.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_CommandText_54e.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_CommandText_61a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_CommandText_61b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_CommandText_66a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_CommandText_66b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_CommandText_67a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_CommandText_67b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_CommandText_68a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_CommandText_68b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_CommandText_71a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_CommandText_71b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_CommandText_72a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_CommandText_72b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_CommandText_73a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_CommandText_73b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_CommandText_74a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_CommandText_74b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_CommandText_75a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_CommandText_75b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_CommandText_81_bad.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_CommandText_81_base.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_CommandText_81_goodB2G.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_CommandText_81_goodG2B.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_CommandText_81a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_01.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_02.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_03.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_04.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_05.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_06.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_07.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_08.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_09.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_10.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_11.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_12.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_13.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_14.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_15.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_16.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_17.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_21.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_22a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_22b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_31.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_41.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_42.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_45.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_51a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_51b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_52a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_52b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_52c.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_53a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_53b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_53c.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_53d.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_54a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_54b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_54c.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_54d.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_54e.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_61a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_61b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_66a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_66b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_67a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_67b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_68a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_68b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_71a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_71b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_72a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_72b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_73a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_73b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_74a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_74b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_75a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_75b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_81_bad.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_81_base.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_81_goodB2G.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_81_goodG2B.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_81a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_01.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_02.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_03.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_04.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_05.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_06.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_07.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_08.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_09.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_10.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_11.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_12.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_13.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_14.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_15.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_16.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_17.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_21.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_22a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_22b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_31.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_41.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_42.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_45.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_51a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_51b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_52a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_52b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_52c.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_53a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_53b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_53c.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_53d.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_54a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_54b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_54c.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_54d.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_54e.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_61a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_61b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_66a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_66b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_67a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_67b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_68a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_68b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_71a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_71b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_72a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_72b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_73a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_73b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_74a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_74b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_75a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_75b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_81_bad.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_81_base.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_81_goodB2G.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_81_goodG2B.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_81a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_CommandText_01.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_CommandText_02.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_CommandText_03.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_CommandText_04.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_CommandText_05.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_CommandText_06.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_CommandText_07.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_CommandText_08.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_CommandText_09.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_CommandText_10.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_CommandText_11.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_CommandText_12.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_CommandText_13.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_CommandText_14.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_CommandText_15.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_CommandText_16.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_CommandText_17.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_CommandText_21.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_CommandText_22a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_CommandText_22b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_CommandText_31.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_CommandText_41.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_CommandText_42.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_CommandText_45.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_CommandText_51a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_CommandText_51b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_CommandText_52a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_CommandText_52b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_CommandText_52c.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_CommandText_53a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_CommandText_53b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_CommandText_53c.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_CommandText_53d.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_CommandText_54a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_CommandText_54b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_CommandText_54c.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_CommandText_54d.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_CommandText_54e.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_CommandText_61a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_CommandText_61b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_CommandText_66a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_CommandText_66b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_CommandText_67a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_CommandText_67b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_CommandText_68a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_CommandText_68b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_CommandText_71a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_CommandText_71b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_CommandText_72a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_CommandText_72b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_CommandText_73a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_CommandText_73b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_CommandText_74a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_CommandText_74b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_CommandText_75a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_CommandText_75b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_CommandText_81_bad.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_CommandText_81_base.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_CommandText_81_goodB2G.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_CommandText_81_goodG2B.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_CommandText_81a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_01.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_02.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_03.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_04.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_05.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_06.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_07.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_08.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_09.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_10.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_11.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_12.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_13.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_14.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_15.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_16.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_17.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_21.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_22a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_22b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_31.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_41.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_42.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_45.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_51a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_51b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_52a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_52b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_52c.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_53a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_53b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_53c.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_53d.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_54a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_54b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_54c.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_54d.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_54e.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_61a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_61b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_66a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_66b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_67a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_67b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_68a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_68b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_71a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_71b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_72a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_72b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_73a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_73b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_74a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_74b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_75a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_75b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_81_bad.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_81_base.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_81_goodB2G.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_81_goodG2B.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_81a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_01.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_02.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_03.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_04.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_05.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_06.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_07.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_08.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_09.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_10.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_11.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_12.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_13.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_14.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_15.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_16.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_17.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_21.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_22a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_22b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_31.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_41.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_42.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_45.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_51a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_51b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_52a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_52b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_52c.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_53a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_53b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_53c.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_53d.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_54a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_54b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_54c.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_54d.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_54e.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_61a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_61b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_66a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_66b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_67a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_67b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_68a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_68b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_71a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_71b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_72a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_72b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_73a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_73b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_74a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_74b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_75a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_75b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_81_bad.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_81_base.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_81_goodB2G.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_81_goodG2B.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_81a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_CommandText_01.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_CommandText_02.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_CommandText_03.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_CommandText_04.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_CommandText_05.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_CommandText_06.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_CommandText_07.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_CommandText_08.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_CommandText_09.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_CommandText_10.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_CommandText_11.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_CommandText_12.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_CommandText_13.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_CommandText_14.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_CommandText_15.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_CommandText_16.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_CommandText_17.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_CommandText_21.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_CommandText_22a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_CommandText_22b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_CommandText_31.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_CommandText_41.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_CommandText_42.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_CommandText_45.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_CommandText_51a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_CommandText_51b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_CommandText_52a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_CommandText_52b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_CommandText_52c.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_CommandText_53a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_CommandText_53b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_CommandText_53c.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_CommandText_53d.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_CommandText_54a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_CommandText_54b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_CommandText_54c.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_CommandText_54d.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_CommandText_54e.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_CommandText_61a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_CommandText_61b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_CommandText_66a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_CommandText_66b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_CommandText_67a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_CommandText_67b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_CommandText_68a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_CommandText_68b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_CommandText_71a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_CommandText_71b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_CommandText_72a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_CommandText_72b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_CommandText_73a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_CommandText_73b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_CommandText_74a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_CommandText_74b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_CommandText_75a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_CommandText_75b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_CommandText_81_bad.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_CommandText_81_base.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_CommandText_81_goodB2G.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_CommandText_81_goodG2B.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_CommandText_81a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_01.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_02.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_03.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_04.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_05.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_06.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_07.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_08.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_09.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_10.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_11.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_12.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_13.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_14.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_15.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_16.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_17.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_21.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_22a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_22b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_31.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_41.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_42.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_45.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_51a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_51b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_52a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_52b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_52c.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_53a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_53b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_53c.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_53d.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_54a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_54b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_54c.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_54d.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_54e.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_61a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_61b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_66a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_66b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_67a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_67b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_68a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_68b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_71a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_71b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_72a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_72b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_73a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_73b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_74a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_74b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_75a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_75b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_81_bad.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_81_base.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_81_goodB2G.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_81_goodG2B.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_81a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_01.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_02.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_03.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_04.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_05.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_06.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_07.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_08.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_09.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_10.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_11.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_12.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_13.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_14.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_15.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_16.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_17.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_21.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_22a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_22b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_31.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_41.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_42.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_45.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_51a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_51b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_52a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_52b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_52c.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_53a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_53b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_53c.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_53d.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_54a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_54b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_54c.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_54d.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_54e.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_61a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_61b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_66a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_66b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_67a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_67b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_68a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_68b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_71a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_71b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_72a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_72b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_73a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_73b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_74a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_74b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_75a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_75b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_81_bad.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_81_base.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_81_goodB2G.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_81_goodG2B.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_81a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_CommandText_01.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_CommandText_02.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_CommandText_03.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_CommandText_04.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_CommandText_05.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_CommandText_06.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_CommandText_07.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_CommandText_08.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_CommandText_09.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_CommandText_10.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_CommandText_11.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_CommandText_12.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_CommandText_13.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_CommandText_14.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_CommandText_15.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_CommandText_16.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_CommandText_17.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_CommandText_21.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_CommandText_22a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_CommandText_22b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_CommandText_31.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_CommandText_41.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_CommandText_42.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_CommandText_45.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_CommandText_51a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_CommandText_51b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_CommandText_52a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_CommandText_52b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_CommandText_52c.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_CommandText_53a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_CommandText_53b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_CommandText_53c.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_CommandText_53d.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_CommandText_54a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_CommandText_54b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_CommandText_54c.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_CommandText_54d.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_CommandText_54e.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_CommandText_61a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_CommandText_61b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_CommandText_66a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_CommandText_66b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_CommandText_67a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_CommandText_67b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_CommandText_68a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_CommandText_68b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_CommandText_71a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_CommandText_71b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_CommandText_72a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_CommandText_72b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_CommandText_73a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_CommandText_73b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_CommandText_74a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_CommandText_74b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_CommandText_75a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_CommandText_75b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_CommandText_81_bad.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_CommandText_81_base.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_CommandText_81_goodB2G.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_CommandText_81_goodG2B.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_CommandText_81a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_01.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_02.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_03.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_04.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_05.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_06.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_07.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_08.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_09.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_10.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_11.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_12.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_13.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_14.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_15.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_16.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_17.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_21.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_22a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_22b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_31.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_41.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_42.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_45.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_51a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_51b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_52a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_52b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_52c.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_53a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_53b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_53c.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_53d.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_54a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_54b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_54c.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_54d.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_54e.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_61a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_61b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_66a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_66b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_67a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_67b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_68a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_68b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_71a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_71b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_72a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_72b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_73a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_73b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_74a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_74b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_75a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_75b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_81_bad.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_81_base.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_81_goodB2G.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_81_goodG2B.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_81a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_01.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_02.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_03.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_04.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_05.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_06.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_07.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_08.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_09.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_10.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_11.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_12.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_13.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_14.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_15.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_16.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_17.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_21.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_22a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_22b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_31.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_41.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_42.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_45.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_51a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_51b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_52a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_52b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_52c.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_53a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_53b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_53c.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_53d.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_54a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_54b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_54c.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_54d.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_54e.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_61a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_61b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_66a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_66b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_67a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_67b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_68a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_68b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_71a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_71b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_72a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_72b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_73a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_73b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_74a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_74b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_75a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_75b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_81_bad.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_81_base.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_81_goodB2G.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_81_goodG2B.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_81a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_CommandText_01.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_CommandText_02.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_CommandText_03.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_CommandText_04.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_CommandText_05.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_CommandText_06.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_CommandText_07.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_CommandText_08.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_CommandText_09.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_CommandText_10.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_CommandText_11.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_CommandText_12.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_CommandText_13.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_CommandText_14.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_CommandText_15.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_CommandText_16.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_CommandText_17.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_CommandText_21.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_CommandText_22a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_CommandText_22b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_CommandText_31.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_CommandText_41.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_CommandText_42.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_CommandText_45.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_CommandText_51a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_CommandText_51b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_CommandText_52a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_CommandText_52b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_CommandText_52c.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_CommandText_53a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_CommandText_53b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_CommandText_53c.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_CommandText_53d.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_CommandText_54a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_CommandText_54b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_CommandText_54c.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_CommandText_54d.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_CommandText_54e.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_CommandText_61a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_CommandText_61b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_CommandText_66a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_CommandText_66b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_CommandText_67a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_CommandText_67b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_CommandText_68a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_CommandText_68b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_CommandText_71a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_CommandText_71b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_CommandText_72a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_CommandText_72b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_CommandText_73a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_CommandText_73b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_CommandText_74a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_CommandText_74b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_CommandText_75a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_CommandText_75b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_CommandText_81_bad.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_CommandText_81_base.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_CommandText_81_goodB2G.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_CommandText_81_goodG2B.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_CommandText_81a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_01.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_02.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_03.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_04.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_05.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_06.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_07.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_08.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_09.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_10.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_11.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_12.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_13.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_14.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_15.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_16.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_17.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_21.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_22a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_22b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_31.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_41.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_42.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_45.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_51a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_51b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_52a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_52b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_52c.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_53a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_53b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_53c.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_53d.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_54a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_54b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_54c.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_54d.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_54e.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_61a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_61b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_66a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_66b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_67a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_67b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_68a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_68b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_71a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_71b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_72a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_72b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_73a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_73b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_74a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_74b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_75a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_75b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_81_bad.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_81_base.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_81_goodB2G.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_81_goodG2B.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_81a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_01.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_02.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_03.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_04.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_05.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_06.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_07.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_08.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_09.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_10.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_11.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_12.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_13.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_14.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_15.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_16.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_17.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_21.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_22a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_22b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_31.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_41.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_42.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_45.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_51a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_51b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_52a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_52b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_52c.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_53a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_53b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_53c.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_53d.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_54a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_54b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_54c.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_54d.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_54e.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_61a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_61b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_66a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_66b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_67a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_67b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_68a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_68b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_71a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_71b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_72a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_72b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_73a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_73b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_74a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_74b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_75a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_75b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_81_bad.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_81_base.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_81_goodB2G.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_81_goodG2B.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_81a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_NetClient_CommandText_01.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_NetClient_CommandText_02.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_NetClient_CommandText_03.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_NetClient_CommandText_04.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_NetClient_CommandText_05.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_NetClient_CommandText_06.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_NetClient_CommandText_07.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_NetClient_CommandText_08.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_NetClient_CommandText_09.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_NetClient_CommandText_10.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_NetClient_CommandText_11.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_NetClient_CommandText_12.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_NetClient_CommandText_13.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_NetClient_CommandText_14.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_NetClient_CommandText_15.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_NetClient_CommandText_16.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_NetClient_CommandText_17.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_NetClient_CommandText_21.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_NetClient_CommandText_22a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_NetClient_CommandText_22b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_NetClient_CommandText_31.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_NetClient_CommandText_41.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_NetClient_CommandText_42.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_NetClient_CommandText_45.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_NetClient_CommandText_51a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_NetClient_CommandText_51b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_NetClient_CommandText_52a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_NetClient_CommandText_52b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_NetClient_CommandText_52c.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_NetClient_CommandText_53a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_NetClient_CommandText_53b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_NetClient_CommandText_53c.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_NetClient_CommandText_53d.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_NetClient_CommandText_54a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_NetClient_CommandText_54b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_NetClient_CommandText_54c.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_NetClient_CommandText_54d.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_NetClient_CommandText_54e.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_NetClient_CommandText_61a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_NetClient_CommandText_61b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_NetClient_CommandText_66a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_NetClient_CommandText_66b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_NetClient_CommandText_67a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_NetClient_CommandText_67b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_NetClient_CommandText_68a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_NetClient_CommandText_68b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_NetClient_CommandText_71a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_NetClient_CommandText_71b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_NetClient_CommandText_72a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_NetClient_CommandText_72b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_NetClient_CommandText_73a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_NetClient_CommandText_73b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_NetClient_CommandText_74a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_NetClient_CommandText_74b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_NetClient_CommandText_75a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_NetClient_CommandText_75b.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_NetClient_CommandText_81_bad.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_NetClient_CommandText_81_base.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_NetClient_CommandText_81_goodB2G.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_NetClient_CommandText_81_goodG2B.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_NetClient_CommandText_81a.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection_s01.csproj", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection_s01.sln", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/Program.cs", "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/Properties/AssemblyInfo.cs"]}, "results": [{"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 55, "line": 63, "offset": 2221}, "extra": {"engine_kind": "OSS", "fingerprint": "928021027deaed211bc7dceff8e638f28ca3ae224d2ec5336e316e2acdf1408d5ecb2c20c7cd418ff0268f6e860090ac95aa6bfd3fb0355838a1fd9e94b1ed69_0", "is_ignored": false, "lines": "            BinaryFormatter bf = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_CommandText_75a.cs", "start": {"col": 13, "line": 63, "offset": 2179}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 55, "line": 113, "offset": 4028}, "extra": {"engine_kind": "OSS", "fingerprint": "928021027deaed211bc7dceff8e638f28ca3ae224d2ec5336e316e2acdf1408d5ecb2c20c7cd418ff0268f6e860090ac95aa6bfd3fb0355838a1fd9e94b1ed69_1", "is_ignored": false, "lines": "            BinaryFormatter bf = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_CommandText_75a.cs", "start": {"col": 13, "line": 113, "offset": 3986}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 55, "line": 156, "offset": 5665}, "extra": {"engine_kind": "OSS", "fingerprint": "928021027deaed211bc7dceff8e638f28ca3ae224d2ec5336e316e2acdf1408d5ecb2c20c7cd418ff0268f6e860090ac95aa6bfd3fb0355838a1fd9e94b1ed69_2", "is_ignored": false, "lines": "            BinaryFormatter bf = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_CommandText_75a.cs", "start": {"col": 13, "line": 156, "offset": 5623}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 48, "line": 38, "offset": 1268}, "extra": {"engine_kind": "OSS", "fingerprint": "28ea4fe874d69b7ab9c34dd7fcb479acad44d9254a478adbc39e813febaff042db94219a55bf46e61c9debc444dca7b43300598a716d806bf36fa0f82bb38ec1_0", "is_ignored": false, "lines": "            var binForm = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_CommandText_75b.cs", "start": {"col": 17, "line": 38, "offset": 1237}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 48, "line": 100, "offset": 3851}, "extra": {"engine_kind": "OSS", "fingerprint": "28ea4fe874d69b7ab9c34dd7fcb479acad44d9254a478adbc39e813febaff042db94219a55bf46e61c9debc444dca7b43300598a716d806bf36fa0f82bb38ec1_1", "is_ignored": false, "lines": "            var binForm = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_CommandText_75b.cs", "start": {"col": 17, "line": 100, "offset": 3820}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 48, "line": 160, "offset": 6409}, "extra": {"engine_kind": "OSS", "fingerprint": "28ea4fe874d69b7ab9c34dd7fcb479acad44d9254a478adbc39e813febaff042db94219a55bf46e61c9debc444dca7b43300598a716d806bf36fa0f82bb38ec1_2", "is_ignored": false, "lines": "            var binForm = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_CommandText_75b.cs", "start": {"col": 17, "line": 160, "offset": 6378}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 66, "offset": 2398}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 66, "offset": 2398}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_01.cs", "start": {"col": 21, "line": 66, "offset": 2299}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 66, "offset": 2393}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_01.cs", "start": {"col": 111, "line": 66, "offset": 2389}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "2db57075f32d501c1b4a0443ab15c0423190a3c83a748f15216d9e124c09985d53eee821c9e99f38197354ea4773ae4a540fc05530e6c0c56824d69ed032c94b_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 66, "offset": 2312}, "start": {"col": 21, "line": 66, "offset": 2299}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 66, "offset": 2324}, "start": {"col": 35, "line": 66, "offset": 2313}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 66, "offset": 2393}, "start": {"col": 111, "line": 66, "offset": 2389}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_01.cs", "start": {"col": 21, "line": 66, "offset": 2299}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 77, "offset": 2853}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 77, "offset": 2853}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_02.cs", "start": {"col": 25, "line": 77, "offset": 2754}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 77, "offset": 2848}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_02.cs", "start": {"col": 115, "line": 77, "offset": 2844}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "74aa055185de30b56e821618d0ec2d8e66a9f387f6c503ad5298d016ef7640e3457e63102d8008ee4137209c5100cbc12ca2f426135c586ca8d19ba83f9a9c38_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 77, "offset": 2767}, "start": {"col": 25, "line": 77, "offset": 2754}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 77, "offset": 2779}, "start": {"col": 39, "line": 77, "offset": 2768}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 77, "offset": 2848}, "start": {"col": 115, "line": 77, "offset": 2844}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_02.cs", "start": {"col": 25, "line": 77, "offset": 2754}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 124, "offset": 4702}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 124, "offset": 4702}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_02.cs", "start": {"col": 25, "line": 124, "offset": 4603}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 124, "offset": 4697}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_02.cs", "start": {"col": 115, "line": 124, "offset": 4693}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "74aa055185de30b56e821618d0ec2d8e66a9f387f6c503ad5298d016ef7640e3457e63102d8008ee4137209c5100cbc12ca2f426135c586ca8d19ba83f9a9c38_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 124, "offset": 4616}, "start": {"col": 25, "line": 124, "offset": 4603}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 124, "offset": 4628}, "start": {"col": 39, "line": 124, "offset": 4617}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 124, "offset": 4697}, "start": {"col": 115, "line": 124, "offset": 4693}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_02.cs", "start": {"col": 25, "line": 124, "offset": 4603}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 170, "offset": 6521}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 170, "offset": 6521}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_02.cs", "start": {"col": 25, "line": 170, "offset": 6422}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 170, "offset": 6516}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_02.cs", "start": {"col": 115, "line": 170, "offset": 6512}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "74aa055185de30b56e821618d0ec2d8e66a9f387f6c503ad5298d016ef7640e3457e63102d8008ee4137209c5100cbc12ca2f426135c586ca8d19ba83f9a9c38_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 170, "offset": 6435}, "start": {"col": 25, "line": 170, "offset": 6422}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 170, "offset": 6447}, "start": {"col": 39, "line": 170, "offset": 6436}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 170, "offset": 6516}, "start": {"col": 115, "line": 170, "offset": 6512}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_02.cs", "start": {"col": 25, "line": 170, "offset": 6422}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 77, "offset": 2852}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 77, "offset": 2852}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_03.cs", "start": {"col": 25, "line": 77, "offset": 2753}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 77, "offset": 2847}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_03.cs", "start": {"col": 115, "line": 77, "offset": 2843}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "9fd6064f73217dc334b79c4d352e3a04403c2d66709b7b4d35f99454e1592aacf8e54e8e755e8fcd6a9e0f6ea3895e0dd450653cfce008adccf2d618bebca71a_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 77, "offset": 2766}, "start": {"col": 25, "line": 77, "offset": 2753}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 77, "offset": 2778}, "start": {"col": 39, "line": 77, "offset": 2767}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 77, "offset": 2847}, "start": {"col": 115, "line": 77, "offset": 2843}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_03.cs", "start": {"col": 25, "line": 77, "offset": 2753}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 124, "offset": 4699}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 124, "offset": 4699}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_03.cs", "start": {"col": 25, "line": 124, "offset": 4600}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 124, "offset": 4694}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_03.cs", "start": {"col": 115, "line": 124, "offset": 4690}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "9fd6064f73217dc334b79c4d352e3a04403c2d66709b7b4d35f99454e1592aacf8e54e8e755e8fcd6a9e0f6ea3895e0dd450653cfce008adccf2d618bebca71a_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 124, "offset": 4613}, "start": {"col": 25, "line": 124, "offset": 4600}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 124, "offset": 4625}, "start": {"col": 39, "line": 124, "offset": 4614}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 124, "offset": 4694}, "start": {"col": 115, "line": 124, "offset": 4690}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_03.cs", "start": {"col": 25, "line": 124, "offset": 4600}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 170, "offset": 6518}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 170, "offset": 6518}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_03.cs", "start": {"col": 25, "line": 170, "offset": 6419}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 170, "offset": 6513}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_03.cs", "start": {"col": 115, "line": 170, "offset": 6509}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "9fd6064f73217dc334b79c4d352e3a04403c2d66709b7b4d35f99454e1592aacf8e54e8e755e8fcd6a9e0f6ea3895e0dd450653cfce008adccf2d618bebca71a_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 170, "offset": 6432}, "start": {"col": 25, "line": 170, "offset": 6419}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 170, "offset": 6444}, "start": {"col": 39, "line": 170, "offset": 6433}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 170, "offset": 6513}, "start": {"col": 115, "line": 170, "offset": 6509}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_03.cs", "start": {"col": 25, "line": 170, "offset": 6419}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 84, "offset": 3196}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 84, "offset": 3196}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_04.cs", "start": {"col": 25, "line": 84, "offset": 3097}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 84, "offset": 3191}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_04.cs", "start": {"col": 115, "line": 84, "offset": 3187}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "46d00009cdb236024af6180a3c48b08a4d0c295387568b6a6c2148daa9f2c46b296c1c4912972ca9bdc3e4125cf3b9fa662aba5015f8b26d6483b8ee4ca517b8_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 84, "offset": 3110}, "start": {"col": 25, "line": 84, "offset": 3097}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 84, "offset": 3122}, "start": {"col": 39, "line": 84, "offset": 3111}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 84, "offset": 3191}, "start": {"col": 115, "line": 84, "offset": 3187}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_04.cs", "start": {"col": 25, "line": 84, "offset": 3097}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 131, "offset": 5101}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 131, "offset": 5101}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_04.cs", "start": {"col": 25, "line": 131, "offset": 5002}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 131, "offset": 5096}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_04.cs", "start": {"col": 115, "line": 131, "offset": 5092}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "46d00009cdb236024af6180a3c48b08a4d0c295387568b6a6c2148daa9f2c46b296c1c4912972ca9bdc3e4125cf3b9fa662aba5015f8b26d6483b8ee4ca517b8_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 131, "offset": 5015}, "start": {"col": 25, "line": 131, "offset": 5002}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 131, "offset": 5027}, "start": {"col": 39, "line": 131, "offset": 5016}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 131, "offset": 5096}, "start": {"col": 115, "line": 131, "offset": 5092}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_04.cs", "start": {"col": 25, "line": 131, "offset": 5002}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 177, "offset": 6948}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 177, "offset": 6948}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_04.cs", "start": {"col": 25, "line": 177, "offset": 6849}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 177, "offset": 6943}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_04.cs", "start": {"col": 115, "line": 177, "offset": 6939}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "46d00009cdb236024af6180a3c48b08a4d0c295387568b6a6c2148daa9f2c46b296c1c4912972ca9bdc3e4125cf3b9fa662aba5015f8b26d6483b8ee4ca517b8_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 177, "offset": 6862}, "start": {"col": 25, "line": 177, "offset": 6849}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 177, "offset": 6874}, "start": {"col": 39, "line": 177, "offset": 6863}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 177, "offset": 6943}, "start": {"col": 115, "line": 177, "offset": 6939}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_04.cs", "start": {"col": 25, "line": 177, "offset": 6849}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 83, "offset": 3189}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 83, "offset": 3189}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_05.cs", "start": {"col": 25, "line": 83, "offset": 3090}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 83, "offset": 3184}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_05.cs", "start": {"col": 115, "line": 83, "offset": 3180}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "5800c02660f5d65a461a73fa515e32f27ce405917d1e045ce77f5cb60193156751fe88bf1971733826de273a0dddbef020ca43ad1f5855889ea007532e21e1e0_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 83, "offset": 3103}, "start": {"col": 25, "line": 83, "offset": 3090}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 83, "offset": 3115}, "start": {"col": 39, "line": 83, "offset": 3104}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 83, "offset": 3184}, "start": {"col": 115, "line": 83, "offset": 3180}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_05.cs", "start": {"col": 25, "line": 83, "offset": 3090}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 130, "offset": 5066}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 130, "offset": 5066}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_05.cs", "start": {"col": 25, "line": 130, "offset": 4967}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 130, "offset": 5061}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_05.cs", "start": {"col": 115, "line": 130, "offset": 5057}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "5800c02660f5d65a461a73fa515e32f27ce405917d1e045ce77f5cb60193156751fe88bf1971733826de273a0dddbef020ca43ad1f5855889ea007532e21e1e0_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 130, "offset": 4980}, "start": {"col": 25, "line": 130, "offset": 4967}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 130, "offset": 4992}, "start": {"col": 39, "line": 130, "offset": 4981}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 130, "offset": 5061}, "start": {"col": 115, "line": 130, "offset": 5057}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_05.cs", "start": {"col": 25, "line": 130, "offset": 4967}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 176, "offset": 6899}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 176, "offset": 6899}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_05.cs", "start": {"col": 25, "line": 176, "offset": 6800}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 176, "offset": 6894}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_05.cs", "start": {"col": 115, "line": 176, "offset": 6890}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "5800c02660f5d65a461a73fa515e32f27ce405917d1e045ce77f5cb60193156751fe88bf1971733826de273a0dddbef020ca43ad1f5855889ea007532e21e1e0_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 176, "offset": 6813}, "start": {"col": 25, "line": 176, "offset": 6800}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 176, "offset": 6825}, "start": {"col": 39, "line": 176, "offset": 6814}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 176, "offset": 6894}, "start": {"col": 115, "line": 176, "offset": 6890}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_05.cs", "start": {"col": 25, "line": 176, "offset": 6800}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 82, "offset": 3132}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 82, "offset": 3132}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_06.cs", "start": {"col": 25, "line": 82, "offset": 3033}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 82, "offset": 3127}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_06.cs", "start": {"col": 115, "line": 82, "offset": 3123}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "9fffec39ff54272ca269f3ed8e28ddfda2f7fb179aab9094cc2fb4103920857cbb26b54b73ad28b9e3bd2ec0b89126a333e493d4771821df331012cf06eecbdc_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 82, "offset": 3046}, "start": {"col": 25, "line": 82, "offset": 3033}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 82, "offset": 3058}, "start": {"col": 39, "line": 82, "offset": 3047}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 82, "offset": 3127}, "start": {"col": 115, "line": 82, "offset": 3123}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_06.cs", "start": {"col": 25, "line": 82, "offset": 3033}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 129, "offset": 5047}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 129, "offset": 5047}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_06.cs", "start": {"col": 25, "line": 129, "offset": 4948}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 129, "offset": 5042}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_06.cs", "start": {"col": 115, "line": 129, "offset": 5038}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "9fffec39ff54272ca269f3ed8e28ddfda2f7fb179aab9094cc2fb4103920857cbb26b54b73ad28b9e3bd2ec0b89126a333e493d4771821df331012cf06eecbdc_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 129, "offset": 4961}, "start": {"col": 25, "line": 129, "offset": 4948}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 129, "offset": 4973}, "start": {"col": 39, "line": 129, "offset": 4962}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 129, "offset": 5042}, "start": {"col": 115, "line": 129, "offset": 5038}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_06.cs", "start": {"col": 25, "line": 129, "offset": 4948}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 175, "offset": 6900}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 175, "offset": 6900}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_06.cs", "start": {"col": 25, "line": 175, "offset": 6801}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 175, "offset": 6895}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_06.cs", "start": {"col": 115, "line": 175, "offset": 6891}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "9fffec39ff54272ca269f3ed8e28ddfda2f7fb179aab9094cc2fb4103920857cbb26b54b73ad28b9e3bd2ec0b89126a333e493d4771821df331012cf06eecbdc_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 175, "offset": 6814}, "start": {"col": 25, "line": 175, "offset": 6801}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 175, "offset": 6826}, "start": {"col": 39, "line": 175, "offset": 6815}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 175, "offset": 6895}, "start": {"col": 115, "line": 175, "offset": 6891}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_06.cs", "start": {"col": 25, "line": 175, "offset": 6801}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 82, "offset": 3136}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 82, "offset": 3136}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_07.cs", "start": {"col": 25, "line": 82, "offset": 3037}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 82, "offset": 3131}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_07.cs", "start": {"col": 115, "line": 82, "offset": 3127}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "51e6330ca35c536c25d77cf6f17a927f7aff1e4f062aac06ab4170cfeff30960ad9ed2070113b2cdb3d43ca33f08f18c3f4e4a794b8a48fd875266cce93b1170_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 82, "offset": 3050}, "start": {"col": 25, "line": 82, "offset": 3037}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 82, "offset": 3062}, "start": {"col": 39, "line": 82, "offset": 3051}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 82, "offset": 3131}, "start": {"col": 115, "line": 82, "offset": 3127}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_07.cs", "start": {"col": 25, "line": 82, "offset": 3037}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 129, "offset": 5023}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 129, "offset": 5023}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_07.cs", "start": {"col": 25, "line": 129, "offset": 4924}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 129, "offset": 5018}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_07.cs", "start": {"col": 115, "line": 129, "offset": 5014}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "51e6330ca35c536c25d77cf6f17a927f7aff1e4f062aac06ab4170cfeff30960ad9ed2070113b2cdb3d43ca33f08f18c3f4e4a794b8a48fd875266cce93b1170_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 129, "offset": 4937}, "start": {"col": 25, "line": 129, "offset": 4924}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 129, "offset": 4949}, "start": {"col": 39, "line": 129, "offset": 4938}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 129, "offset": 5018}, "start": {"col": 115, "line": 129, "offset": 5014}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_07.cs", "start": {"col": 25, "line": 129, "offset": 4924}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 175, "offset": 6862}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 175, "offset": 6862}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_07.cs", "start": {"col": 25, "line": 175, "offset": 6763}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 175, "offset": 6857}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_07.cs", "start": {"col": 115, "line": 175, "offset": 6853}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "51e6330ca35c536c25d77cf6f17a927f7aff1e4f062aac06ab4170cfeff30960ad9ed2070113b2cdb3d43ca33f08f18c3f4e4a794b8a48fd875266cce93b1170_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 175, "offset": 6776}, "start": {"col": 25, "line": 175, "offset": 6763}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 175, "offset": 6788}, "start": {"col": 39, "line": 175, "offset": 6777}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 175, "offset": 6857}, "start": {"col": 115, "line": 175, "offset": 6853}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_07.cs", "start": {"col": 25, "line": 175, "offset": 6763}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 90, "offset": 3268}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 90, "offset": 3268}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_08.cs", "start": {"col": 25, "line": 90, "offset": 3169}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 90, "offset": 3263}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_08.cs", "start": {"col": 115, "line": 90, "offset": 3259}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "3b012a08cda6061ec26e44edfe3b0b6b63afda8f98538e7becaca4956bef50a681f736ba6ba2304485b19e51da3441bae2b0e3843e927a86448a6200846ac835_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 90, "offset": 3182}, "start": {"col": 25, "line": 90, "offset": 3169}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 90, "offset": 3194}, "start": {"col": 39, "line": 90, "offset": 3183}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 90, "offset": 3263}, "start": {"col": 115, "line": 90, "offset": 3259}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_08.cs", "start": {"col": 25, "line": 90, "offset": 3169}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 137, "offset": 5181}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 137, "offset": 5181}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_08.cs", "start": {"col": 25, "line": 137, "offset": 5082}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 137, "offset": 5176}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_08.cs", "start": {"col": 115, "line": 137, "offset": 5172}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "3b012a08cda6061ec26e44edfe3b0b6b63afda8f98538e7becaca4956bef50a681f736ba6ba2304485b19e51da3441bae2b0e3843e927a86448a6200846ac835_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 137, "offset": 5095}, "start": {"col": 25, "line": 137, "offset": 5082}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 137, "offset": 5107}, "start": {"col": 39, "line": 137, "offset": 5096}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 137, "offset": 5176}, "start": {"col": 115, "line": 137, "offset": 5172}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_08.cs", "start": {"col": 25, "line": 137, "offset": 5082}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 183, "offset": 7032}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 183, "offset": 7032}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_08.cs", "start": {"col": 25, "line": 183, "offset": 6933}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 183, "offset": 7027}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_08.cs", "start": {"col": 115, "line": 183, "offset": 7023}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "3b012a08cda6061ec26e44edfe3b0b6b63afda8f98538e7becaca4956bef50a681f736ba6ba2304485b19e51da3441bae2b0e3843e927a86448a6200846ac835_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 183, "offset": 6946}, "start": {"col": 25, "line": 183, "offset": 6933}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 183, "offset": 6958}, "start": {"col": 39, "line": 183, "offset": 6947}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 183, "offset": 7027}, "start": {"col": 115, "line": 183, "offset": 7023}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_08.cs", "start": {"col": 25, "line": 183, "offset": 6933}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 77, "offset": 2929}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 77, "offset": 2929}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_09.cs", "start": {"col": 25, "line": 77, "offset": 2830}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 77, "offset": 2924}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_09.cs", "start": {"col": 115, "line": 77, "offset": 2920}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "ce2aa41f6846e842f8d924a5415579077022a5026f3337ab05369454e2e1d67d301ae7061ddf493a1bd03dc85407b58179f3b84eb83a0e15092de74536e9407c_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 77, "offset": 2843}, "start": {"col": 25, "line": 77, "offset": 2830}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 77, "offset": 2855}, "start": {"col": 39, "line": 77, "offset": 2844}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 77, "offset": 2924}, "start": {"col": 115, "line": 77, "offset": 2920}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_09.cs", "start": {"col": 25, "line": 77, "offset": 2830}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 124, "offset": 4854}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 124, "offset": 4854}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_09.cs", "start": {"col": 25, "line": 124, "offset": 4755}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 124, "offset": 4849}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_09.cs", "start": {"col": 115, "line": 124, "offset": 4845}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "ce2aa41f6846e842f8d924a5415579077022a5026f3337ab05369454e2e1d67d301ae7061ddf493a1bd03dc85407b58179f3b84eb83a0e15092de74536e9407c_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 124, "offset": 4768}, "start": {"col": 25, "line": 124, "offset": 4755}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 124, "offset": 4780}, "start": {"col": 39, "line": 124, "offset": 4769}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 124, "offset": 4849}, "start": {"col": 115, "line": 124, "offset": 4845}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_09.cs", "start": {"col": 25, "line": 124, "offset": 4755}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 170, "offset": 6711}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 170, "offset": 6711}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_09.cs", "start": {"col": 25, "line": 170, "offset": 6612}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 170, "offset": 6706}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_09.cs", "start": {"col": 115, "line": 170, "offset": 6702}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "ce2aa41f6846e842f8d924a5415579077022a5026f3337ab05369454e2e1d67d301ae7061ddf493a1bd03dc85407b58179f3b84eb83a0e15092de74536e9407c_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 170, "offset": 6625}, "start": {"col": 25, "line": 170, "offset": 6612}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 170, "offset": 6637}, "start": {"col": 39, "line": 170, "offset": 6626}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 170, "offset": 6706}, "start": {"col": 115, "line": 170, "offset": 6702}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_09.cs", "start": {"col": 25, "line": 170, "offset": 6612}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 77, "offset": 2889}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 77, "offset": 2889}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_10.cs", "start": {"col": 25, "line": 77, "offset": 2790}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 77, "offset": 2884}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_10.cs", "start": {"col": 115, "line": 77, "offset": 2880}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "0738c4b4e3ba6915d91009735d8d1d934aac3f2f30598f65140384509a75920eda5a91dcd009fe5f71ae239153b05bb530e6e2052b70d57001ef4e8340b40b89_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 77, "offset": 2803}, "start": {"col": 25, "line": 77, "offset": 2790}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 77, "offset": 2815}, "start": {"col": 39, "line": 77, "offset": 2804}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 77, "offset": 2884}, "start": {"col": 115, "line": 77, "offset": 2880}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_10.cs", "start": {"col": 25, "line": 77, "offset": 2790}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 124, "offset": 4774}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 124, "offset": 4774}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_10.cs", "start": {"col": 25, "line": 124, "offset": 4675}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 124, "offset": 4769}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_10.cs", "start": {"col": 115, "line": 124, "offset": 4765}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "0738c4b4e3ba6915d91009735d8d1d934aac3f2f30598f65140384509a75920eda5a91dcd009fe5f71ae239153b05bb530e6e2052b70d57001ef4e8340b40b89_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 124, "offset": 4688}, "start": {"col": 25, "line": 124, "offset": 4675}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 124, "offset": 4700}, "start": {"col": 39, "line": 124, "offset": 4689}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 124, "offset": 4769}, "start": {"col": 115, "line": 124, "offset": 4765}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_10.cs", "start": {"col": 25, "line": 124, "offset": 4675}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 170, "offset": 6611}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 170, "offset": 6611}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_10.cs", "start": {"col": 25, "line": 170, "offset": 6512}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 170, "offset": 6606}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_10.cs", "start": {"col": 115, "line": 170, "offset": 6602}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "0738c4b4e3ba6915d91009735d8d1d934aac3f2f30598f65140384509a75920eda5a91dcd009fe5f71ae239153b05bb530e6e2052b70d57001ef4e8340b40b89_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 170, "offset": 6525}, "start": {"col": 25, "line": 170, "offset": 6512}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 170, "offset": 6537}, "start": {"col": 39, "line": 170, "offset": 6526}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 170, "offset": 6606}, "start": {"col": 115, "line": 170, "offset": 6602}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_10.cs", "start": {"col": 25, "line": 170, "offset": 6512}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 77, "offset": 2924}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 77, "offset": 2924}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_11.cs", "start": {"col": 25, "line": 77, "offset": 2825}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 77, "offset": 2919}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_11.cs", "start": {"col": 115, "line": 77, "offset": 2915}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "db9941f8889c3f160909f2ae87acae939f8e4241ae682b0e796ee85d3e82b00324d52a5b0fb122175738124fdcc57cca97f8d72052a4a7bd2608c1d3ab3fda85_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 77, "offset": 2838}, "start": {"col": 25, "line": 77, "offset": 2825}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 77, "offset": 2850}, "start": {"col": 39, "line": 77, "offset": 2839}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 77, "offset": 2919}, "start": {"col": 115, "line": 77, "offset": 2915}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_11.cs", "start": {"col": 25, "line": 77, "offset": 2825}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 124, "offset": 4845}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 124, "offset": 4845}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_11.cs", "start": {"col": 25, "line": 124, "offset": 4746}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 124, "offset": 4840}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_11.cs", "start": {"col": 115, "line": 124, "offset": 4836}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "db9941f8889c3f160909f2ae87acae939f8e4241ae682b0e796ee85d3e82b00324d52a5b0fb122175738124fdcc57cca97f8d72052a4a7bd2608c1d3ab3fda85_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 124, "offset": 4759}, "start": {"col": 25, "line": 124, "offset": 4746}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 124, "offset": 4771}, "start": {"col": 39, "line": 124, "offset": 4760}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 124, "offset": 4840}, "start": {"col": 115, "line": 124, "offset": 4836}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_11.cs", "start": {"col": 25, "line": 124, "offset": 4746}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 170, "offset": 6700}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 170, "offset": 6700}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_11.cs", "start": {"col": 25, "line": 170, "offset": 6601}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 170, "offset": 6695}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_11.cs", "start": {"col": 115, "line": 170, "offset": 6691}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "db9941f8889c3f160909f2ae87acae939f8e4241ae682b0e796ee85d3e82b00324d52a5b0fb122175738124fdcc57cca97f8d72052a4a7bd2608c1d3ab3fda85_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 170, "offset": 6614}, "start": {"col": 25, "line": 170, "offset": 6601}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 170, "offset": 6626}, "start": {"col": 39, "line": 170, "offset": 6615}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 170, "offset": 6695}, "start": {"col": 115, "line": 170, "offset": 6691}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_11.cs", "start": {"col": 25, "line": 170, "offset": 6601}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 76, "offset": 2790}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 76, "offset": 2790}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_12.cs", "start": {"col": 25, "line": 76, "offset": 2691}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 76, "offset": 2785}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_12.cs", "start": {"col": 115, "line": 76, "offset": 2781}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "924db49a29c9cd9feee5a05640f8efaa8bcf7d22eb9c6f5127e584e92b5eca0fa1b2dfe390b2bbf563463313f03dfe6b6c82368d2c60654c32d62e89ef87894b_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 76, "offset": 2704}, "start": {"col": 25, "line": 76, "offset": 2691}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 76, "offset": 2716}, "start": {"col": 39, "line": 76, "offset": 2705}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 76, "offset": 2785}, "start": {"col": 115, "line": 76, "offset": 2781}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_12.cs", "start": {"col": 25, "line": 76, "offset": 2691}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 77, "offset": 2940}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 77, "offset": 2940}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_13.cs", "start": {"col": 25, "line": 77, "offset": 2841}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 77, "offset": 2935}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_13.cs", "start": {"col": 115, "line": 77, "offset": 2931}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "3c5ff982b5f13ca5d7d78221e4d52dc917c261622825b0ee212dfd8f29549d78dcb4c7710d11176faf27317a5260d311b07f35518a9e9937b5f3aacdd9942d85_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 77, "offset": 2854}, "start": {"col": 25, "line": 77, "offset": 2841}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 77, "offset": 2866}, "start": {"col": 39, "line": 77, "offset": 2855}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 77, "offset": 2935}, "start": {"col": 115, "line": 77, "offset": 2931}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_13.cs", "start": {"col": 25, "line": 77, "offset": 2841}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 124, "offset": 4875}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 124, "offset": 4875}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_13.cs", "start": {"col": 25, "line": 124, "offset": 4776}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 124, "offset": 4870}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_13.cs", "start": {"col": 115, "line": 124, "offset": 4866}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "3c5ff982b5f13ca5d7d78221e4d52dc917c261622825b0ee212dfd8f29549d78dcb4c7710d11176faf27317a5260d311b07f35518a9e9937b5f3aacdd9942d85_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 124, "offset": 4789}, "start": {"col": 25, "line": 124, "offset": 4776}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 124, "offset": 4801}, "start": {"col": 39, "line": 124, "offset": 4790}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 124, "offset": 4870}, "start": {"col": 115, "line": 124, "offset": 4866}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_13.cs", "start": {"col": 25, "line": 124, "offset": 4776}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 170, "offset": 6738}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 170, "offset": 6738}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_13.cs", "start": {"col": 25, "line": 170, "offset": 6639}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 170, "offset": 6733}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_13.cs", "start": {"col": 115, "line": 170, "offset": 6729}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "3c5ff982b5f13ca5d7d78221e4d52dc917c261622825b0ee212dfd8f29549d78dcb4c7710d11176faf27317a5260d311b07f35518a9e9937b5f3aacdd9942d85_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 170, "offset": 6652}, "start": {"col": 25, "line": 170, "offset": 6639}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 170, "offset": 6664}, "start": {"col": 39, "line": 170, "offset": 6653}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 170, "offset": 6733}, "start": {"col": 115, "line": 170, "offset": 6729}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_13.cs", "start": {"col": 25, "line": 170, "offset": 6639}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 77, "offset": 2900}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 77, "offset": 2900}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_14.cs", "start": {"col": 25, "line": 77, "offset": 2801}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 77, "offset": 2895}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_14.cs", "start": {"col": 115, "line": 77, "offset": 2891}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "1f0879d63bf8115e8740ea62032722b0884aea62dfffb5dd9b1c7ced405b06eb1993e6d85747e7d95fc41bedec6d6ee833bd7675a8eda05906f6c6bd172edd6d_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 77, "offset": 2814}, "start": {"col": 25, "line": 77, "offset": 2801}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 77, "offset": 2826}, "start": {"col": 39, "line": 77, "offset": 2815}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 77, "offset": 2895}, "start": {"col": 115, "line": 77, "offset": 2891}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_14.cs", "start": {"col": 25, "line": 77, "offset": 2801}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 124, "offset": 4795}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 124, "offset": 4795}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_14.cs", "start": {"col": 25, "line": 124, "offset": 4696}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 124, "offset": 4790}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_14.cs", "start": {"col": 115, "line": 124, "offset": 4786}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "1f0879d63bf8115e8740ea62032722b0884aea62dfffb5dd9b1c7ced405b06eb1993e6d85747e7d95fc41bedec6d6ee833bd7675a8eda05906f6c6bd172edd6d_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 124, "offset": 4709}, "start": {"col": 25, "line": 124, "offset": 4696}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 124, "offset": 4721}, "start": {"col": 39, "line": 124, "offset": 4710}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 124, "offset": 4790}, "start": {"col": 115, "line": 124, "offset": 4786}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_14.cs", "start": {"col": 25, "line": 124, "offset": 4696}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 170, "offset": 6638}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 170, "offset": 6638}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_14.cs", "start": {"col": 25, "line": 170, "offset": 6539}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 170, "offset": 6633}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_14.cs", "start": {"col": 115, "line": 170, "offset": 6629}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "1f0879d63bf8115e8740ea62032722b0884aea62dfffb5dd9b1c7ced405b06eb1993e6d85747e7d95fc41bedec6d6ee833bd7675a8eda05906f6c6bd172edd6d_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 170, "offset": 6552}, "start": {"col": 25, "line": 170, "offset": 6539}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 170, "offset": 6564}, "start": {"col": 39, "line": 170, "offset": 6553}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 170, "offset": 6633}, "start": {"col": 115, "line": 170, "offset": 6629}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_14.cs", "start": {"col": 25, "line": 170, "offset": 6539}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 79, "offset": 2912}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 79, "offset": 2912}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_15.cs", "start": {"col": 25, "line": 79, "offset": 2813}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 79, "offset": 2907}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_15.cs", "start": {"col": 115, "line": 79, "offset": 2903}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "caa77182960fbc183aeac9aa0ba960e1ae7646405a2db9ef1585db0cc8b7faf619890a18f71a111a62a80075eefc039c607837c52ce5074505228fe7b66078a8_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 79, "offset": 2826}, "start": {"col": 25, "line": 79, "offset": 2813}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 79, "offset": 2838}, "start": {"col": 39, "line": 79, "offset": 2827}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 79, "offset": 2907}, "start": {"col": 115, "line": 79, "offset": 2903}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_15.cs", "start": {"col": 25, "line": 79, "offset": 2813}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 133, "offset": 5017}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 133, "offset": 5017}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_15.cs", "start": {"col": 25, "line": 133, "offset": 4918}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 133, "offset": 5012}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_15.cs", "start": {"col": 115, "line": 133, "offset": 5008}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "caa77182960fbc183aeac9aa0ba960e1ae7646405a2db9ef1585db0cc8b7faf619890a18f71a111a62a80075eefc039c607837c52ce5074505228fe7b66078a8_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 133, "offset": 4931}, "start": {"col": 25, "line": 133, "offset": 4918}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 133, "offset": 4943}, "start": {"col": 39, "line": 133, "offset": 4932}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 133, "offset": 5012}, "start": {"col": 115, "line": 133, "offset": 5008}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_15.cs", "start": {"col": 25, "line": 133, "offset": 4918}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 186, "offset": 7092}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 186, "offset": 7092}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_15.cs", "start": {"col": 25, "line": 186, "offset": 6993}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 186, "offset": 7087}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_15.cs", "start": {"col": 115, "line": 186, "offset": 7083}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "caa77182960fbc183aeac9aa0ba960e1ae7646405a2db9ef1585db0cc8b7faf619890a18f71a111a62a80075eefc039c607837c52ce5074505228fe7b66078a8_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 186, "offset": 7006}, "start": {"col": 25, "line": 186, "offset": 6993}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 186, "offset": 7018}, "start": {"col": 39, "line": 186, "offset": 7007}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 186, "offset": 7087}, "start": {"col": 115, "line": 186, "offset": 7083}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_15.cs", "start": {"col": 25, "line": 186, "offset": 6993}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 72, "offset": 2636}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 72, "offset": 2636}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_16.cs", "start": {"col": 25, "line": 72, "offset": 2537}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 72, "offset": 2631}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_16.cs", "start": {"col": 115, "line": 72, "offset": 2627}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "ed58b8647a4628f947252796a243674f8236129ede66eb30d284c905e3e692c6bb925ce82b67116796343ec6281a0a620de9d7a682636563c15713e057b22370_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 72, "offset": 2550}, "start": {"col": 25, "line": 72, "offset": 2537}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 72, "offset": 2562}, "start": {"col": 39, "line": 72, "offset": 2551}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 72, "offset": 2631}, "start": {"col": 115, "line": 72, "offset": 2627}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_16.cs", "start": {"col": 25, "line": 72, "offset": 2537}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 115, "offset": 4264}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 115, "offset": 4264}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_16.cs", "start": {"col": 25, "line": 115, "offset": 4165}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 115, "offset": 4259}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_16.cs", "start": {"col": 115, "line": 115, "offset": 4255}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "ed58b8647a4628f947252796a243674f8236129ede66eb30d284c905e3e692c6bb925ce82b67116796343ec6281a0a620de9d7a682636563c15713e057b22370_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 115, "offset": 4178}, "start": {"col": 25, "line": 115, "offset": 4165}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 115, "offset": 4190}, "start": {"col": 39, "line": 115, "offset": 4179}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 115, "offset": 4259}, "start": {"col": 115, "line": 115, "offset": 4255}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_16.cs", "start": {"col": 25, "line": 115, "offset": 4165}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 72, "offset": 2687}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 72, "offset": 2687}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_17.cs", "start": {"col": 25, "line": 72, "offset": 2588}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 72, "offset": 2682}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_17.cs", "start": {"col": 115, "line": 72, "offset": 2678}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "1c8c960b6710f5d27aad4f5b35b66e500a53e90fb5ca8da2fac32cc6bda5761d93a0599cefd11420c18d605ccd93c2594555429e92da1c28e3e4b9240af677bd_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 72, "offset": 2601}, "start": {"col": 25, "line": 72, "offset": 2588}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 72, "offset": 2613}, "start": {"col": 39, "line": 72, "offset": 2602}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 72, "offset": 2682}, "start": {"col": 115, "line": 72, "offset": 2678}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_17.cs", "start": {"col": 25, "line": 72, "offset": 2588}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 110, "offset": 4238}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 110, "offset": 4238}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_17.cs", "start": {"col": 25, "line": 110, "offset": 4139}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 110, "offset": 4233}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_17.cs", "start": {"col": 115, "line": 110, "offset": 4229}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "1c8c960b6710f5d27aad4f5b35b66e500a53e90fb5ca8da2fac32cc6bda5761d93a0599cefd11420c18d605ccd93c2594555429e92da1c28e3e4b9240af677bd_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 110, "offset": 4152}, "start": {"col": 25, "line": 110, "offset": 4139}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 110, "offset": 4164}, "start": {"col": 39, "line": 110, "offset": 4153}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 110, "offset": 4233}, "start": {"col": 115, "line": 110, "offset": 4229}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_17.cs", "start": {"col": 25, "line": 110, "offset": 4139}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 77, "offset": 2851}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 77, "offset": 2851}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_21.cs", "start": {"col": 25, "line": 77, "offset": 2752}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 77, "offset": 2846}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_21.cs", "start": {"col": 115, "line": 77, "offset": 2842}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "87744116f96fbdf15d6f38f9685c6f9cdced42e666411e3ff1617b8f132405a3ecc64b22bee1d4a315743d79a3c6b83e1422f346ee778b5c70066c98ab84b2c0_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 77, "offset": 2765}, "start": {"col": 25, "line": 77, "offset": 2752}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 77, "offset": 2777}, "start": {"col": 39, "line": 77, "offset": 2766}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 77, "offset": 2846}, "start": {"col": 115, "line": 77, "offset": 2842}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_21.cs", "start": {"col": 25, "line": 77, "offset": 2752}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 269, "offset": 10547}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 269, "offset": 10547}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_21.cs", "start": {"col": 25, "line": 269, "offset": 10448}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 269, "offset": 10542}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_21.cs", "start": {"col": 115, "line": 269, "offset": 10538}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "87744116f96fbdf15d6f38f9685c6f9cdced42e666411e3ff1617b8f132405a3ecc64b22bee1d4a315743d79a3c6b83e1422f346ee778b5c70066c98ab84b2c0_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 269, "offset": 10461}, "start": {"col": 25, "line": 269, "offset": 10448}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 269, "offset": 10473}, "start": {"col": 39, "line": 269, "offset": 10462}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 269, "offset": 10542}, "start": {"col": 115, "line": 269, "offset": 10538}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_21.cs", "start": {"col": 25, "line": 269, "offset": 10448}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 43, "offset": 1745}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 43, "offset": 1745}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_22b.cs", "start": {"col": 25, "line": 43, "offset": 1646}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 43, "offset": 1740}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_22b.cs", "start": {"col": 115, "line": 43, "offset": 1736}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "c6830ed5ee996de1c27db06b991d001b4c2e88bf6fbfcb9b72a06919ea07ee8e8c033690228298f7ea424f563e14fea58ecf1a18886c158a17af865bc6c4d050_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 43, "offset": 1659}, "start": {"col": 25, "line": 43, "offset": 1646}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 43, "offset": 1671}, "start": {"col": 39, "line": 43, "offset": 1660}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 43, "offset": 1740}, "start": {"col": 115, "line": 43, "offset": 1736}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_22b.cs", "start": {"col": 25, "line": 43, "offset": 1646}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 173, "offset": 7519}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 173, "offset": 7519}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_22b.cs", "start": {"col": 25, "line": 173, "offset": 7420}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 173, "offset": 7514}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_22b.cs", "start": {"col": 115, "line": 173, "offset": 7510}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "c6830ed5ee996de1c27db06b991d001b4c2e88bf6fbfcb9b72a06919ea07ee8e8c033690228298f7ea424f563e14fea58ecf1a18886c158a17af865bc6c4d050_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 173, "offset": 7433}, "start": {"col": 25, "line": 173, "offset": 7420}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 173, "offset": 7445}, "start": {"col": 39, "line": 173, "offset": 7434}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 173, "offset": 7514}, "start": {"col": 115, "line": 173, "offset": 7510}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_22b.cs", "start": {"col": 25, "line": 173, "offset": 7420}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 72, "offset": 2707}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "dataCopy", "location": {"end": {"col": 21, "line": 59, "offset": 2053}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_31.cs", "start": {"col": 13, "line": 59, "offset": 2045}}}, {"content": "data", "location": {"end": {"col": 24, "line": 62, "offset": 2108}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_31.cs", "start": {"col": 20, "line": 62, "offset": 2104}}}], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 72, "offset": 2707}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_31.cs", "start": {"col": 25, "line": 72, "offset": 2608}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 28, "line": 59, "offset": 2060}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_31.cs", "start": {"col": 24, "line": 59, "offset": 2056}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "8ac54fca5c485c78c124b372c56926989bc9af99081e16e8683a0c2db7c9d298ffcf06daf62c38df11dcaf21e38d6391aee79e2480f00342daa9db5afac417bd_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 72, "offset": 2621}, "start": {"col": 25, "line": 72, "offset": 2608}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 72, "offset": 2633}, "start": {"col": 39, "line": 72, "offset": 2622}}, "$X": {"abstract_content": "data", "end": {"col": 28, "line": 59, "offset": 2060}, "start": {"col": 24, "line": 59, "offset": 2056}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_31.cs", "start": {"col": 25, "line": 72, "offset": 2608}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 44, "offset": 1637}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 44, "offset": 1637}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_41.cs", "start": {"col": 21, "line": 44, "offset": 1538}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 44, "offset": 1632}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_41.cs", "start": {"col": 111, "line": 44, "offset": 1628}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "6b3c924d6deedeaba8ae8cb9ca97689cef385c93b5e005531e92b8f2adbaa0a1e47f2961dcb5c1e895ca3bb235e1a72059e99092c311b1574aa1e03d037ae39f_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 44, "offset": 1551}, "start": {"col": 21, "line": 44, "offset": 1538}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 44, "offset": 1563}, "start": {"col": 35, "line": 44, "offset": 1552}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 44, "offset": 1632}, "start": {"col": 111, "line": 44, "offset": 1628}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_41.cs", "start": {"col": 21, "line": 44, "offset": 1538}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 108, "offset": 4034}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 108, "offset": 4034}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_41.cs", "start": {"col": 21, "line": 108, "offset": 3935}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 108, "offset": 4029}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_41.cs", "start": {"col": 111, "line": 108, "offset": 4025}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "6b3c924d6deedeaba8ae8cb9ca97689cef385c93b5e005531e92b8f2adbaa0a1e47f2961dcb5c1e895ca3bb235e1a72059e99092c311b1574aa1e03d037ae39f_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 108, "offset": 3948}, "start": {"col": 21, "line": 108, "offset": 3935}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 108, "offset": 3960}, "start": {"col": 35, "line": 108, "offset": 3949}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 108, "offset": 4029}, "start": {"col": 111, "line": 108, "offset": 4025}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_41.cs", "start": {"col": 21, "line": 108, "offset": 3935}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 72, "offset": 2625}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 72, "offset": 2625}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_42.cs", "start": {"col": 21, "line": 72, "offset": 2526}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 72, "offset": 2620}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_42.cs", "start": {"col": 111, "line": 72, "offset": 2616}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "629a02d4da8bc068bfd1361e78ad58f1e4ce28acadc0b4e2622e444c14c70838288b4ea3498f5b99844f419db7b727e44ff05d4c8a55159952d563fa17ced964_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 72, "offset": 2539}, "start": {"col": 21, "line": 72, "offset": 2526}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 72, "offset": 2551}, "start": {"col": 35, "line": 72, "offset": 2540}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 72, "offset": 2620}, "propagated_value": {"svalue_abstract_content": "BadSource(req resp)", "svalue_end": {"col": 43, "line": 62, "offset": 2077}, "svalue_start": {"col": 23, "line": 62, "offset": 2057}}, "start": {"col": 111, "line": 72, "offset": 2616}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_42.cs", "start": {"col": 21, "line": 72, "offset": 2526}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 113, "offset": 4184}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 113, "offset": 4184}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_42.cs", "start": {"col": 21, "line": 113, "offset": 4085}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 113, "offset": 4179}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_42.cs", "start": {"col": 111, "line": 113, "offset": 4175}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "629a02d4da8bc068bfd1361e78ad58f1e4ce28acadc0b4e2622e444c14c70838288b4ea3498f5b99844f419db7b727e44ff05d4c8a55159952d563fa17ced964_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 113, "offset": 4098}, "start": {"col": 21, "line": 113, "offset": 4085}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 113, "offset": 4110}, "start": {"col": 35, "line": 113, "offset": 4099}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 113, "offset": 4179}, "propagated_value": {"svalue_abstract_content": "GoodG2BSource(req resp)", "svalue_end": {"col": 47, "line": 103, "offset": 3636}, "svalue_start": {"col": 23, "line": 103, "offset": 3612}}, "start": {"col": 111, "line": 113, "offset": 4175}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_42.cs", "start": {"col": 21, "line": 113, "offset": 4085}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 49, "offset": 1767}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "data", "location": {"end": {"col": 20, "line": 39, "offset": 1209}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_45.cs", "start": {"col": 16, "line": 39, "offset": 1205}}}], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 49, "offset": 1767}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_45.cs", "start": {"col": 21, "line": 49, "offset": 1668}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 30, "line": 39, "offset": 1219}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_45.cs", "start": {"col": 23, "line": 39, "offset": 1212}}, "dataBad"]]}, "engine_kind": "OSS", "fingerprint": "811b0cf45b6f479176cab4fb5b8e6000965ab480248541152ceff6d8628fbbab760915d784a113cc3247143fe0dd92e62c1a3353fdf92f90c749227955f6104c_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 49, "offset": 1681}, "start": {"col": 21, "line": 49, "offset": 1668}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 49, "offset": 1693}, "start": {"col": 35, "line": 49, "offset": 1682}}, "$X": {"abstract_content": "dataBad", "end": {"col": 30, "line": 39, "offset": 1219}, "start": {"col": 23, "line": 39, "offset": 1212}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_45.cs", "start": {"col": 21, "line": 49, "offset": 1668}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 115, "offset": 4196}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "data", "location": {"end": {"col": 20, "line": 105, "offset": 3634}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_45.cs", "start": {"col": 16, "line": 105, "offset": 3630}}}], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 115, "offset": 4196}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_45.cs", "start": {"col": 21, "line": 115, "offset": 4097}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 34, "line": 105, "offset": 3648}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_45.cs", "start": {"col": 23, "line": 105, "offset": 3637}}, "dataGoodG2B"]]}, "engine_kind": "OSS", "fingerprint": "46b482768e63d0a1f7259120242d51c75c658eaadcdee2932c30b2cf84b1164520d861a7abf8aad216798a55536374a1f4370c0282a49fa9fe6d143a7260b7cc_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 115, "offset": 4110}, "start": {"col": 21, "line": 115, "offset": 4097}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 115, "offset": 4122}, "start": {"col": 35, "line": 115, "offset": 4111}}, "$X": {"abstract_content": "dataGoodG2B", "end": {"col": 34, "line": 105, "offset": 3648}, "start": {"col": 23, "line": 105, "offset": 3637}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_45.cs", "start": {"col": 21, "line": 115, "offset": 4097}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 41, "offset": 1595}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 41, "offset": 1595}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_51b.cs", "start": {"col": 21, "line": 41, "offset": 1496}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 41, "offset": 1590}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_51b.cs", "start": {"col": 111, "line": 41, "offset": 1586}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "ae96a5eec9663940dcb29e323a4ef998a2453fbf60da4e000535f3ca2206bbde1917920021be5347c111d64be732e18fa9ab7c3531b4480920503f0f6b3740e5_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 41, "offset": 1509}, "start": {"col": 21, "line": 41, "offset": 1496}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 41, "offset": 1521}, "start": {"col": 35, "line": 41, "offset": 1510}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 41, "offset": 1590}, "start": {"col": 111, "line": 41, "offset": 1586}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_51b.cs", "start": {"col": 21, "line": 41, "offset": 1496}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 74, "offset": 2911}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 74, "offset": 2911}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_51b.cs", "start": {"col": 21, "line": 74, "offset": 2812}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 74, "offset": 2906}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_51b.cs", "start": {"col": 111, "line": 74, "offset": 2902}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "ae96a5eec9663940dcb29e323a4ef998a2453fbf60da4e000535f3ca2206bbde1917920021be5347c111d64be732e18fa9ab7c3531b4480920503f0f6b3740e5_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 74, "offset": 2825}, "start": {"col": 21, "line": 74, "offset": 2812}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 74, "offset": 2837}, "start": {"col": 35, "line": 74, "offset": 2826}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 74, "offset": 2906}, "start": {"col": 111, "line": 74, "offset": 2902}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_51b.cs", "start": {"col": 21, "line": 74, "offset": 2812}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 41, "offset": 1610}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 41, "offset": 1610}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_52c.cs", "start": {"col": 21, "line": 41, "offset": 1511}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 41, "offset": 1605}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_52c.cs", "start": {"col": 111, "line": 41, "offset": 1601}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "cb1cf0f1d1d6b6825be60c9af6baa10070f4c2e1ad326c1e0fd778413440e21d944abdabf972fff33de34cce8210b04c4896a711f744adb92a5fdaaee8796cb7_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 41, "offset": 1524}, "start": {"col": 21, "line": 41, "offset": 1511}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 41, "offset": 1536}, "start": {"col": 35, "line": 41, "offset": 1525}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 41, "offset": 1605}, "start": {"col": 111, "line": 41, "offset": 1601}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_52c.cs", "start": {"col": 21, "line": 41, "offset": 1511}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 74, "offset": 2926}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 74, "offset": 2926}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_52c.cs", "start": {"col": 21, "line": 74, "offset": 2827}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 74, "offset": 2921}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_52c.cs", "start": {"col": 111, "line": 74, "offset": 2917}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "cb1cf0f1d1d6b6825be60c9af6baa10070f4c2e1ad326c1e0fd778413440e21d944abdabf972fff33de34cce8210b04c4896a711f744adb92a5fdaaee8796cb7_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 74, "offset": 2840}, "start": {"col": 21, "line": 74, "offset": 2827}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 74, "offset": 2852}, "start": {"col": 35, "line": 74, "offset": 2841}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 74, "offset": 2921}, "start": {"col": 111, "line": 74, "offset": 2917}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_52c.cs", "start": {"col": 21, "line": 74, "offset": 2827}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 41, "offset": 1637}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 41, "offset": 1637}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_53d.cs", "start": {"col": 21, "line": 41, "offset": 1538}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 41, "offset": 1632}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_53d.cs", "start": {"col": 111, "line": 41, "offset": 1628}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "1ae0d4a69284acbc2c1144e4b0d09b54a2b03d1ac23e8b3f163681ae0eb6bec28223f63f0edf7f9226e44e74b3f130f74be9a11c4a672a58dcea4fcd4619159a_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 41, "offset": 1551}, "start": {"col": 21, "line": 41, "offset": 1538}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 41, "offset": 1563}, "start": {"col": 35, "line": 41, "offset": 1552}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 41, "offset": 1632}, "start": {"col": 111, "line": 41, "offset": 1628}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_53d.cs", "start": {"col": 21, "line": 41, "offset": 1538}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 74, "offset": 2953}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 74, "offset": 2953}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_53d.cs", "start": {"col": 21, "line": 74, "offset": 2854}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 74, "offset": 2948}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_53d.cs", "start": {"col": 111, "line": 74, "offset": 2944}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "1ae0d4a69284acbc2c1144e4b0d09b54a2b03d1ac23e8b3f163681ae0eb6bec28223f63f0edf7f9226e44e74b3f130f74be9a11c4a672a58dcea4fcd4619159a_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 74, "offset": 2867}, "start": {"col": 21, "line": 74, "offset": 2854}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 74, "offset": 2879}, "start": {"col": 35, "line": 74, "offset": 2868}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 74, "offset": 2948}, "start": {"col": 111, "line": 74, "offset": 2944}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_53d.cs", "start": {"col": 21, "line": 74, "offset": 2854}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 41, "offset": 1638}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 41, "offset": 1638}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_54e.cs", "start": {"col": 21, "line": 41, "offset": 1539}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 41, "offset": 1633}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_54e.cs", "start": {"col": 111, "line": 41, "offset": 1629}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "bd9fd2ca9cd1185d041b101de17b341b298f57d1530780141d7d814e41e7b7388cac74e1629004a171cc3d225e50e21b2fb60ff3cc6ddf07a122ea59e2b31352_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 41, "offset": 1552}, "start": {"col": 21, "line": 41, "offset": 1539}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 41, "offset": 1564}, "start": {"col": 35, "line": 41, "offset": 1553}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 41, "offset": 1633}, "start": {"col": 111, "line": 41, "offset": 1629}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_54e.cs", "start": {"col": 21, "line": 41, "offset": 1539}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 74, "offset": 2954}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 74, "offset": 2954}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_54e.cs", "start": {"col": 21, "line": 74, "offset": 2855}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 74, "offset": 2949}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_54e.cs", "start": {"col": 111, "line": 74, "offset": 2945}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "bd9fd2ca9cd1185d041b101de17b341b298f57d1530780141d7d814e41e7b7388cac74e1629004a171cc3d225e50e21b2fb60ff3cc6ddf07a122ea59e2b31352_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 74, "offset": 2868}, "start": {"col": 21, "line": 74, "offset": 2855}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 74, "offset": 2880}, "start": {"col": 35, "line": 74, "offset": 2869}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 74, "offset": 2949}, "start": {"col": 111, "line": 74, "offset": 2945}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_54e.cs", "start": {"col": 21, "line": 74, "offset": 2855}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 42, "offset": 1688}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 42, "offset": 1688}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_61a.cs", "start": {"col": 21, "line": 42, "offset": 1589}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 42, "offset": 1683}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_61a.cs", "start": {"col": 111, "line": 42, "offset": 1679}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "852dc8de5355b0d52520b5a17902cb0680aa89110995a19ba2c7345e60268dbab02445001b67c028bd1d3b1b4db68f9604993cbbe58b31053211e2e5c0d13092_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 42, "offset": 1602}, "start": {"col": 21, "line": 42, "offset": 1589}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 42, "offset": 1614}, "start": {"col": 35, "line": 42, "offset": 1603}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 42, "offset": 1683}, "propagated_value": {"svalue_abstract_content": "CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_61b.BadSource(req resp)", "svalue_end": {"col": 100, "line": 32, "offset": 1140}, "svalue_start": {"col": 23, "line": 32, "offset": 1063}}, "start": {"col": 111, "line": 42, "offset": 1679}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_61a.cs", "start": {"col": 21, "line": 42, "offset": 1589}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 81, "offset": 3242}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 81, "offset": 3242}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_61a.cs", "start": {"col": 21, "line": 81, "offset": 3143}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 81, "offset": 3237}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_61a.cs", "start": {"col": 111, "line": 81, "offset": 3233}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "852dc8de5355b0d52520b5a17902cb0680aa89110995a19ba2c7345e60268dbab02445001b67c028bd1d3b1b4db68f9604993cbbe58b31053211e2e5c0d13092_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 81, "offset": 3156}, "start": {"col": 21, "line": 81, "offset": 3143}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 81, "offset": 3168}, "start": {"col": 35, "line": 81, "offset": 3157}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 81, "offset": 3237}, "propagated_value": {"svalue_abstract_content": "CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_61b.GoodG2BSource(req resp)", "svalue_end": {"col": 104, "line": 71, "offset": 2694}, "svalue_start": {"col": 23, "line": 71, "offset": 2613}}, "start": {"col": 111, "line": 81, "offset": 3233}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_61a.cs", "start": {"col": 21, "line": 81, "offset": 3143}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 42, "offset": 1639}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 42, "offset": 1639}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_66b.cs", "start": {"col": 21, "line": 42, "offset": 1540}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 42, "offset": 1634}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_66b.cs", "start": {"col": 111, "line": 42, "offset": 1630}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "e82af26423633f50511a31d867a88d3528bd3e004910156dd4a5bc208047521926ee37948e10489ffa828f33ac7d8ba202cc665c324d117f1e236351fb4816fb_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 42, "offset": 1553}, "start": {"col": 21, "line": 42, "offset": 1540}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 42, "offset": 1565}, "start": {"col": 35, "line": 42, "offset": 1554}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 42, "offset": 1634}, "start": {"col": 111, "line": 42, "offset": 1630}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_66b.cs", "start": {"col": 21, "line": 42, "offset": 1540}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 76, "offset": 2999}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 76, "offset": 2999}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_66b.cs", "start": {"col": 21, "line": 76, "offset": 2900}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 76, "offset": 2994}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_66b.cs", "start": {"col": 111, "line": 76, "offset": 2990}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "e82af26423633f50511a31d867a88d3528bd3e004910156dd4a5bc208047521926ee37948e10489ffa828f33ac7d8ba202cc665c324d117f1e236351fb4816fb_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 76, "offset": 2913}, "start": {"col": 21, "line": 76, "offset": 2900}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 76, "offset": 2925}, "start": {"col": 35, "line": 76, "offset": 2914}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 76, "offset": 2994}, "start": {"col": 111, "line": 76, "offset": 2990}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_66b.cs", "start": {"col": 21, "line": 76, "offset": 2900}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 42, "offset": 1714}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 42, "offset": 1714}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_67b.cs", "start": {"col": 21, "line": 42, "offset": 1615}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 42, "offset": 1709}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_67b.cs", "start": {"col": 111, "line": 42, "offset": 1705}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "a55a56e9ad9247cc1c6a8ffbb2673ccb417b320ef01e42b4d3a00347338161095f913d2efda5537d076469f99e2a08a01f66789a31ece2b4fe2eb4b5e591e23d_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 42, "offset": 1628}, "start": {"col": 21, "line": 42, "offset": 1615}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 42, "offset": 1640}, "start": {"col": 35, "line": 42, "offset": 1629}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 42, "offset": 1709}, "propagated_value": {"svalue_abstract_content": "dataContainer.containerOne", "svalue_end": {"col": 49, "line": 32, "offset": 1166}, "svalue_start": {"col": 23, "line": 32, "offset": 1140}}, "start": {"col": 111, "line": 42, "offset": 1705}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_67b.cs", "start": {"col": 21, "line": 42, "offset": 1615}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 76, "offset": 3150}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 76, "offset": 3150}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_67b.cs", "start": {"col": 21, "line": 76, "offset": 3051}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 76, "offset": 3145}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_67b.cs", "start": {"col": 111, "line": 76, "offset": 3141}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "a55a56e9ad9247cc1c6a8ffbb2673ccb417b320ef01e42b4d3a00347338161095f913d2efda5537d076469f99e2a08a01f66789a31ece2b4fe2eb4b5e591e23d_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 76, "offset": 3064}, "start": {"col": 21, "line": 76, "offset": 3051}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 76, "offset": 3076}, "start": {"col": 35, "line": 76, "offset": 3065}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 76, "offset": 3145}, "propagated_value": {"svalue_abstract_content": "dataContainer.containerOne", "svalue_end": {"col": 49, "line": 66, "offset": 2602}, "svalue_start": {"col": 23, "line": 66, "offset": 2576}}, "start": {"col": 111, "line": 76, "offset": 3141}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_67b.cs", "start": {"col": 21, "line": 76, "offset": 3051}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 42, "offset": 1684}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 42, "offset": 1684}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_68b.cs", "start": {"col": 21, "line": 42, "offset": 1585}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 42, "offset": 1679}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_68b.cs", "start": {"col": 111, "line": 42, "offset": 1675}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "961ea9c01ad8297a357696b0029d7f543ad404d4daff813553ecdf8c7f6beecf9656d37da92f5caef5dfaf4cd1da9ea6661c954d683b8fe5367b10c862d66f42_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 42, "offset": 1598}, "start": {"col": 21, "line": 42, "offset": 1585}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 42, "offset": 1610}, "start": {"col": 35, "line": 42, "offset": 1599}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 42, "offset": 1679}, "propagated_value": {"svalue_abstract_content": "CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_68a.data", "svalue_end": {"col": 84, "line": 32, "offset": 1136}, "svalue_start": {"col": 23, "line": 32, "offset": 1075}}, "start": {"col": 111, "line": 42, "offset": 1675}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_68b.cs", "start": {"col": 21, "line": 42, "offset": 1585}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 76, "offset": 3072}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 76, "offset": 3072}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_68b.cs", "start": {"col": 21, "line": 76, "offset": 2973}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 76, "offset": 3067}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_68b.cs", "start": {"col": 111, "line": 76, "offset": 3063}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "961ea9c01ad8297a357696b0029d7f543ad404d4daff813553ecdf8c7f6beecf9656d37da92f5caef5dfaf4cd1da9ea6661c954d683b8fe5367b10c862d66f42_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 76, "offset": 2986}, "start": {"col": 21, "line": 76, "offset": 2973}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 76, "offset": 2998}, "start": {"col": 35, "line": 76, "offset": 2987}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 76, "offset": 3067}, "propagated_value": {"svalue_abstract_content": "CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_68a.data", "svalue_end": {"col": 84, "line": 66, "offset": 2524}, "svalue_start": {"col": 23, "line": 66, "offset": 2463}}, "start": {"col": 111, "line": 76, "offset": 3063}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_68b.cs", "start": {"col": 21, "line": 76, "offset": 2973}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 43, "offset": 1661}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "data", "location": {"end": {"col": 20, "line": 33, "offset": 1092}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_71b.cs", "start": {"col": 16, "line": 33, "offset": 1088}}}], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 43, "offset": 1661}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_71b.cs", "start": {"col": 21, "line": 43, "offset": 1562}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 41, "line": 33, "offset": 1113}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_71b.cs", "start": {"col": 23, "line": 33, "offset": 1095}}, "(string)dataObject"]]}, "engine_kind": "OSS", "fingerprint": "1c43fc89d82b4fa4425649f68a26cfaaa31754132435884ad50a3a5f899c97e943efc10c6d58cb0a3aa700e66c71c1c0c2f3fd9e956b9f7210cdc505cb482649_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 43, "offset": 1575}, "start": {"col": 21, "line": 43, "offset": 1562}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 43, "offset": 1587}, "start": {"col": 35, "line": 43, "offset": 1576}}, "$X": {"abstract_content": "(string dataObject", "end": {"col": 41, "line": 33, "offset": 1113}, "start": {"col": 23, "line": 33, "offset": 1095}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_71b.cs", "start": {"col": 21, "line": 43, "offset": 1562}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 77, "offset": 3026}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "data", "location": {"end": {"col": 20, "line": 67, "offset": 2457}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_71b.cs", "start": {"col": 16, "line": 67, "offset": 2453}}}], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 77, "offset": 3026}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_71b.cs", "start": {"col": 21, "line": 77, "offset": 2927}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 41, "line": 67, "offset": 2478}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_71b.cs", "start": {"col": 23, "line": 67, "offset": 2460}}, "(string)dataObject"]]}, "engine_kind": "OSS", "fingerprint": "1c43fc89d82b4fa4425649f68a26cfaaa31754132435884ad50a3a5f899c97e943efc10c6d58cb0a3aa700e66c71c1c0c2f3fd9e956b9f7210cdc505cb482649_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 77, "offset": 2940}, "start": {"col": 21, "line": 77, "offset": 2927}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 77, "offset": 2952}, "start": {"col": 35, "line": 77, "offset": 2941}}, "$X": {"abstract_content": "(string dataObject", "end": {"col": 41, "line": 67, "offset": 2478}, "start": {"col": 23, "line": 67, "offset": 2460}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_71b.cs", "start": {"col": 21, "line": 77, "offset": 2927}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 43, "offset": 1687}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "data", "location": {"end": {"col": 20, "line": 33, "offset": 1111}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_72b.cs", "start": {"col": 16, "line": 33, "offset": 1107}}}], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 43, "offset": 1687}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_72b.cs", "start": {"col": 21, "line": 43, "offset": 1588}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 48, "line": 33, "offset": 1139}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_72b.cs", "start": {"col": 23, "line": 33, "offset": 1114}}, "(string) dataHashtable[2]"]]}, "engine_kind": "OSS", "fingerprint": "5948cd9a84fb74a44f92e21efecbdcea9be4b5e912b2fb890c597ddf42275fad7f902f0a5fc0ec2df68cb8b286b8f466c5d54e4450684fdab0f91a5e6ad9e5db_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 43, "offset": 1601}, "start": {"col": 21, "line": 43, "offset": 1588}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 43, "offset": 1613}, "start": {"col": 35, "line": 43, "offset": 1602}}, "$X": {"abstract_content": "(string dataHashtable[[2]]", "end": {"col": 48, "line": 33, "offset": 1139}, "start": {"col": 23, "line": 33, "offset": 1114}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_72b.cs", "start": {"col": 21, "line": 43, "offset": 1588}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 77, "offset": 3065}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "data", "location": {"end": {"col": 20, "line": 67, "offset": 2489}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_72b.cs", "start": {"col": 16, "line": 67, "offset": 2485}}}], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 77, "offset": 3065}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_72b.cs", "start": {"col": 21, "line": 77, "offset": 2966}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 48, "line": 67, "offset": 2517}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_72b.cs", "start": {"col": 23, "line": 67, "offset": 2492}}, "(string) dataHashtable[2]"]]}, "engine_kind": "OSS", "fingerprint": "5948cd9a84fb74a44f92e21efecbdcea9be4b5e912b2fb890c597ddf42275fad7f902f0a5fc0ec2df68cb8b286b8f466c5d54e4450684fdab0f91a5e6ad9e5db_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 77, "offset": 2979}, "start": {"col": 21, "line": 77, "offset": 2966}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 77, "offset": 2991}, "start": {"col": 35, "line": 77, "offset": 2980}}, "$X": {"abstract_content": "(string dataHashtable[[2]]", "end": {"col": 48, "line": 67, "offset": 2517}, "start": {"col": 23, "line": 67, "offset": 2492}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_72b.cs", "start": {"col": 21, "line": 77, "offset": 2966}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 43, "offset": 1706}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 43, "offset": 1706}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_73b.cs", "start": {"col": 21, "line": 43, "offset": 1607}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 43, "offset": 1701}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_73b.cs", "start": {"col": 111, "line": 43, "offset": 1697}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "a8badeed2f83dc50058554932f6b762b31598d65b8e2d52bff2d62c7ef7670d90fd9ad3adfed918c8d48b7749449169058a7029c2ffd7dc5b492e3dd96951bc1_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 43, "offset": 1620}, "start": {"col": 21, "line": 43, "offset": 1607}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 43, "offset": 1632}, "start": {"col": 35, "line": 43, "offset": 1621}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 43, "offset": 1701}, "propagated_value": {"svalue_abstract_content": "dataLinkedList.Last.Value", "svalue_end": {"col": 48, "line": 33, "offset": 1158}, "svalue_start": {"col": 23, "line": 33, "offset": 1133}}, "start": {"col": 111, "line": 43, "offset": 1697}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_73b.cs", "start": {"col": 21, "line": 43, "offset": 1607}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 77, "offset": 3094}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 77, "offset": 3094}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_73b.cs", "start": {"col": 21, "line": 77, "offset": 2995}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 77, "offset": 3089}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_73b.cs", "start": {"col": 111, "line": 77, "offset": 3085}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "a8badeed2f83dc50058554932f6b762b31598d65b8e2d52bff2d62c7ef7670d90fd9ad3adfed918c8d48b7749449169058a7029c2ffd7dc5b492e3dd96951bc1_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 77, "offset": 3008}, "start": {"col": 21, "line": 77, "offset": 2995}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 77, "offset": 3020}, "start": {"col": 35, "line": 77, "offset": 3009}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 77, "offset": 3089}, "propagated_value": {"svalue_abstract_content": "dataLinkedList.Last.Value", "svalue_end": {"col": 48, "line": 67, "offset": 2546}, "svalue_start": {"col": 23, "line": 67, "offset": 2521}}, "start": {"col": 111, "line": 77, "offset": 3085}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_73b.cs", "start": {"col": 21, "line": 77, "offset": 2995}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 43, "offset": 1702}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 43, "offset": 1702}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_74b.cs", "start": {"col": 21, "line": 43, "offset": 1603}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 43, "offset": 1697}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_74b.cs", "start": {"col": 111, "line": 43, "offset": 1693}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "9eff25106eb3a28c7eff2c49b50d5ccf7f368ea3360a0ddb498564b03c62ae92fef0632c98b6b8c0c25b6954a3f36a1dd458f300209091af01b5eb192b6e4cfd_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 43, "offset": 1616}, "start": {"col": 21, "line": 43, "offset": 1603}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 43, "offset": 1628}, "start": {"col": 35, "line": 43, "offset": 1617}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 43, "offset": 1697}, "start": {"col": 111, "line": 43, "offset": 1693}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_74b.cs", "start": {"col": 21, "line": 43, "offset": 1603}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 77, "offset": 3087}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 77, "offset": 3087}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_74b.cs", "start": {"col": 21, "line": 77, "offset": 2988}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 77, "offset": 3082}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_74b.cs", "start": {"col": 111, "line": 77, "offset": 3078}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "9eff25106eb3a28c7eff2c49b50d5ccf7f368ea3360a0ddb498564b03c62ae92fef0632c98b6b8c0c25b6954a3f36a1dd458f300209091af01b5eb192b6e4cfd_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 77, "offset": 3001}, "start": {"col": 21, "line": 77, "offset": 2988}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 77, "offset": 3013}, "start": {"col": 35, "line": 77, "offset": 3002}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 77, "offset": 3082}, "start": {"col": 111, "line": 77, "offset": 3078}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_74b.cs", "start": {"col": 21, "line": 77, "offset": 2988}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 55, "line": 63, "offset": 2231}, "extra": {"engine_kind": "OSS", "fingerprint": "1441e0a3b71a6f281559d0a94b0dc84c9464b0205d6d6fad89d8701e80716d90e596e32a24fd2e4d5b8edfa8b6571c9e867487bfaa96c02c3c667b63ffa12471_0", "is_ignored": false, "lines": "            BinaryFormatter bf = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_75a.cs", "start": {"col": 13, "line": 63, "offset": 2189}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 55, "line": 113, "offset": 4042}, "extra": {"engine_kind": "OSS", "fingerprint": "1441e0a3b71a6f281559d0a94b0dc84c9464b0205d6d6fad89d8701e80716d90e596e32a24fd2e4d5b8edfa8b6571c9e867487bfaa96c02c3c667b63ffa12471_1", "is_ignored": false, "lines": "            BinaryFormatter bf = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_75a.cs", "start": {"col": 13, "line": 113, "offset": 4000}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 55, "line": 156, "offset": 5683}, "extra": {"engine_kind": "OSS", "fingerprint": "1441e0a3b71a6f281559d0a94b0dc84c9464b0205d6d6fad89d8701e80716d90e596e32a24fd2e4d5b8edfa8b6571c9e867487bfaa96c02c3c667b63ffa12471_2", "is_ignored": false, "lines": "            BinaryFormatter bf = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_75a.cs", "start": {"col": 13, "line": 156, "offset": 5641}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 48, "line": 38, "offset": 1278}, "extra": {"engine_kind": "OSS", "fingerprint": "6152aa11e8f8f8b38cf0d6ce00acfd002ae7cc46f3430baf15823badf0592a7451cf1a08b96cad6c232924539b46488340c9d1a757ab1efe4d8229883072c6c6_0", "is_ignored": false, "lines": "            var binForm = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_75b.cs", "start": {"col": 17, "line": 38, "offset": 1247}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 54, "offset": 2146}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "data", "location": {"end": {"col": 21, "line": 43, "offset": 1502}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_75b.cs", "start": {"col": 17, "line": 43, "offset": 1498}}}], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 54, "offset": 2146}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_75b.cs", "start": {"col": 25, "line": 54, "offset": 2047}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 62, "line": 43, "offset": 1543}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_75b.cs", "start": {"col": 24, "line": 43, "offset": 1505}}, "(string)binForm.Deserialize(memStream)"]]}, "engine_kind": "OSS", "fingerprint": "8e20a9721fd9b159c5cc9b763cf1271a71d29b0831a968f88f4a4d8bd6c6ceae19143f0e0b4b64bbe625d9ce9fa49eaf778b0f73f1163d796a76bd27db298c6c_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 54, "offset": 2060}, "start": {"col": 25, "line": 54, "offset": 2047}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 54, "offset": 2072}, "start": {"col": 39, "line": 54, "offset": 2061}}, "$X": {"abstract_content": "(string binForm.Deserialize(memStream)", "end": {"col": 62, "line": 43, "offset": 1543}, "start": {"col": 24, "line": 43, "offset": 1505}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_75b.cs", "start": {"col": 25, "line": 54, "offset": 2047}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 48, "line": 86, "offset": 3287}, "extra": {"engine_kind": "OSS", "fingerprint": "6152aa11e8f8f8b38cf0d6ce00acfd002ae7cc46f3430baf15823badf0592a7451cf1a08b96cad6c232924539b46488340c9d1a757ab1efe4d8229883072c6c6_1", "is_ignored": false, "lines": "            var binForm = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_75b.cs", "start": {"col": 17, "line": 86, "offset": 3256}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 102, "offset": 4155}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "data", "location": {"end": {"col": 21, "line": 91, "offset": 3511}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_75b.cs", "start": {"col": 17, "line": 91, "offset": 3507}}}], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 102, "offset": 4155}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_75b.cs", "start": {"col": 25, "line": 102, "offset": 4056}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 62, "line": 91, "offset": 3552}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_75b.cs", "start": {"col": 24, "line": 91, "offset": 3514}}, "(string)binForm.Deserialize(memStream)"]]}, "engine_kind": "OSS", "fingerprint": "8e20a9721fd9b159c5cc9b763cf1271a71d29b0831a968f88f4a4d8bd6c6ceae19143f0e0b4b64bbe625d9ce9fa49eaf778b0f73f1163d796a76bd27db298c6c_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 102, "offset": 4069}, "start": {"col": 25, "line": 102, "offset": 4056}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 102, "offset": 4081}, "start": {"col": 39, "line": 102, "offset": 4070}}, "$X": {"abstract_content": "(string binForm.Deserialize(memStream)", "end": {"col": 62, "line": 91, "offset": 3552}, "start": {"col": 24, "line": 91, "offset": 3514}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_75b.cs", "start": {"col": 25, "line": 102, "offset": 4056}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 48, "line": 132, "offset": 5271}, "extra": {"engine_kind": "OSS", "fingerprint": "6152aa11e8f8f8b38cf0d6ce00acfd002ae7cc46f3430baf15823badf0592a7451cf1a08b96cad6c232924539b46488340c9d1a757ab1efe4d8229883072c6c6_2", "is_ignored": false, "lines": "            var binForm = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_75b.cs", "start": {"col": 17, "line": 132, "offset": 5240}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 41, "offset": 1620}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 41, "offset": 1620}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_81_bad.cs", "start": {"col": 21, "line": 41, "offset": 1521}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 41, "offset": 1615}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_81_bad.cs", "start": {"col": 111, "line": 41, "offset": 1611}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "d963134cfab11d882aa0988c0152e8053036f278c5c896d5f80b7bd804a08ec70d623e32549cfc2bc85c849a30cb48820cda80dffcf7c5a57e59a20807cf97bc_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 41, "offset": 1534}, "start": {"col": 21, "line": 41, "offset": 1521}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 41, "offset": 1546}, "start": {"col": 35, "line": 41, "offset": 1535}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 41, "offset": 1615}, "start": {"col": 111, "line": 41, "offset": 1611}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_81_bad.cs", "start": {"col": 21, "line": 41, "offset": 1521}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 42, "offset": 1635}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 42, "offset": 1635}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_81_goodG2B.cs", "start": {"col": 21, "line": 42, "offset": 1536}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 42, "offset": 1630}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_81_goodG2B.cs", "start": {"col": 111, "line": 42, "offset": 1626}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "8371a3bfc9d55f77d7d4641989d15ea634730b01c68540ed183d17d05c33a5c3b0966deffeaab6b73859e6d95049bc419b3410ca4577f4479a211bb5206a438d_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 42, "offset": 1549}, "start": {"col": 21, "line": 42, "offset": 1536}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 42, "offset": 1561}, "start": {"col": 35, "line": 42, "offset": 1550}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 42, "offset": 1630}, "start": {"col": 111, "line": 42, "offset": 1626}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteNonQuery_81_goodG2B.cs", "start": {"col": 21, "line": 42, "offset": 1536}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 65, "offset": 2333}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 65, "offset": 2333}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_01.cs", "start": {"col": 21, "line": 65, "offset": 2260}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 65, "offset": 2328}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_01.cs", "start": {"col": 85, "line": 65, "offset": 2324}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "ef721a2c49f147fcd593680df4b331179720ea592bd7ead264536bb0ac97697ba1994de0faf98f5e1b152dcd2f7502dd8d1c02b97b443b3d8c065272aa44fcf2_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 65, "offset": 2273}, "start": {"col": 21, "line": 65, "offset": 2260}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 65, "offset": 2285}, "start": {"col": 35, "line": 65, "offset": 2274}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 65, "offset": 2328}, "start": {"col": 85, "line": 65, "offset": 2324}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_01.cs", "start": {"col": 21, "line": 65, "offset": 2260}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 76, "offset": 2784}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 76, "offset": 2784}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_02.cs", "start": {"col": 25, "line": 76, "offset": 2711}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 76, "offset": 2779}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_02.cs", "start": {"col": 89, "line": 76, "offset": 2775}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "b38578faee5e1c06e56e65f1405b4333ba8bf2a057ccc85cfa6b87468231b7d5e8ce31c7d1860e60fe27ce65324171973df92725ac804b6256db8e57050384ab_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 76, "offset": 2724}, "start": {"col": 25, "line": 76, "offset": 2711}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 76, "offset": 2736}, "start": {"col": 39, "line": 76, "offset": 2725}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 76, "offset": 2779}, "start": {"col": 89, "line": 76, "offset": 2775}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_02.cs", "start": {"col": 25, "line": 76, "offset": 2711}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 118, "offset": 4418}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 118, "offset": 4418}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_02.cs", "start": {"col": 25, "line": 118, "offset": 4345}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 118, "offset": 4413}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_02.cs", "start": {"col": 89, "line": 118, "offset": 4409}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "b38578faee5e1c06e56e65f1405b4333ba8bf2a057ccc85cfa6b87468231b7d5e8ce31c7d1860e60fe27ce65324171973df92725ac804b6256db8e57050384ab_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 118, "offset": 4358}, "start": {"col": 25, "line": 118, "offset": 4345}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 118, "offset": 4370}, "start": {"col": 39, "line": 118, "offset": 4359}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 118, "offset": 4413}, "start": {"col": 89, "line": 118, "offset": 4409}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_02.cs", "start": {"col": 25, "line": 118, "offset": 4345}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 159, "offset": 6022}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 159, "offset": 6022}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_02.cs", "start": {"col": 25, "line": 159, "offset": 5949}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 159, "offset": 6017}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_02.cs", "start": {"col": 89, "line": 159, "offset": 6013}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "b38578faee5e1c06e56e65f1405b4333ba8bf2a057ccc85cfa6b87468231b7d5e8ce31c7d1860e60fe27ce65324171973df92725ac804b6256db8e57050384ab_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 159, "offset": 5962}, "start": {"col": 25, "line": 159, "offset": 5949}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 159, "offset": 5974}, "start": {"col": 39, "line": 159, "offset": 5963}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 159, "offset": 6017}, "start": {"col": 89, "line": 159, "offset": 6013}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_02.cs", "start": {"col": 25, "line": 159, "offset": 5949}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 76, "offset": 2783}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 76, "offset": 2783}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_03.cs", "start": {"col": 25, "line": 76, "offset": 2710}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 76, "offset": 2778}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_03.cs", "start": {"col": 89, "line": 76, "offset": 2774}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "f4c34d0c68660d424f054ce10fb46c5c1a47e2946642c6094c93dde14560eebd4bf8513ac8356663fc36896e4419704ca7c00de6d8333a01256170d7f372f638_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 76, "offset": 2723}, "start": {"col": 25, "line": 76, "offset": 2710}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 76, "offset": 2735}, "start": {"col": 39, "line": 76, "offset": 2724}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 76, "offset": 2778}, "start": {"col": 89, "line": 76, "offset": 2774}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_03.cs", "start": {"col": 25, "line": 76, "offset": 2710}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 118, "offset": 4415}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 118, "offset": 4415}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_03.cs", "start": {"col": 25, "line": 118, "offset": 4342}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 118, "offset": 4410}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_03.cs", "start": {"col": 89, "line": 118, "offset": 4406}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "f4c34d0c68660d424f054ce10fb46c5c1a47e2946642c6094c93dde14560eebd4bf8513ac8356663fc36896e4419704ca7c00de6d8333a01256170d7f372f638_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 118, "offset": 4355}, "start": {"col": 25, "line": 118, "offset": 4342}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 118, "offset": 4367}, "start": {"col": 39, "line": 118, "offset": 4356}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 118, "offset": 4410}, "start": {"col": 89, "line": 118, "offset": 4406}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_03.cs", "start": {"col": 25, "line": 118, "offset": 4342}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 159, "offset": 6019}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 159, "offset": 6019}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_03.cs", "start": {"col": 25, "line": 159, "offset": 5946}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 159, "offset": 6014}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_03.cs", "start": {"col": 89, "line": 159, "offset": 6010}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "f4c34d0c68660d424f054ce10fb46c5c1a47e2946642c6094c93dde14560eebd4bf8513ac8356663fc36896e4419704ca7c00de6d8333a01256170d7f372f638_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 159, "offset": 5959}, "start": {"col": 25, "line": 159, "offset": 5946}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 159, "offset": 5971}, "start": {"col": 39, "line": 159, "offset": 5960}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 159, "offset": 6014}, "start": {"col": 89, "line": 159, "offset": 6010}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_03.cs", "start": {"col": 25, "line": 159, "offset": 5946}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 83, "offset": 3127}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 83, "offset": 3127}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_04.cs", "start": {"col": 25, "line": 83, "offset": 3054}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 83, "offset": 3122}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_04.cs", "start": {"col": 89, "line": 83, "offset": 3118}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "19a0a2cdcfa18686d61f329c247af9c2164db651957ccac00401936ed6e829a239f78ea335d06d92db740885df8dce0f6011320d10c9535c420a90bf265c0db9_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 83, "offset": 3067}, "start": {"col": 25, "line": 83, "offset": 3054}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 83, "offset": 3079}, "start": {"col": 39, "line": 83, "offset": 3068}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 83, "offset": 3122}, "start": {"col": 89, "line": 83, "offset": 3118}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_04.cs", "start": {"col": 25, "line": 83, "offset": 3054}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 125, "offset": 4817}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 125, "offset": 4817}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_04.cs", "start": {"col": 25, "line": 125, "offset": 4744}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 125, "offset": 4812}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_04.cs", "start": {"col": 89, "line": 125, "offset": 4808}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "19a0a2cdcfa18686d61f329c247af9c2164db651957ccac00401936ed6e829a239f78ea335d06d92db740885df8dce0f6011320d10c9535c420a90bf265c0db9_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 125, "offset": 4757}, "start": {"col": 25, "line": 125, "offset": 4744}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 125, "offset": 4769}, "start": {"col": 39, "line": 125, "offset": 4758}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 125, "offset": 4812}, "start": {"col": 89, "line": 125, "offset": 4808}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_04.cs", "start": {"col": 25, "line": 125, "offset": 4744}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 166, "offset": 6449}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 166, "offset": 6449}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_04.cs", "start": {"col": 25, "line": 166, "offset": 6376}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 166, "offset": 6444}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_04.cs", "start": {"col": 89, "line": 166, "offset": 6440}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "19a0a2cdcfa18686d61f329c247af9c2164db651957ccac00401936ed6e829a239f78ea335d06d92db740885df8dce0f6011320d10c9535c420a90bf265c0db9_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 166, "offset": 6389}, "start": {"col": 25, "line": 166, "offset": 6376}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 166, "offset": 6401}, "start": {"col": 39, "line": 166, "offset": 6390}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 166, "offset": 6444}, "start": {"col": 89, "line": 166, "offset": 6440}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_04.cs", "start": {"col": 25, "line": 166, "offset": 6376}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 82, "offset": 3120}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 82, "offset": 3120}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_05.cs", "start": {"col": 25, "line": 82, "offset": 3047}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 82, "offset": 3115}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_05.cs", "start": {"col": 89, "line": 82, "offset": 3111}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "50dd19810c443994fd11bdab0edaa749d7a5bb73ac1322994320848f54f6b3d38998a8c98ae7552836e29528c4e8dc6274362aafb08b93c11977feb3b8876f20_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 82, "offset": 3060}, "start": {"col": 25, "line": 82, "offset": 3047}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 82, "offset": 3072}, "start": {"col": 39, "line": 82, "offset": 3061}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 82, "offset": 3115}, "start": {"col": 89, "line": 82, "offset": 3111}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_05.cs", "start": {"col": 25, "line": 82, "offset": 3047}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 124, "offset": 4782}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 124, "offset": 4782}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_05.cs", "start": {"col": 25, "line": 124, "offset": 4709}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 124, "offset": 4777}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_05.cs", "start": {"col": 89, "line": 124, "offset": 4773}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "50dd19810c443994fd11bdab0edaa749d7a5bb73ac1322994320848f54f6b3d38998a8c98ae7552836e29528c4e8dc6274362aafb08b93c11977feb3b8876f20_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 124, "offset": 4722}, "start": {"col": 25, "line": 124, "offset": 4709}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 124, "offset": 4734}, "start": {"col": 39, "line": 124, "offset": 4723}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 124, "offset": 4777}, "start": {"col": 89, "line": 124, "offset": 4773}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_05.cs", "start": {"col": 25, "line": 124, "offset": 4709}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 165, "offset": 6400}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 165, "offset": 6400}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_05.cs", "start": {"col": 25, "line": 165, "offset": 6327}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 165, "offset": 6395}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_05.cs", "start": {"col": 89, "line": 165, "offset": 6391}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "50dd19810c443994fd11bdab0edaa749d7a5bb73ac1322994320848f54f6b3d38998a8c98ae7552836e29528c4e8dc6274362aafb08b93c11977feb3b8876f20_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 165, "offset": 6340}, "start": {"col": 25, "line": 165, "offset": 6327}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 165, "offset": 6352}, "start": {"col": 39, "line": 165, "offset": 6341}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 165, "offset": 6395}, "start": {"col": 89, "line": 165, "offset": 6391}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_05.cs", "start": {"col": 25, "line": 165, "offset": 6327}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 81, "offset": 3063}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 81, "offset": 3063}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_06.cs", "start": {"col": 25, "line": 81, "offset": 2990}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 81, "offset": 3058}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_06.cs", "start": {"col": 89, "line": 81, "offset": 3054}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "441608ded91a232ea5b51ec3af22a832860274fa97ff62abdba764b0237c8709457e625b7ea767e1130e09a30eecc981bf46852307f3414cf499e04da9851608_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 81, "offset": 3003}, "start": {"col": 25, "line": 81, "offset": 2990}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 81, "offset": 3015}, "start": {"col": 39, "line": 81, "offset": 3004}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 81, "offset": 3058}, "start": {"col": 89, "line": 81, "offset": 3054}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_06.cs", "start": {"col": 25, "line": 81, "offset": 2990}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 123, "offset": 4763}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 123, "offset": 4763}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_06.cs", "start": {"col": 25, "line": 123, "offset": 4690}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 123, "offset": 4758}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_06.cs", "start": {"col": 89, "line": 123, "offset": 4754}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "441608ded91a232ea5b51ec3af22a832860274fa97ff62abdba764b0237c8709457e625b7ea767e1130e09a30eecc981bf46852307f3414cf499e04da9851608_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 123, "offset": 4703}, "start": {"col": 25, "line": 123, "offset": 4690}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 123, "offset": 4715}, "start": {"col": 39, "line": 123, "offset": 4704}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 123, "offset": 4758}, "start": {"col": 89, "line": 123, "offset": 4754}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_06.cs", "start": {"col": 25, "line": 123, "offset": 4690}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 164, "offset": 6401}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 164, "offset": 6401}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_06.cs", "start": {"col": 25, "line": 164, "offset": 6328}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 164, "offset": 6396}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_06.cs", "start": {"col": 89, "line": 164, "offset": 6392}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "441608ded91a232ea5b51ec3af22a832860274fa97ff62abdba764b0237c8709457e625b7ea767e1130e09a30eecc981bf46852307f3414cf499e04da9851608_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 164, "offset": 6341}, "start": {"col": 25, "line": 164, "offset": 6328}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 164, "offset": 6353}, "start": {"col": 39, "line": 164, "offset": 6342}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 164, "offset": 6396}, "start": {"col": 89, "line": 164, "offset": 6392}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_06.cs", "start": {"col": 25, "line": 164, "offset": 6328}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 81, "offset": 3067}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 81, "offset": 3067}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_07.cs", "start": {"col": 25, "line": 81, "offset": 2994}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 81, "offset": 3062}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_07.cs", "start": {"col": 89, "line": 81, "offset": 3058}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "ccdb62eddc9f9d39691c94fcd70c56cfa87f8f5684a9ecd3612623d0e47ef7e9810d847a1c9c8df72313ce47b6524729ce2a3d7bb29ff2684cac3e1c1137b18d_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 81, "offset": 3007}, "start": {"col": 25, "line": 81, "offset": 2994}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 81, "offset": 3019}, "start": {"col": 39, "line": 81, "offset": 3008}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 81, "offset": 3062}, "start": {"col": 89, "line": 81, "offset": 3058}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_07.cs", "start": {"col": 25, "line": 81, "offset": 2994}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 123, "offset": 4739}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 123, "offset": 4739}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_07.cs", "start": {"col": 25, "line": 123, "offset": 4666}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 123, "offset": 4734}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_07.cs", "start": {"col": 89, "line": 123, "offset": 4730}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "ccdb62eddc9f9d39691c94fcd70c56cfa87f8f5684a9ecd3612623d0e47ef7e9810d847a1c9c8df72313ce47b6524729ce2a3d7bb29ff2684cac3e1c1137b18d_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 123, "offset": 4679}, "start": {"col": 25, "line": 123, "offset": 4666}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 123, "offset": 4691}, "start": {"col": 39, "line": 123, "offset": 4680}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 123, "offset": 4734}, "start": {"col": 89, "line": 123, "offset": 4730}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_07.cs", "start": {"col": 25, "line": 123, "offset": 4666}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 164, "offset": 6363}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 164, "offset": 6363}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_07.cs", "start": {"col": 25, "line": 164, "offset": 6290}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 164, "offset": 6358}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_07.cs", "start": {"col": 89, "line": 164, "offset": 6354}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "ccdb62eddc9f9d39691c94fcd70c56cfa87f8f5684a9ecd3612623d0e47ef7e9810d847a1c9c8df72313ce47b6524729ce2a3d7bb29ff2684cac3e1c1137b18d_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 164, "offset": 6303}, "start": {"col": 25, "line": 164, "offset": 6290}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 164, "offset": 6315}, "start": {"col": 39, "line": 164, "offset": 6304}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 164, "offset": 6358}, "start": {"col": 89, "line": 164, "offset": 6354}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_07.cs", "start": {"col": 25, "line": 164, "offset": 6290}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 89, "offset": 3199}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 89, "offset": 3199}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_08.cs", "start": {"col": 25, "line": 89, "offset": 3126}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 89, "offset": 3194}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_08.cs", "start": {"col": 89, "line": 89, "offset": 3190}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "0c41bea64ff33d176b7e3e2d37bc636655e02d4b48017c673c59d0150ffd213badf9008fcdb191bed5b3222cef5f9c122de4f0d2b3f43691a101d6b2a00335a2_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 89, "offset": 3139}, "start": {"col": 25, "line": 89, "offset": 3126}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 89, "offset": 3151}, "start": {"col": 39, "line": 89, "offset": 3140}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 89, "offset": 3194}, "start": {"col": 89, "line": 89, "offset": 3190}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_08.cs", "start": {"col": 25, "line": 89, "offset": 3126}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 131, "offset": 4897}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 131, "offset": 4897}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_08.cs", "start": {"col": 25, "line": 131, "offset": 4824}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 131, "offset": 4892}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_08.cs", "start": {"col": 89, "line": 131, "offset": 4888}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "0c41bea64ff33d176b7e3e2d37bc636655e02d4b48017c673c59d0150ffd213badf9008fcdb191bed5b3222cef5f9c122de4f0d2b3f43691a101d6b2a00335a2_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 131, "offset": 4837}, "start": {"col": 25, "line": 131, "offset": 4824}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 131, "offset": 4849}, "start": {"col": 39, "line": 131, "offset": 4838}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 131, "offset": 4892}, "start": {"col": 89, "line": 131, "offset": 4888}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_08.cs", "start": {"col": 25, "line": 131, "offset": 4824}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 172, "offset": 6533}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 172, "offset": 6533}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_08.cs", "start": {"col": 25, "line": 172, "offset": 6460}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 172, "offset": 6528}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_08.cs", "start": {"col": 89, "line": 172, "offset": 6524}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "0c41bea64ff33d176b7e3e2d37bc636655e02d4b48017c673c59d0150ffd213badf9008fcdb191bed5b3222cef5f9c122de4f0d2b3f43691a101d6b2a00335a2_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 172, "offset": 6473}, "start": {"col": 25, "line": 172, "offset": 6460}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 172, "offset": 6485}, "start": {"col": 39, "line": 172, "offset": 6474}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 172, "offset": 6528}, "start": {"col": 89, "line": 172, "offset": 6524}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_08.cs", "start": {"col": 25, "line": 172, "offset": 6460}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 76, "offset": 2860}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 76, "offset": 2860}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_09.cs", "start": {"col": 25, "line": 76, "offset": 2787}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 76, "offset": 2855}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_09.cs", "start": {"col": 89, "line": 76, "offset": 2851}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "3b830449a8a4c62a2bee459898569ea86b1338ac332e02e4d597c365c0d55bdf6e33cd223ef8316f4046e0c8006d89b84b5fab29e1acaa4e2d6096e43bb79623_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 76, "offset": 2800}, "start": {"col": 25, "line": 76, "offset": 2787}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 76, "offset": 2812}, "start": {"col": 39, "line": 76, "offset": 2801}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 76, "offset": 2855}, "start": {"col": 89, "line": 76, "offset": 2851}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_09.cs", "start": {"col": 25, "line": 76, "offset": 2787}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 118, "offset": 4570}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 118, "offset": 4570}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_09.cs", "start": {"col": 25, "line": 118, "offset": 4497}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 118, "offset": 4565}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_09.cs", "start": {"col": 89, "line": 118, "offset": 4561}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "3b830449a8a4c62a2bee459898569ea86b1338ac332e02e4d597c365c0d55bdf6e33cd223ef8316f4046e0c8006d89b84b5fab29e1acaa4e2d6096e43bb79623_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 118, "offset": 4510}, "start": {"col": 25, "line": 118, "offset": 4497}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 118, "offset": 4522}, "start": {"col": 39, "line": 118, "offset": 4511}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 118, "offset": 4565}, "start": {"col": 89, "line": 118, "offset": 4561}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_09.cs", "start": {"col": 25, "line": 118, "offset": 4497}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 159, "offset": 6212}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 159, "offset": 6212}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_09.cs", "start": {"col": 25, "line": 159, "offset": 6139}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 159, "offset": 6207}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_09.cs", "start": {"col": 89, "line": 159, "offset": 6203}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "3b830449a8a4c62a2bee459898569ea86b1338ac332e02e4d597c365c0d55bdf6e33cd223ef8316f4046e0c8006d89b84b5fab29e1acaa4e2d6096e43bb79623_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 159, "offset": 6152}, "start": {"col": 25, "line": 159, "offset": 6139}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 159, "offset": 6164}, "start": {"col": 39, "line": 159, "offset": 6153}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 159, "offset": 6207}, "start": {"col": 89, "line": 159, "offset": 6203}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_09.cs", "start": {"col": 25, "line": 159, "offset": 6139}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 76, "offset": 2820}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 76, "offset": 2820}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_10.cs", "start": {"col": 25, "line": 76, "offset": 2747}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 76, "offset": 2815}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_10.cs", "start": {"col": 89, "line": 76, "offset": 2811}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "a97b9dd629c53923dc1717dba940c20646883cac7dd4eb95bea37cc4cd2a1527a0a983c083aba2d150158b9fdaf62692da7af2a7966dba135ea230f23930c67a_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 76, "offset": 2760}, "start": {"col": 25, "line": 76, "offset": 2747}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 76, "offset": 2772}, "start": {"col": 39, "line": 76, "offset": 2761}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 76, "offset": 2815}, "start": {"col": 89, "line": 76, "offset": 2811}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_10.cs", "start": {"col": 25, "line": 76, "offset": 2747}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 118, "offset": 4490}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 118, "offset": 4490}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_10.cs", "start": {"col": 25, "line": 118, "offset": 4417}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 118, "offset": 4485}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_10.cs", "start": {"col": 89, "line": 118, "offset": 4481}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "a97b9dd629c53923dc1717dba940c20646883cac7dd4eb95bea37cc4cd2a1527a0a983c083aba2d150158b9fdaf62692da7af2a7966dba135ea230f23930c67a_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 118, "offset": 4430}, "start": {"col": 25, "line": 118, "offset": 4417}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 118, "offset": 4442}, "start": {"col": 39, "line": 118, "offset": 4431}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 118, "offset": 4485}, "start": {"col": 89, "line": 118, "offset": 4481}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_10.cs", "start": {"col": 25, "line": 118, "offset": 4417}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 159, "offset": 6112}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 159, "offset": 6112}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_10.cs", "start": {"col": 25, "line": 159, "offset": 6039}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 159, "offset": 6107}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_10.cs", "start": {"col": 89, "line": 159, "offset": 6103}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "a97b9dd629c53923dc1717dba940c20646883cac7dd4eb95bea37cc4cd2a1527a0a983c083aba2d150158b9fdaf62692da7af2a7966dba135ea230f23930c67a_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 159, "offset": 6052}, "start": {"col": 25, "line": 159, "offset": 6039}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 159, "offset": 6064}, "start": {"col": 39, "line": 159, "offset": 6053}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 159, "offset": 6107}, "start": {"col": 89, "line": 159, "offset": 6103}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_10.cs", "start": {"col": 25, "line": 159, "offset": 6039}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 76, "offset": 2855}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 76, "offset": 2855}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_11.cs", "start": {"col": 25, "line": 76, "offset": 2782}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 76, "offset": 2850}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_11.cs", "start": {"col": 89, "line": 76, "offset": 2846}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "8cd7d5dc3373b081d46c0bd6f4aa49444ece7b59ea001fac773c19c513531f7e0f4a804ddfc70d016526e756ecf673488ab242653f21d5cd9ef651d44fd8b88f_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 76, "offset": 2795}, "start": {"col": 25, "line": 76, "offset": 2782}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 76, "offset": 2807}, "start": {"col": 39, "line": 76, "offset": 2796}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 76, "offset": 2850}, "start": {"col": 89, "line": 76, "offset": 2846}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_11.cs", "start": {"col": 25, "line": 76, "offset": 2782}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 118, "offset": 4561}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 118, "offset": 4561}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_11.cs", "start": {"col": 25, "line": 118, "offset": 4488}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 118, "offset": 4556}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_11.cs", "start": {"col": 89, "line": 118, "offset": 4552}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "8cd7d5dc3373b081d46c0bd6f4aa49444ece7b59ea001fac773c19c513531f7e0f4a804ddfc70d016526e756ecf673488ab242653f21d5cd9ef651d44fd8b88f_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 118, "offset": 4501}, "start": {"col": 25, "line": 118, "offset": 4488}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 118, "offset": 4513}, "start": {"col": 39, "line": 118, "offset": 4502}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 118, "offset": 4556}, "start": {"col": 89, "line": 118, "offset": 4552}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_11.cs", "start": {"col": 25, "line": 118, "offset": 4488}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 159, "offset": 6201}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 159, "offset": 6201}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_11.cs", "start": {"col": 25, "line": 159, "offset": 6128}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 159, "offset": 6196}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_11.cs", "start": {"col": 89, "line": 159, "offset": 6192}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "8cd7d5dc3373b081d46c0bd6f4aa49444ece7b59ea001fac773c19c513531f7e0f4a804ddfc70d016526e756ecf673488ab242653f21d5cd9ef651d44fd8b88f_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 159, "offset": 6141}, "start": {"col": 25, "line": 159, "offset": 6128}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 159, "offset": 6153}, "start": {"col": 39, "line": 159, "offset": 6142}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 159, "offset": 6196}, "start": {"col": 89, "line": 159, "offset": 6192}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_11.cs", "start": {"col": 25, "line": 159, "offset": 6128}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 75, "offset": 2721}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 75, "offset": 2721}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_12.cs", "start": {"col": 25, "line": 75, "offset": 2648}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 75, "offset": 2716}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_12.cs", "start": {"col": 89, "line": 75, "offset": 2712}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "b521e63fc2a6fa6e3608cda20d8df2c824f3bcd6b784aad9dd5e408c52976dc670e2ca896f169477c77d757ef786fdca75e0d9119076d8a43f800bfb1597ef7c_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 75, "offset": 2661}, "start": {"col": 25, "line": 75, "offset": 2648}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 75, "offset": 2673}, "start": {"col": 39, "line": 75, "offset": 2662}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 75, "offset": 2716}, "start": {"col": 89, "line": 75, "offset": 2712}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_12.cs", "start": {"col": 25, "line": 75, "offset": 2648}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 76, "offset": 2871}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 76, "offset": 2871}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_13.cs", "start": {"col": 25, "line": 76, "offset": 2798}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 76, "offset": 2866}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_13.cs", "start": {"col": 89, "line": 76, "offset": 2862}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "369bd0a3449da0bf3ea87995373eda0348acfd28867a4f7826936d87188d4aa82ae23bc4905d3ee7e8401c7d9b806d3feb6eb0acc2d1a5478e0958dbd42b10ec_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 76, "offset": 2811}, "start": {"col": 25, "line": 76, "offset": 2798}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 76, "offset": 2823}, "start": {"col": 39, "line": 76, "offset": 2812}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 76, "offset": 2866}, "start": {"col": 89, "line": 76, "offset": 2862}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_13.cs", "start": {"col": 25, "line": 76, "offset": 2798}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 118, "offset": 4591}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 118, "offset": 4591}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_13.cs", "start": {"col": 25, "line": 118, "offset": 4518}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 118, "offset": 4586}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_13.cs", "start": {"col": 89, "line": 118, "offset": 4582}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "369bd0a3449da0bf3ea87995373eda0348acfd28867a4f7826936d87188d4aa82ae23bc4905d3ee7e8401c7d9b806d3feb6eb0acc2d1a5478e0958dbd42b10ec_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 118, "offset": 4531}, "start": {"col": 25, "line": 118, "offset": 4518}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 118, "offset": 4543}, "start": {"col": 39, "line": 118, "offset": 4532}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 118, "offset": 4586}, "start": {"col": 89, "line": 118, "offset": 4582}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_13.cs", "start": {"col": 25, "line": 118, "offset": 4518}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 159, "offset": 6239}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 159, "offset": 6239}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_13.cs", "start": {"col": 25, "line": 159, "offset": 6166}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 159, "offset": 6234}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_13.cs", "start": {"col": 89, "line": 159, "offset": 6230}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "369bd0a3449da0bf3ea87995373eda0348acfd28867a4f7826936d87188d4aa82ae23bc4905d3ee7e8401c7d9b806d3feb6eb0acc2d1a5478e0958dbd42b10ec_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 159, "offset": 6179}, "start": {"col": 25, "line": 159, "offset": 6166}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 159, "offset": 6191}, "start": {"col": 39, "line": 159, "offset": 6180}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 159, "offset": 6234}, "start": {"col": 89, "line": 159, "offset": 6230}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_13.cs", "start": {"col": 25, "line": 159, "offset": 6166}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 76, "offset": 2831}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 76, "offset": 2831}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_14.cs", "start": {"col": 25, "line": 76, "offset": 2758}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 76, "offset": 2826}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_14.cs", "start": {"col": 89, "line": 76, "offset": 2822}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "4f476db0449f244609dd18534a1ea5f4961038b2c38bb9c1cf5a67d8256d54d2a28af3b70a2f5175a2c629ca63f94d47a05b8ee04f971e4495fbbff484d8cc43_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 76, "offset": 2771}, "start": {"col": 25, "line": 76, "offset": 2758}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 76, "offset": 2783}, "start": {"col": 39, "line": 76, "offset": 2772}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 76, "offset": 2826}, "start": {"col": 89, "line": 76, "offset": 2822}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_14.cs", "start": {"col": 25, "line": 76, "offset": 2758}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 118, "offset": 4511}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 118, "offset": 4511}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_14.cs", "start": {"col": 25, "line": 118, "offset": 4438}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 118, "offset": 4506}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_14.cs", "start": {"col": 89, "line": 118, "offset": 4502}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "4f476db0449f244609dd18534a1ea5f4961038b2c38bb9c1cf5a67d8256d54d2a28af3b70a2f5175a2c629ca63f94d47a05b8ee04f971e4495fbbff484d8cc43_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 118, "offset": 4451}, "start": {"col": 25, "line": 118, "offset": 4438}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 118, "offset": 4463}, "start": {"col": 39, "line": 118, "offset": 4452}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 118, "offset": 4506}, "start": {"col": 89, "line": 118, "offset": 4502}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_14.cs", "start": {"col": 25, "line": 118, "offset": 4438}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 159, "offset": 6139}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 159, "offset": 6139}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_14.cs", "start": {"col": 25, "line": 159, "offset": 6066}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 159, "offset": 6134}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_14.cs", "start": {"col": 89, "line": 159, "offset": 6130}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "4f476db0449f244609dd18534a1ea5f4961038b2c38bb9c1cf5a67d8256d54d2a28af3b70a2f5175a2c629ca63f94d47a05b8ee04f971e4495fbbff484d8cc43_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 159, "offset": 6079}, "start": {"col": 25, "line": 159, "offset": 6066}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 159, "offset": 6091}, "start": {"col": 39, "line": 159, "offset": 6080}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 159, "offset": 6134}, "start": {"col": 89, "line": 159, "offset": 6130}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_14.cs", "start": {"col": 25, "line": 159, "offset": 6066}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 78, "offset": 2843}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 78, "offset": 2843}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_15.cs", "start": {"col": 25, "line": 78, "offset": 2770}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 78, "offset": 2838}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_15.cs", "start": {"col": 89, "line": 78, "offset": 2834}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "8214f04fc5932ea774292a511e8c9f5fb9c45bca4ec44a59fcdfcd29403d14f0108118942c79f5394e9b571a8c36cc4d8344b09eaacafd9042349358bac3a63d_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 78, "offset": 2783}, "start": {"col": 25, "line": 78, "offset": 2770}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 78, "offset": 2795}, "start": {"col": 39, "line": 78, "offset": 2784}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 78, "offset": 2838}, "start": {"col": 89, "line": 78, "offset": 2834}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_15.cs", "start": {"col": 25, "line": 78, "offset": 2770}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 127, "offset": 4733}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 127, "offset": 4733}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_15.cs", "start": {"col": 25, "line": 127, "offset": 4660}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 127, "offset": 4728}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_15.cs", "start": {"col": 89, "line": 127, "offset": 4724}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "8214f04fc5932ea774292a511e8c9f5fb9c45bca4ec44a59fcdfcd29403d14f0108118942c79f5394e9b571a8c36cc4d8344b09eaacafd9042349358bac3a63d_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 127, "offset": 4673}, "start": {"col": 25, "line": 127, "offset": 4660}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 127, "offset": 4685}, "start": {"col": 39, "line": 127, "offset": 4674}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 127, "offset": 4728}, "start": {"col": 89, "line": 127, "offset": 4724}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_15.cs", "start": {"col": 25, "line": 127, "offset": 4660}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 175, "offset": 6593}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 175, "offset": 6593}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_15.cs", "start": {"col": 25, "line": 175, "offset": 6520}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 175, "offset": 6588}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_15.cs", "start": {"col": 89, "line": 175, "offset": 6584}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "8214f04fc5932ea774292a511e8c9f5fb9c45bca4ec44a59fcdfcd29403d14f0108118942c79f5394e9b571a8c36cc4d8344b09eaacafd9042349358bac3a63d_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 175, "offset": 6533}, "start": {"col": 25, "line": 175, "offset": 6520}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 175, "offset": 6545}, "start": {"col": 39, "line": 175, "offset": 6534}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 175, "offset": 6588}, "start": {"col": 89, "line": 175, "offset": 6584}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_15.cs", "start": {"col": 25, "line": 175, "offset": 6520}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 71, "offset": 2567}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 71, "offset": 2567}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_16.cs", "start": {"col": 25, "line": 71, "offset": 2494}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 71, "offset": 2562}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_16.cs", "start": {"col": 89, "line": 71, "offset": 2558}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "5a356678c21608ddd12da6fe5b36912ac51de69d78654bd49965f12e27d1c13c490beb8da67e8217e43f75ef70e9adaba0b59284c192117b9f90478b1e0f03ed_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 71, "offset": 2507}, "start": {"col": 25, "line": 71, "offset": 2494}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 71, "offset": 2519}, "start": {"col": 39, "line": 71, "offset": 2508}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 71, "offset": 2562}, "start": {"col": 89, "line": 71, "offset": 2558}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_16.cs", "start": {"col": 25, "line": 71, "offset": 2494}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 109, "offset": 3980}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 109, "offset": 3980}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_16.cs", "start": {"col": 25, "line": 109, "offset": 3907}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 109, "offset": 3975}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_16.cs", "start": {"col": 89, "line": 109, "offset": 3971}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "5a356678c21608ddd12da6fe5b36912ac51de69d78654bd49965f12e27d1c13c490beb8da67e8217e43f75ef70e9adaba0b59284c192117b9f90478b1e0f03ed_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 109, "offset": 3920}, "start": {"col": 25, "line": 109, "offset": 3907}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 109, "offset": 3932}, "start": {"col": 39, "line": 109, "offset": 3921}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 109, "offset": 3975}, "start": {"col": 89, "line": 109, "offset": 3971}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_16.cs", "start": {"col": 25, "line": 109, "offset": 3907}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 71, "offset": 2618}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 71, "offset": 2618}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_17.cs", "start": {"col": 25, "line": 71, "offset": 2545}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 71, "offset": 2613}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_17.cs", "start": {"col": 89, "line": 71, "offset": 2609}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "9b87b6ca21ed6bf247693920df66b58b78ccb57e9821003eb5ed991a04460675d70e6c86483b5dd3bd65eae621d9312a31ca376251470868593540641342c5b0_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 71, "offset": 2558}, "start": {"col": 25, "line": 71, "offset": 2545}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 71, "offset": 2570}, "start": {"col": 39, "line": 71, "offset": 2559}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 71, "offset": 2613}, "start": {"col": 89, "line": 71, "offset": 2609}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_17.cs", "start": {"col": 25, "line": 71, "offset": 2545}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 104, "offset": 3954}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 104, "offset": 3954}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_17.cs", "start": {"col": 25, "line": 104, "offset": 3881}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 104, "offset": 3949}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_17.cs", "start": {"col": 89, "line": 104, "offset": 3945}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "9b87b6ca21ed6bf247693920df66b58b78ccb57e9821003eb5ed991a04460675d70e6c86483b5dd3bd65eae621d9312a31ca376251470868593540641342c5b0_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 104, "offset": 3894}, "start": {"col": 25, "line": 104, "offset": 3881}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 104, "offset": 3906}, "start": {"col": 39, "line": 104, "offset": 3895}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 104, "offset": 3949}, "start": {"col": 89, "line": 104, "offset": 3945}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_17.cs", "start": {"col": 25, "line": 104, "offset": 3881}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 76, "offset": 2782}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 76, "offset": 2782}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_21.cs", "start": {"col": 25, "line": 76, "offset": 2709}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 76, "offset": 2777}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_21.cs", "start": {"col": 89, "line": 76, "offset": 2773}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "e1be0193ef037aa5238cc060716eabdbe61e63518b38e34cd794abb3860c601982b70516ffe48a1bab9d221bf680ede1c164098c91aac01482467b6d0c306ba3_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 76, "offset": 2722}, "start": {"col": 25, "line": 76, "offset": 2709}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 76, "offset": 2734}, "start": {"col": 39, "line": 76, "offset": 2723}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 76, "offset": 2777}, "start": {"col": 89, "line": 76, "offset": 2773}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_21.cs", "start": {"col": 25, "line": 76, "offset": 2709}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 251, "offset": 9733}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 251, "offset": 9733}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_21.cs", "start": {"col": 25, "line": 251, "offset": 9660}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 251, "offset": 9728}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_21.cs", "start": {"col": 89, "line": 251, "offset": 9724}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "e1be0193ef037aa5238cc060716eabdbe61e63518b38e34cd794abb3860c601982b70516ffe48a1bab9d221bf680ede1c164098c91aac01482467b6d0c306ba3_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 251, "offset": 9673}, "start": {"col": 25, "line": 251, "offset": 9660}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 251, "offset": 9685}, "start": {"col": 39, "line": 251, "offset": 9674}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 251, "offset": 9728}, "start": {"col": 89, "line": 251, "offset": 9724}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_21.cs", "start": {"col": 25, "line": 251, "offset": 9660}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 42, "offset": 1674}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 42, "offset": 1674}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_22b.cs", "start": {"col": 25, "line": 42, "offset": 1601}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 42, "offset": 1669}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_22b.cs", "start": {"col": 89, "line": 42, "offset": 1665}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "eeb8b3f0a7bc235b59fea0530e469d0ea2c8980cd8251051fbe9554c99d3befdf7c52f63b6a62a11e1be04f1e2fb5b2ec435fc916d22517f9dddf02db7fddf3f_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 42, "offset": 1614}, "start": {"col": 25, "line": 42, "offset": 1601}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 42, "offset": 1626}, "start": {"col": 39, "line": 42, "offset": 1615}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 42, "offset": 1669}, "start": {"col": 89, "line": 42, "offset": 1665}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_22b.cs", "start": {"col": 25, "line": 42, "offset": 1601}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 155, "offset": 6697}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 155, "offset": 6697}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_22b.cs", "start": {"col": 25, "line": 155, "offset": 6624}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 155, "offset": 6692}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_22b.cs", "start": {"col": 89, "line": 155, "offset": 6688}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "eeb8b3f0a7bc235b59fea0530e469d0ea2c8980cd8251051fbe9554c99d3befdf7c52f63b6a62a11e1be04f1e2fb5b2ec435fc916d22517f9dddf02db7fddf3f_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 155, "offset": 6637}, "start": {"col": 25, "line": 155, "offset": 6624}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 155, "offset": 6649}, "start": {"col": 39, "line": 155, "offset": 6638}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 155, "offset": 6692}, "start": {"col": 89, "line": 155, "offset": 6688}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_22b.cs", "start": {"col": 25, "line": 155, "offset": 6624}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 71, "offset": 2638}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "dataCopy", "location": {"end": {"col": 21, "line": 59, "offset": 2045}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_31.cs", "start": {"col": 13, "line": 59, "offset": 2037}}}, {"content": "data", "location": {"end": {"col": 24, "line": 62, "offset": 2100}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_31.cs", "start": {"col": 20, "line": 62, "offset": 2096}}}], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 71, "offset": 2638}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_31.cs", "start": {"col": 25, "line": 71, "offset": 2565}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 28, "line": 59, "offset": 2052}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_31.cs", "start": {"col": 24, "line": 59, "offset": 2048}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "fdef9d0f57b383df4dce3b074e3ca647275711ec8024d779f2e7fecf263f9eae16c5118335cebc9e27755bee8e0e7cd55665d9d6beb56f6642decf39d4e99e46_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 71, "offset": 2578}, "start": {"col": 25, "line": 71, "offset": 2565}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 71, "offset": 2590}, "start": {"col": 39, "line": 71, "offset": 2579}}, "$X": {"abstract_content": "data", "end": {"col": 28, "line": 59, "offset": 2052}, "start": {"col": 24, "line": 59, "offset": 2048}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_31.cs", "start": {"col": 25, "line": 71, "offset": 2565}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 43, "offset": 1572}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 43, "offset": 1572}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_41.cs", "start": {"col": 21, "line": 43, "offset": 1499}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 43, "offset": 1567}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_41.cs", "start": {"col": 85, "line": 43, "offset": 1563}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "a6dddbd407ca2007e7672d3eb8f3ab148a434b611c8751df25336ff82d196e143ecb9b48ca26e3c39f3186b83215106abf85e4f615d17c209cc28bd6197cdfb8_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 43, "offset": 1512}, "start": {"col": 21, "line": 43, "offset": 1499}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 43, "offset": 1524}, "start": {"col": 35, "line": 43, "offset": 1513}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 43, "offset": 1567}, "start": {"col": 85, "line": 43, "offset": 1563}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_41.cs", "start": {"col": 21, "line": 43, "offset": 1499}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 102, "offset": 3774}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 102, "offset": 3774}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_41.cs", "start": {"col": 21, "line": 102, "offset": 3701}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 102, "offset": 3769}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_41.cs", "start": {"col": 85, "line": 102, "offset": 3765}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "a6dddbd407ca2007e7672d3eb8f3ab148a434b611c8751df25336ff82d196e143ecb9b48ca26e3c39f3186b83215106abf85e4f615d17c209cc28bd6197cdfb8_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 102, "offset": 3714}, "start": {"col": 21, "line": 102, "offset": 3701}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 102, "offset": 3726}, "start": {"col": 35, "line": 102, "offset": 3715}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 102, "offset": 3769}, "start": {"col": 85, "line": 102, "offset": 3765}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_41.cs", "start": {"col": 21, "line": 102, "offset": 3701}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 71, "offset": 2560}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 71, "offset": 2560}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_42.cs", "start": {"col": 21, "line": 71, "offset": 2487}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 71, "offset": 2555}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_42.cs", "start": {"col": 85, "line": 71, "offset": 2551}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "5c8fa6ff77f773656405b076918c72c8976d830ff7cd5cdd53955294ed90412784f339f3b934e61b85e3cbfe5f5e574e57901eae5dd5063018065234c3d36fe5_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 71, "offset": 2500}, "start": {"col": 21, "line": 71, "offset": 2487}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 71, "offset": 2512}, "start": {"col": 35, "line": 71, "offset": 2501}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 71, "offset": 2555}, "propagated_value": {"svalue_abstract_content": "BadSource(req resp)", "svalue_end": {"col": 43, "line": 62, "offset": 2069}, "svalue_start": {"col": 23, "line": 62, "offset": 2049}}, "start": {"col": 85, "line": 71, "offset": 2551}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_42.cs", "start": {"col": 21, "line": 71, "offset": 2487}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 107, "offset": 3924}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 107, "offset": 3924}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_42.cs", "start": {"col": 21, "line": 107, "offset": 3851}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 107, "offset": 3919}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_42.cs", "start": {"col": 85, "line": 107, "offset": 3915}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "5c8fa6ff77f773656405b076918c72c8976d830ff7cd5cdd53955294ed90412784f339f3b934e61b85e3cbfe5f5e574e57901eae5dd5063018065234c3d36fe5_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 107, "offset": 3864}, "start": {"col": 21, "line": 107, "offset": 3851}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 107, "offset": 3876}, "start": {"col": 35, "line": 107, "offset": 3865}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 107, "offset": 3919}, "propagated_value": {"svalue_abstract_content": "GoodG2BSource(req resp)", "svalue_end": {"col": 47, "line": 98, "offset": 3433}, "svalue_start": {"col": 23, "line": 98, "offset": 3409}}, "start": {"col": 85, "line": 107, "offset": 3915}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_42.cs", "start": {"col": 21, "line": 107, "offset": 3851}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 48, "offset": 1702}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "data", "location": {"end": {"col": 20, "line": 39, "offset": 1201}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_45.cs", "start": {"col": 16, "line": 39, "offset": 1197}}}], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 48, "offset": 1702}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_45.cs", "start": {"col": 21, "line": 48, "offset": 1629}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 30, "line": 39, "offset": 1211}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_45.cs", "start": {"col": 23, "line": 39, "offset": 1204}}, "dataBad"]]}, "engine_kind": "OSS", "fingerprint": "21bf5f2382cd309a17df3e0922df6375a00bea078d16909afbe1c0564f099bcedb5d2731917c98aec80e573e0419d7b12feb80b25f3e7ed1ab81ba027f3d261f_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 48, "offset": 1642}, "start": {"col": 21, "line": 48, "offset": 1629}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 48, "offset": 1654}, "start": {"col": 35, "line": 48, "offset": 1643}}, "$X": {"abstract_content": "dataBad", "end": {"col": 30, "line": 39, "offset": 1211}, "start": {"col": 23, "line": 39, "offset": 1204}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_45.cs", "start": {"col": 21, "line": 48, "offset": 1629}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 109, "offset": 3936}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "data", "location": {"end": {"col": 20, "line": 100, "offset": 3431}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_45.cs", "start": {"col": 16, "line": 100, "offset": 3427}}}], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 109, "offset": 3936}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_45.cs", "start": {"col": 21, "line": 109, "offset": 3863}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 34, "line": 100, "offset": 3445}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_45.cs", "start": {"col": 23, "line": 100, "offset": 3434}}, "dataGoodG2B"]]}, "engine_kind": "OSS", "fingerprint": "6416d6badf28a621f6c0b744d9bb4df45231d4586b3879dff38c7150740dc7deda5cac3c4bae5827cae28b48b6f28b855851092f5fc2307c850b185f8e445d67_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 109, "offset": 3876}, "start": {"col": 21, "line": 109, "offset": 3863}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 109, "offset": 3888}, "start": {"col": 35, "line": 109, "offset": 3877}}, "$X": {"abstract_content": "dataGoodG2B", "end": {"col": 34, "line": 100, "offset": 3445}, "start": {"col": 23, "line": 100, "offset": 3434}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_45.cs", "start": {"col": 21, "line": 109, "offset": 3863}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 40, "offset": 1530}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 40, "offset": 1530}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_51b.cs", "start": {"col": 21, "line": 40, "offset": 1457}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 40, "offset": 1525}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_51b.cs", "start": {"col": 85, "line": 40, "offset": 1521}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "bf062f05709a8175c33584b00b26c930104374ea6853cba0e6f77d10c89c672993a5f4a843425743e120450da1564a07c1975d7ff071e8d7630c611bf227950e_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 40, "offset": 1470}, "start": {"col": 21, "line": 40, "offset": 1457}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 40, "offset": 1482}, "start": {"col": 35, "line": 40, "offset": 1471}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 40, "offset": 1525}, "start": {"col": 85, "line": 40, "offset": 1521}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_51b.cs", "start": {"col": 21, "line": 40, "offset": 1457}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 68, "offset": 2651}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 68, "offset": 2651}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_51b.cs", "start": {"col": 21, "line": 68, "offset": 2578}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 68, "offset": 2646}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_51b.cs", "start": {"col": 85, "line": 68, "offset": 2642}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "bf062f05709a8175c33584b00b26c930104374ea6853cba0e6f77d10c89c672993a5f4a843425743e120450da1564a07c1975d7ff071e8d7630c611bf227950e_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 68, "offset": 2591}, "start": {"col": 21, "line": 68, "offset": 2578}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 68, "offset": 2603}, "start": {"col": 35, "line": 68, "offset": 2592}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 68, "offset": 2646}, "start": {"col": 85, "line": 68, "offset": 2642}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_51b.cs", "start": {"col": 21, "line": 68, "offset": 2578}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 40, "offset": 1545}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 40, "offset": 1545}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_52c.cs", "start": {"col": 21, "line": 40, "offset": 1472}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 40, "offset": 1540}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_52c.cs", "start": {"col": 85, "line": 40, "offset": 1536}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "00c4bc57bdaf5c6914455e728cd2cba22321f541447c0d8d5daab1e53f7180b7d908981b2e70487b12de6d154844c4db4139826a93b5fb4934d1be08c5283df0_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 40, "offset": 1485}, "start": {"col": 21, "line": 40, "offset": 1472}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 40, "offset": 1497}, "start": {"col": 35, "line": 40, "offset": 1486}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 40, "offset": 1540}, "start": {"col": 85, "line": 40, "offset": 1536}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_52c.cs", "start": {"col": 21, "line": 40, "offset": 1472}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 68, "offset": 2666}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 68, "offset": 2666}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_52c.cs", "start": {"col": 21, "line": 68, "offset": 2593}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 68, "offset": 2661}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_52c.cs", "start": {"col": 85, "line": 68, "offset": 2657}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "00c4bc57bdaf5c6914455e728cd2cba22321f541447c0d8d5daab1e53f7180b7d908981b2e70487b12de6d154844c4db4139826a93b5fb4934d1be08c5283df0_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 68, "offset": 2606}, "start": {"col": 21, "line": 68, "offset": 2593}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 68, "offset": 2618}, "start": {"col": 35, "line": 68, "offset": 2607}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 68, "offset": 2661}, "start": {"col": 85, "line": 68, "offset": 2657}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_52c.cs", "start": {"col": 21, "line": 68, "offset": 2593}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 40, "offset": 1572}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 40, "offset": 1572}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_53d.cs", "start": {"col": 21, "line": 40, "offset": 1499}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 40, "offset": 1567}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_53d.cs", "start": {"col": 85, "line": 40, "offset": 1563}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "ee1df1735ece529b99b4a85484cc9aff42e758b3e292cbab2d4e7fc1519a0f05f1a4e62384171826a251de4775de384b4a981cb2ed9c35a14cfa926eefb4eb1d_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 40, "offset": 1512}, "start": {"col": 21, "line": 40, "offset": 1499}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 40, "offset": 1524}, "start": {"col": 35, "line": 40, "offset": 1513}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 40, "offset": 1567}, "start": {"col": 85, "line": 40, "offset": 1563}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_53d.cs", "start": {"col": 21, "line": 40, "offset": 1499}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 68, "offset": 2693}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 68, "offset": 2693}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_53d.cs", "start": {"col": 21, "line": 68, "offset": 2620}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 68, "offset": 2688}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_53d.cs", "start": {"col": 85, "line": 68, "offset": 2684}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "ee1df1735ece529b99b4a85484cc9aff42e758b3e292cbab2d4e7fc1519a0f05f1a4e62384171826a251de4775de384b4a981cb2ed9c35a14cfa926eefb4eb1d_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 68, "offset": 2633}, "start": {"col": 21, "line": 68, "offset": 2620}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 68, "offset": 2645}, "start": {"col": 35, "line": 68, "offset": 2634}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 68, "offset": 2688}, "start": {"col": 85, "line": 68, "offset": 2684}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_53d.cs", "start": {"col": 21, "line": 68, "offset": 2620}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 40, "offset": 1573}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 40, "offset": 1573}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_54e.cs", "start": {"col": 21, "line": 40, "offset": 1500}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 40, "offset": 1568}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_54e.cs", "start": {"col": 85, "line": 40, "offset": 1564}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "9b8b083e3a748da65dd8dae9fca821200364b66b38b963a8d02a973596a518c4a6d3b1d4346077d705a40b87b23acbd428caac1e3da17efc4a2f06cfc1308c28_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 40, "offset": 1513}, "start": {"col": 21, "line": 40, "offset": 1500}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 40, "offset": 1525}, "start": {"col": 35, "line": 40, "offset": 1514}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 40, "offset": 1568}, "start": {"col": 85, "line": 40, "offset": 1564}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_54e.cs", "start": {"col": 21, "line": 40, "offset": 1500}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 68, "offset": 2694}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 68, "offset": 2694}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_54e.cs", "start": {"col": 21, "line": 68, "offset": 2621}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 68, "offset": 2689}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_54e.cs", "start": {"col": 85, "line": 68, "offset": 2685}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "9b8b083e3a748da65dd8dae9fca821200364b66b38b963a8d02a973596a518c4a6d3b1d4346077d705a40b87b23acbd428caac1e3da17efc4a2f06cfc1308c28_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 68, "offset": 2634}, "start": {"col": 21, "line": 68, "offset": 2621}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 68, "offset": 2646}, "start": {"col": 35, "line": 68, "offset": 2635}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 68, "offset": 2689}, "start": {"col": 85, "line": 68, "offset": 2685}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_54e.cs", "start": {"col": 21, "line": 68, "offset": 2621}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 41, "offset": 1621}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 41, "offset": 1621}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_61a.cs", "start": {"col": 21, "line": 41, "offset": 1548}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 41, "offset": 1616}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_61a.cs", "start": {"col": 85, "line": 41, "offset": 1612}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "6ff571bf6db444b19d3187838764f4067952949a59dd1dd46e2e01efac4aa24e0062047fae981f92b2cb64bf6abc5eef0c9dc41a66b6aea8e2ebdcc9361f278f_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 41, "offset": 1561}, "start": {"col": 21, "line": 41, "offset": 1548}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 41, "offset": 1573}, "start": {"col": 35, "line": 41, "offset": 1562}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 41, "offset": 1616}, "propagated_value": {"svalue_abstract_content": "CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_61b.BadSource(req resp)", "svalue_end": {"col": 98, "line": 32, "offset": 1130}, "svalue_start": {"col": 23, "line": 32, "offset": 1055}}, "start": {"col": 85, "line": 41, "offset": 1612}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_61a.cs", "start": {"col": 21, "line": 41, "offset": 1548}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 75, "offset": 2978}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 75, "offset": 2978}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_61a.cs", "start": {"col": 21, "line": 75, "offset": 2905}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 75, "offset": 2973}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_61a.cs", "start": {"col": 85, "line": 75, "offset": 2969}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "6ff571bf6db444b19d3187838764f4067952949a59dd1dd46e2e01efac4aa24e0062047fae981f92b2cb64bf6abc5eef0c9dc41a66b6aea8e2ebdcc9361f278f_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 75, "offset": 2918}, "start": {"col": 21, "line": 75, "offset": 2905}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 75, "offset": 2930}, "start": {"col": 35, "line": 75, "offset": 2919}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 75, "offset": 2973}, "propagated_value": {"svalue_abstract_content": "CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_61b.GoodG2BSource(req resp)", "svalue_end": {"col": 102, "line": 66, "offset": 2487}, "svalue_start": {"col": 23, "line": 66, "offset": 2408}}, "start": {"col": 85, "line": 75, "offset": 2969}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_61a.cs", "start": {"col": 21, "line": 75, "offset": 2905}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 41, "offset": 1574}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 41, "offset": 1574}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_66b.cs", "start": {"col": 21, "line": 41, "offset": 1501}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 41, "offset": 1569}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_66b.cs", "start": {"col": 85, "line": 41, "offset": 1565}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "56f537d8d2f76bea5260139c94fa9499392fe5c6ceef413b7c3bf50093567fcfb0359e9ae01d667592d910f5e99e5f33c4dd7db11de65294f033e8845e38d959_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 41, "offset": 1514}, "start": {"col": 21, "line": 41, "offset": 1501}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 41, "offset": 1526}, "start": {"col": 35, "line": 41, "offset": 1515}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 41, "offset": 1569}, "start": {"col": 85, "line": 41, "offset": 1565}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_66b.cs", "start": {"col": 21, "line": 41, "offset": 1501}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 70, "offset": 2739}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 70, "offset": 2739}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_66b.cs", "start": {"col": 21, "line": 70, "offset": 2666}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 70, "offset": 2734}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_66b.cs", "start": {"col": 85, "line": 70, "offset": 2730}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "56f537d8d2f76bea5260139c94fa9499392fe5c6ceef413b7c3bf50093567fcfb0359e9ae01d667592d910f5e99e5f33c4dd7db11de65294f033e8845e38d959_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 70, "offset": 2679}, "start": {"col": 21, "line": 70, "offset": 2666}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 70, "offset": 2691}, "start": {"col": 35, "line": 70, "offset": 2680}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 70, "offset": 2734}, "start": {"col": 85, "line": 70, "offset": 2730}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_66b.cs", "start": {"col": 21, "line": 70, "offset": 2666}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 41, "offset": 1647}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 41, "offset": 1647}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_67b.cs", "start": {"col": 21, "line": 41, "offset": 1574}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 41, "offset": 1642}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_67b.cs", "start": {"col": 85, "line": 41, "offset": 1638}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "866993017445199d0e018de3340453bf15eeffaf8c505b41998cd5c4c0e72d27d3a97a5b6b32d107b4474afc184b4b209da688caf713a69f9a102f8b88f017f3_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 41, "offset": 1587}, "start": {"col": 21, "line": 41, "offset": 1574}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 41, "offset": 1599}, "start": {"col": 35, "line": 41, "offset": 1588}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 41, "offset": 1642}, "propagated_value": {"svalue_abstract_content": "dataContainer.containerOne", "svalue_end": {"col": 49, "line": 32, "offset": 1156}, "svalue_start": {"col": 23, "line": 32, "offset": 1130}}, "start": {"col": 85, "line": 41, "offset": 1638}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_67b.cs", "start": {"col": 21, "line": 41, "offset": 1574}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 70, "offset": 2886}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 70, "offset": 2886}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_67b.cs", "start": {"col": 21, "line": 70, "offset": 2813}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 70, "offset": 2881}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_67b.cs", "start": {"col": 85, "line": 70, "offset": 2877}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "866993017445199d0e018de3340453bf15eeffaf8c505b41998cd5c4c0e72d27d3a97a5b6b32d107b4474afc184b4b209da688caf713a69f9a102f8b88f017f3_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 70, "offset": 2826}, "start": {"col": 21, "line": 70, "offset": 2813}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 70, "offset": 2838}, "start": {"col": 35, "line": 70, "offset": 2827}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 70, "offset": 2881}, "propagated_value": {"svalue_abstract_content": "dataContainer.containerOne", "svalue_end": {"col": 49, "line": 61, "offset": 2395}, "svalue_start": {"col": 23, "line": 61, "offset": 2369}}, "start": {"col": 85, "line": 70, "offset": 2877}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_67b.cs", "start": {"col": 21, "line": 70, "offset": 2813}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 41, "offset": 1617}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 41, "offset": 1617}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_68b.cs", "start": {"col": 21, "line": 41, "offset": 1544}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 41, "offset": 1612}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_68b.cs", "start": {"col": 85, "line": 41, "offset": 1608}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "10cb0ad8bb3901e9c49506dbccfd8a005d78fbfba8ca96d6f16d1cf83481bd92e6f2e4efd272ee0c8f5603ce78291b372c32736c69a1d317f96461ab0c65edf4_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 41, "offset": 1557}, "start": {"col": 21, "line": 41, "offset": 1544}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 41, "offset": 1569}, "start": {"col": 35, "line": 41, "offset": 1558}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 41, "offset": 1612}, "propagated_value": {"svalue_abstract_content": "CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_68a.data", "svalue_end": {"col": 82, "line": 32, "offset": 1126}, "svalue_start": {"col": 23, "line": 32, "offset": 1067}}, "start": {"col": 85, "line": 41, "offset": 1608}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_68b.cs", "start": {"col": 21, "line": 41, "offset": 1544}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 70, "offset": 2808}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 70, "offset": 2808}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_68b.cs", "start": {"col": 21, "line": 70, "offset": 2735}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 70, "offset": 2803}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_68b.cs", "start": {"col": 85, "line": 70, "offset": 2799}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "10cb0ad8bb3901e9c49506dbccfd8a005d78fbfba8ca96d6f16d1cf83481bd92e6f2e4efd272ee0c8f5603ce78291b372c32736c69a1d317f96461ab0c65edf4_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 70, "offset": 2748}, "start": {"col": 21, "line": 70, "offset": 2735}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 70, "offset": 2760}, "start": {"col": 35, "line": 70, "offset": 2749}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 70, "offset": 2803}, "propagated_value": {"svalue_abstract_content": "CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_68a.data", "svalue_end": {"col": 82, "line": 61, "offset": 2317}, "svalue_start": {"col": 23, "line": 61, "offset": 2258}}, "start": {"col": 85, "line": 70, "offset": 2799}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_68b.cs", "start": {"col": 21, "line": 70, "offset": 2735}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 42, "offset": 1596}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "data", "location": {"end": {"col": 20, "line": 33, "offset": 1084}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_71b.cs", "start": {"col": 16, "line": 33, "offset": 1080}}}], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 42, "offset": 1596}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_71b.cs", "start": {"col": 21, "line": 42, "offset": 1523}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 41, "line": 33, "offset": 1105}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_71b.cs", "start": {"col": 23, "line": 33, "offset": 1087}}, "(string)dataObject"]]}, "engine_kind": "OSS", "fingerprint": "cb05352ac711ae7cec4355cb6fabcaf1d5fa027b197b98baf1f0da62f175b457d180af19361c7b977082f42a739ba3e84158be6df79a5099c4ad777be7acbf6e_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 42, "offset": 1536}, "start": {"col": 21, "line": 42, "offset": 1523}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 42, "offset": 1548}, "start": {"col": 35, "line": 42, "offset": 1537}}, "$X": {"abstract_content": "(string dataObject", "end": {"col": 41, "line": 33, "offset": 1105}, "start": {"col": 23, "line": 33, "offset": 1087}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_71b.cs", "start": {"col": 21, "line": 42, "offset": 1523}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 71, "offset": 2766}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "data", "location": {"end": {"col": 20, "line": 62, "offset": 2254}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_71b.cs", "start": {"col": 16, "line": 62, "offset": 2250}}}], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 71, "offset": 2766}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_71b.cs", "start": {"col": 21, "line": 71, "offset": 2693}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 41, "line": 62, "offset": 2275}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_71b.cs", "start": {"col": 23, "line": 62, "offset": 2257}}, "(string)dataObject"]]}, "engine_kind": "OSS", "fingerprint": "cb05352ac711ae7cec4355cb6fabcaf1d5fa027b197b98baf1f0da62f175b457d180af19361c7b977082f42a739ba3e84158be6df79a5099c4ad777be7acbf6e_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 71, "offset": 2706}, "start": {"col": 21, "line": 71, "offset": 2693}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 71, "offset": 2718}, "start": {"col": 35, "line": 71, "offset": 2707}}, "$X": {"abstract_content": "(string dataObject", "end": {"col": 41, "line": 62, "offset": 2275}, "start": {"col": 23, "line": 62, "offset": 2257}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_71b.cs", "start": {"col": 21, "line": 71, "offset": 2693}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 42, "offset": 1622}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "data", "location": {"end": {"col": 20, "line": 33, "offset": 1103}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_72b.cs", "start": {"col": 16, "line": 33, "offset": 1099}}}], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 42, "offset": 1622}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_72b.cs", "start": {"col": 21, "line": 42, "offset": 1549}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 48, "line": 33, "offset": 1131}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_72b.cs", "start": {"col": 23, "line": 33, "offset": 1106}}, "(string) dataHashtable[2]"]]}, "engine_kind": "OSS", "fingerprint": "1daf68f7813bd6f995e97dd6cdd08ef45f5e6e1092c1fa76ed0413d192751a1c6d2f92a5041ebd4413dae8b2981041d09846d42917607d951171de232ebaa933_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 42, "offset": 1562}, "start": {"col": 21, "line": 42, "offset": 1549}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 42, "offset": 1574}, "start": {"col": 35, "line": 42, "offset": 1563}}, "$X": {"abstract_content": "(string dataHashtable[[2]]", "end": {"col": 48, "line": 33, "offset": 1131}, "start": {"col": 23, "line": 33, "offset": 1106}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_72b.cs", "start": {"col": 21, "line": 42, "offset": 1549}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 71, "offset": 2805}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "data", "location": {"end": {"col": 20, "line": 62, "offset": 2286}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_72b.cs", "start": {"col": 16, "line": 62, "offset": 2282}}}], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 71, "offset": 2805}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_72b.cs", "start": {"col": 21, "line": 71, "offset": 2732}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 48, "line": 62, "offset": 2314}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_72b.cs", "start": {"col": 23, "line": 62, "offset": 2289}}, "(string) dataHashtable[2]"]]}, "engine_kind": "OSS", "fingerprint": "1daf68f7813bd6f995e97dd6cdd08ef45f5e6e1092c1fa76ed0413d192751a1c6d2f92a5041ebd4413dae8b2981041d09846d42917607d951171de232ebaa933_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 71, "offset": 2745}, "start": {"col": 21, "line": 71, "offset": 2732}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 71, "offset": 2757}, "start": {"col": 35, "line": 71, "offset": 2746}}, "$X": {"abstract_content": "(string dataHashtable[[2]]", "end": {"col": 48, "line": 62, "offset": 2314}, "start": {"col": 23, "line": 62, "offset": 2289}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_72b.cs", "start": {"col": 21, "line": 71, "offset": 2732}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 42, "offset": 1641}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 42, "offset": 1641}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_73b.cs", "start": {"col": 21, "line": 42, "offset": 1568}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 42, "offset": 1636}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_73b.cs", "start": {"col": 85, "line": 42, "offset": 1632}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "dced10d42bd24f4a9f5dc4143bc85d70ce0bdfb9bd210fe476933f5d45cba23f443b2ba6ab847266e816916901ca6a05362ab58c711ee85131300768abcf0088_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 42, "offset": 1581}, "start": {"col": 21, "line": 42, "offset": 1568}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 42, "offset": 1593}, "start": {"col": 35, "line": 42, "offset": 1582}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 42, "offset": 1636}, "propagated_value": {"svalue_abstract_content": "dataLinkedList.Last.Value", "svalue_end": {"col": 48, "line": 33, "offset": 1150}, "svalue_start": {"col": 23, "line": 33, "offset": 1125}}, "start": {"col": 85, "line": 42, "offset": 1632}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_73b.cs", "start": {"col": 21, "line": 42, "offset": 1568}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 71, "offset": 2834}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 71, "offset": 2834}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_73b.cs", "start": {"col": 21, "line": 71, "offset": 2761}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 71, "offset": 2829}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_73b.cs", "start": {"col": 85, "line": 71, "offset": 2825}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "dced10d42bd24f4a9f5dc4143bc85d70ce0bdfb9bd210fe476933f5d45cba23f443b2ba6ab847266e816916901ca6a05362ab58c711ee85131300768abcf0088_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 71, "offset": 2774}, "start": {"col": 21, "line": 71, "offset": 2761}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 71, "offset": 2786}, "start": {"col": 35, "line": 71, "offset": 2775}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 71, "offset": 2829}, "propagated_value": {"svalue_abstract_content": "dataLinkedList.Last.Value", "svalue_end": {"col": 48, "line": 62, "offset": 2343}, "svalue_start": {"col": 23, "line": 62, "offset": 2318}}, "start": {"col": 85, "line": 71, "offset": 2825}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_73b.cs", "start": {"col": 21, "line": 71, "offset": 2761}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 42, "offset": 1637}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 42, "offset": 1637}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_74b.cs", "start": {"col": 21, "line": 42, "offset": 1564}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 42, "offset": 1632}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_74b.cs", "start": {"col": 85, "line": 42, "offset": 1628}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "6d4ea39a1b7d5e5d3a3757f167b3c276943cda4c5ff72f3f0397d2995497093726c53ff1a5d46dd0bef92c49f662774fe29a60cfe501443cf5fb4b40cf54a968_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 42, "offset": 1577}, "start": {"col": 21, "line": 42, "offset": 1564}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 42, "offset": 1589}, "start": {"col": 35, "line": 42, "offset": 1578}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 42, "offset": 1632}, "start": {"col": 85, "line": 42, "offset": 1628}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_74b.cs", "start": {"col": 21, "line": 42, "offset": 1564}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 71, "offset": 2827}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 71, "offset": 2827}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_74b.cs", "start": {"col": 21, "line": 71, "offset": 2754}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 71, "offset": 2822}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_74b.cs", "start": {"col": 85, "line": 71, "offset": 2818}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "6d4ea39a1b7d5e5d3a3757f167b3c276943cda4c5ff72f3f0397d2995497093726c53ff1a5d46dd0bef92c49f662774fe29a60cfe501443cf5fb4b40cf54a968_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 71, "offset": 2767}, "start": {"col": 21, "line": 71, "offset": 2754}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 71, "offset": 2779}, "start": {"col": 35, "line": 71, "offset": 2768}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 71, "offset": 2822}, "start": {"col": 85, "line": 71, "offset": 2818}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_74b.cs", "start": {"col": 21, "line": 71, "offset": 2754}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 55, "line": 63, "offset": 2223}, "extra": {"engine_kind": "OSS", "fingerprint": "bef80d381fd5bb946f2943031c82b3a809091907a77ccb7b9eb39dc6a39bf0c1beddfe93bedc5ca361d568140ee02c33ad7c4b5ed86cf5fb0ab43a9fcfca437c_0", "is_ignored": false, "lines": "            BinaryFormatter bf = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_75a.cs", "start": {"col": 13, "line": 63, "offset": 2181}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 55, "line": 113, "offset": 4032}, "extra": {"engine_kind": "OSS", "fingerprint": "bef80d381fd5bb946f2943031c82b3a809091907a77ccb7b9eb39dc6a39bf0c1beddfe93bedc5ca361d568140ee02c33ad7c4b5ed86cf5fb0ab43a9fcfca437c_1", "is_ignored": false, "lines": "            BinaryFormatter bf = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_75a.cs", "start": {"col": 13, "line": 113, "offset": 3990}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 55, "line": 156, "offset": 5671}, "extra": {"engine_kind": "OSS", "fingerprint": "bef80d381fd5bb946f2943031c82b3a809091907a77ccb7b9eb39dc6a39bf0c1beddfe93bedc5ca361d568140ee02c33ad7c4b5ed86cf5fb0ab43a9fcfca437c_2", "is_ignored": false, "lines": "            BinaryFormatter bf = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_75a.cs", "start": {"col": 13, "line": 156, "offset": 5629}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 48, "line": 38, "offset": 1270}, "extra": {"engine_kind": "OSS", "fingerprint": "bca306715296622148253688643204d1c2615fa5b134ee51627d180747c899dad1ad1d82fbb070220ce422a64cc8d48ad0dd4443cf509c7aab61648218a90048_0", "is_ignored": false, "lines": "            var binForm = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_75b.cs", "start": {"col": 17, "line": 38, "offset": 1239}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 53, "offset": 2077}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "data", "location": {"end": {"col": 21, "line": 43, "offset": 1494}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_75b.cs", "start": {"col": 17, "line": 43, "offset": 1490}}}], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 53, "offset": 2077}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_75b.cs", "start": {"col": 25, "line": 53, "offset": 2004}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 62, "line": 43, "offset": 1535}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_75b.cs", "start": {"col": 24, "line": 43, "offset": 1497}}, "(string)binForm.Deserialize(memStream)"]]}, "engine_kind": "OSS", "fingerprint": "6c16be3ed22775ea308e77457dd5ad10dcabdb344f95f87b3d0baceb44a1d417a4019ed0df4cfb5b9a0dba459e2aea13801734a1bac63edc96a206c8cd8fd232_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 53, "offset": 2017}, "start": {"col": 25, "line": 53, "offset": 2004}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 53, "offset": 2029}, "start": {"col": 39, "line": 53, "offset": 2018}}, "$X": {"abstract_content": "(string binForm.Deserialize(memStream)", "end": {"col": 62, "line": 43, "offset": 1535}, "start": {"col": 24, "line": 43, "offset": 1497}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_75b.cs", "start": {"col": 25, "line": 53, "offset": 2004}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 48, "line": 81, "offset": 3064}, "extra": {"engine_kind": "OSS", "fingerprint": "bca306715296622148253688643204d1c2615fa5b134ee51627d180747c899dad1ad1d82fbb070220ce422a64cc8d48ad0dd4443cf509c7aab61648218a90048_1", "is_ignored": false, "lines": "            var binForm = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_75b.cs", "start": {"col": 17, "line": 81, "offset": 3033}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 96, "offset": 3871}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "data", "location": {"end": {"col": 21, "line": 86, "offset": 3288}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_75b.cs", "start": {"col": 17, "line": 86, "offset": 3284}}}], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 96, "offset": 3871}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_75b.cs", "start": {"col": 25, "line": 96, "offset": 3798}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 62, "line": 86, "offset": 3329}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_75b.cs", "start": {"col": 24, "line": 86, "offset": 3291}}, "(string)binForm.Deserialize(memStream)"]]}, "engine_kind": "OSS", "fingerprint": "6c16be3ed22775ea308e77457dd5ad10dcabdb344f95f87b3d0baceb44a1d417a4019ed0df4cfb5b9a0dba459e2aea13801734a1bac63edc96a206c8cd8fd232_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 96, "offset": 3811}, "start": {"col": 25, "line": 96, "offset": 3798}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 96, "offset": 3823}, "start": {"col": 39, "line": 96, "offset": 3812}}, "$X": {"abstract_content": "(string binForm.Deserialize(memStream)", "end": {"col": 62, "line": 86, "offset": 3329}, "start": {"col": 24, "line": 86, "offset": 3291}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_75b.cs", "start": {"col": 25, "line": 96, "offset": 3798}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 48, "line": 122, "offset": 4833}, "extra": {"engine_kind": "OSS", "fingerprint": "bca306715296622148253688643204d1c2615fa5b134ee51627d180747c899dad1ad1d82fbb070220ce422a64cc8d48ad0dd4443cf509c7aab61648218a90048_2", "is_ignored": false, "lines": "            var binForm = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_75b.cs", "start": {"col": 17, "line": 122, "offset": 4802}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 40, "offset": 1553}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 40, "offset": 1553}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_81_bad.cs", "start": {"col": 21, "line": 40, "offset": 1480}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 40, "offset": 1548}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_81_bad.cs", "start": {"col": 85, "line": 40, "offset": 1544}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "62663974106e2bbeb851e76df79414d3d5cc978a308c1bcc7605fddc4a0acc5e495af8376f054ae3288bac47814433ef30f6d582dd95204d973308fcd0f24ae9_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 40, "offset": 1493}, "start": {"col": 21, "line": 40, "offset": 1480}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 40, "offset": 1505}, "start": {"col": 35, "line": 40, "offset": 1494}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 40, "offset": 1548}, "start": {"col": 85, "line": 40, "offset": 1544}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_81_bad.cs", "start": {"col": 21, "line": 40, "offset": 1480}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 41, "offset": 1568}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 41, "offset": 1568}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_81_goodG2B.cs", "start": {"col": 21, "line": 41, "offset": 1495}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 41, "offset": 1563}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_81_goodG2B.cs", "start": {"col": 85, "line": 41, "offset": 1559}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "58b597dce5b9b152a3d4eccc430c7de7f43df4b66e61d7f8de1e754e59826bedbf4dc7c0dbe72c6df371547b6bf47bbf16e91b61175884c57e68d57eae257270_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 41, "offset": 1508}, "start": {"col": 21, "line": 41, "offset": 1495}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 41, "offset": 1520}, "start": {"col": 35, "line": 41, "offset": 1509}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 41, "offset": 1563}, "start": {"col": 85, "line": 41, "offset": 1559}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Connect_tcp_ExecuteScalar_81_goodG2B.cs", "start": {"col": 21, "line": 41, "offset": 1495}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 55, "line": 68, "offset": 2444}, "extra": {"engine_kind": "OSS", "fingerprint": "8bdf2396a4a5f5ff5d44ccdbdd65fef675229ada91dd4c7d19b0839e06f8d4cc84b87ba9eaa71950a6764091504c7e35df8823b1844dc32a0e83443ffdc24d5c_0", "is_ignored": false, "lines": "            BinaryFormatter bf = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_CommandText_75a.cs", "start": {"col": 13, "line": 68, "offset": 2402}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 55, "line": 124, "offset": 4524}, "extra": {"engine_kind": "OSS", "fingerprint": "8bdf2396a4a5f5ff5d44ccdbdd65fef675229ada91dd4c7d19b0839e06f8d4cc84b87ba9eaa71950a6764091504c7e35df8823b1844dc32a0e83443ffdc24d5c_1", "is_ignored": false, "lines": "            BinaryFormatter bf = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_CommandText_75a.cs", "start": {"col": 13, "line": 124, "offset": 4482}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 55, "line": 173, "offset": 6434}, "extra": {"engine_kind": "OSS", "fingerprint": "8bdf2396a4a5f5ff5d44ccdbdd65fef675229ada91dd4c7d19b0839e06f8d4cc84b87ba9eaa71950a6764091504c7e35df8823b1844dc32a0e83443ffdc24d5c_2", "is_ignored": false, "lines": "            BinaryFormatter bf = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_CommandText_75a.cs", "start": {"col": 13, "line": 173, "offset": 6392}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 48, "line": 38, "offset": 1242}, "extra": {"engine_kind": "OSS", "fingerprint": "bb711e08d35c973eba71a2c9f6e802a3e0d342ad74b22bc760ce3a0907e26a8b159fc457f00a05812d57265e9c4e83605c8f67ff642c2998b2512d493dcce0bd_0", "is_ignored": false, "lines": "            var binForm = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_CommandText_75b.cs", "start": {"col": 17, "line": 38, "offset": 1211}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 48, "line": 100, "offset": 3825}, "extra": {"engine_kind": "OSS", "fingerprint": "bb711e08d35c973eba71a2c9f6e802a3e0d342ad74b22bc760ce3a0907e26a8b159fc457f00a05812d57265e9c4e83605c8f67ff642c2998b2512d493dcce0bd_1", "is_ignored": false, "lines": "            var binForm = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_CommandText_75b.cs", "start": {"col": 17, "line": 100, "offset": 3794}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 48, "line": 160, "offset": 6383}, "extra": {"engine_kind": "OSS", "fingerprint": "bb711e08d35c973eba71a2c9f6e802a3e0d342ad74b22bc760ce3a0907e26a8b159fc457f00a05812d57265e9c4e83605c8f67ff642c2998b2512d493dcce0bd_2", "is_ignored": false, "lines": "            var binForm = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_CommandText_75b.cs", "start": {"col": 17, "line": 160, "offset": 6352}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 70, "offset": 2603}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 70, "offset": 2603}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_01.cs", "start": {"col": 21, "line": 70, "offset": 2504}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 70, "offset": 2598}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_01.cs", "start": {"col": 111, "line": 70, "offset": 2594}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "492cf225f15bb28bfd6c01c71acba20d6e4caf8dedc65d07e235dae2170950074751ec61191ebf2714dda4dd0b2862a0ac46be634e2f29685a4397c6d2c14971_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 70, "offset": 2517}, "start": {"col": 21, "line": 70, "offset": 2504}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 70, "offset": 2529}, "start": {"col": 35, "line": 70, "offset": 2518}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 70, "offset": 2598}, "start": {"col": 111, "line": 70, "offset": 2594}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_01.cs", "start": {"col": 21, "line": 70, "offset": 2504}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 81, "offset": 3082}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 81, "offset": 3082}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_02.cs", "start": {"col": 25, "line": 81, "offset": 2983}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 81, "offset": 3077}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_02.cs", "start": {"col": 115, "line": 81, "offset": 3073}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "1d09c9bd4f59df589d5eb60625cf2dcc0482a4205955cd366e886858896bc8e6a36116928ada76a2aee498b4f77ffab6af94c430437a02838788f46eb540f086_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 81, "offset": 2996}, "start": {"col": 25, "line": 81, "offset": 2983}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 81, "offset": 3008}, "start": {"col": 39, "line": 81, "offset": 2997}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 81, "offset": 3077}, "start": {"col": 115, "line": 81, "offset": 3073}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_02.cs", "start": {"col": 25, "line": 81, "offset": 2983}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 128, "offset": 4931}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 128, "offset": 4931}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_02.cs", "start": {"col": 25, "line": 128, "offset": 4832}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 128, "offset": 4926}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_02.cs", "start": {"col": 115, "line": 128, "offset": 4922}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "1d09c9bd4f59df589d5eb60625cf2dcc0482a4205955cd366e886858896bc8e6a36116928ada76a2aee498b4f77ffab6af94c430437a02838788f46eb540f086_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 128, "offset": 4845}, "start": {"col": 25, "line": 128, "offset": 4832}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 128, "offset": 4857}, "start": {"col": 39, "line": 128, "offset": 4846}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 128, "offset": 4926}, "start": {"col": 115, "line": 128, "offset": 4922}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_02.cs", "start": {"col": 25, "line": 128, "offset": 4832}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 174, "offset": 6750}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 174, "offset": 6750}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_02.cs", "start": {"col": 25, "line": 174, "offset": 6651}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 174, "offset": 6745}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_02.cs", "start": {"col": 115, "line": 174, "offset": 6741}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "1d09c9bd4f59df589d5eb60625cf2dcc0482a4205955cd366e886858896bc8e6a36116928ada76a2aee498b4f77ffab6af94c430437a02838788f46eb540f086_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 174, "offset": 6664}, "start": {"col": 25, "line": 174, "offset": 6651}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 174, "offset": 6676}, "start": {"col": 39, "line": 174, "offset": 6665}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 174, "offset": 6745}, "start": {"col": 115, "line": 174, "offset": 6741}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_02.cs", "start": {"col": 25, "line": 174, "offset": 6651}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 81, "offset": 3081}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 81, "offset": 3081}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_03.cs", "start": {"col": 25, "line": 81, "offset": 2982}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 81, "offset": 3076}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_03.cs", "start": {"col": 115, "line": 81, "offset": 3072}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "a93e3faff7539d9adfe241bce596ac58ea70b1316d1aeb65249d9e7eb01f391fc5a6ee5857ea32f84c2e5a278a539da6454599bb7642c08845239ed4813a8800_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 81, "offset": 2995}, "start": {"col": 25, "line": 81, "offset": 2982}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 81, "offset": 3007}, "start": {"col": 39, "line": 81, "offset": 2996}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 81, "offset": 3076}, "start": {"col": 115, "line": 81, "offset": 3072}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_03.cs", "start": {"col": 25, "line": 81, "offset": 2982}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 128, "offset": 4928}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 128, "offset": 4928}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_03.cs", "start": {"col": 25, "line": 128, "offset": 4829}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 128, "offset": 4923}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_03.cs", "start": {"col": 115, "line": 128, "offset": 4919}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "a93e3faff7539d9adfe241bce596ac58ea70b1316d1aeb65249d9e7eb01f391fc5a6ee5857ea32f84c2e5a278a539da6454599bb7642c08845239ed4813a8800_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 128, "offset": 4842}, "start": {"col": 25, "line": 128, "offset": 4829}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 128, "offset": 4854}, "start": {"col": 39, "line": 128, "offset": 4843}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 128, "offset": 4923}, "start": {"col": 115, "line": 128, "offset": 4919}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_03.cs", "start": {"col": 25, "line": 128, "offset": 4829}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 174, "offset": 6747}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 174, "offset": 6747}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_03.cs", "start": {"col": 25, "line": 174, "offset": 6648}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 174, "offset": 6742}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_03.cs", "start": {"col": 115, "line": 174, "offset": 6738}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "a93e3faff7539d9adfe241bce596ac58ea70b1316d1aeb65249d9e7eb01f391fc5a6ee5857ea32f84c2e5a278a539da6454599bb7642c08845239ed4813a8800_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 174, "offset": 6661}, "start": {"col": 25, "line": 174, "offset": 6648}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 174, "offset": 6673}, "start": {"col": 39, "line": 174, "offset": 6662}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 174, "offset": 6742}, "start": {"col": 115, "line": 174, "offset": 6738}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_03.cs", "start": {"col": 25, "line": 174, "offset": 6648}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 88, "offset": 3425}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 88, "offset": 3425}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_04.cs", "start": {"col": 25, "line": 88, "offset": 3326}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 88, "offset": 3420}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_04.cs", "start": {"col": 115, "line": 88, "offset": 3416}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "944d9ba350764af22c3b1882433d277d45e260cb582a87c3c563638353f1562f3dc5f572d5ffba2bbd4ab30abd5cc8efcc9328910c8abb91eec10d61b64bec5a_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 88, "offset": 3339}, "start": {"col": 25, "line": 88, "offset": 3326}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 88, "offset": 3351}, "start": {"col": 39, "line": 88, "offset": 3340}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 88, "offset": 3420}, "start": {"col": 115, "line": 88, "offset": 3416}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_04.cs", "start": {"col": 25, "line": 88, "offset": 3326}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 135, "offset": 5330}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 135, "offset": 5330}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_04.cs", "start": {"col": 25, "line": 135, "offset": 5231}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 135, "offset": 5325}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_04.cs", "start": {"col": 115, "line": 135, "offset": 5321}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "944d9ba350764af22c3b1882433d277d45e260cb582a87c3c563638353f1562f3dc5f572d5ffba2bbd4ab30abd5cc8efcc9328910c8abb91eec10d61b64bec5a_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 135, "offset": 5244}, "start": {"col": 25, "line": 135, "offset": 5231}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 135, "offset": 5256}, "start": {"col": 39, "line": 135, "offset": 5245}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 135, "offset": 5325}, "start": {"col": 115, "line": 135, "offset": 5321}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_04.cs", "start": {"col": 25, "line": 135, "offset": 5231}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 181, "offset": 7177}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 181, "offset": 7177}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_04.cs", "start": {"col": 25, "line": 181, "offset": 7078}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 181, "offset": 7172}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_04.cs", "start": {"col": 115, "line": 181, "offset": 7168}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "944d9ba350764af22c3b1882433d277d45e260cb582a87c3c563638353f1562f3dc5f572d5ffba2bbd4ab30abd5cc8efcc9328910c8abb91eec10d61b64bec5a_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 181, "offset": 7091}, "start": {"col": 25, "line": 181, "offset": 7078}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 181, "offset": 7103}, "start": {"col": 39, "line": 181, "offset": 7092}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 181, "offset": 7172}, "start": {"col": 115, "line": 181, "offset": 7168}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_04.cs", "start": {"col": 25, "line": 181, "offset": 7078}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 87, "offset": 3418}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 87, "offset": 3418}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_05.cs", "start": {"col": 25, "line": 87, "offset": 3319}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 87, "offset": 3413}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_05.cs", "start": {"col": 115, "line": 87, "offset": 3409}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "1da8a62cbcfada16588eec68db8192cc8a3ef9cca4812d29fe6295a97a80d433ca37cd0d3eef4deab060a23886e5a29a00a2a9cb873a7fec10c0a2ec234357e0_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 87, "offset": 3332}, "start": {"col": 25, "line": 87, "offset": 3319}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 87, "offset": 3344}, "start": {"col": 39, "line": 87, "offset": 3333}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 87, "offset": 3413}, "start": {"col": 115, "line": 87, "offset": 3409}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_05.cs", "start": {"col": 25, "line": 87, "offset": 3319}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 134, "offset": 5295}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 134, "offset": 5295}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_05.cs", "start": {"col": 25, "line": 134, "offset": 5196}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 134, "offset": 5290}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_05.cs", "start": {"col": 115, "line": 134, "offset": 5286}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "1da8a62cbcfada16588eec68db8192cc8a3ef9cca4812d29fe6295a97a80d433ca37cd0d3eef4deab060a23886e5a29a00a2a9cb873a7fec10c0a2ec234357e0_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 134, "offset": 5209}, "start": {"col": 25, "line": 134, "offset": 5196}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 134, "offset": 5221}, "start": {"col": 39, "line": 134, "offset": 5210}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 134, "offset": 5290}, "start": {"col": 115, "line": 134, "offset": 5286}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_05.cs", "start": {"col": 25, "line": 134, "offset": 5196}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 180, "offset": 7128}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 180, "offset": 7128}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_05.cs", "start": {"col": 25, "line": 180, "offset": 7029}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 180, "offset": 7123}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_05.cs", "start": {"col": 115, "line": 180, "offset": 7119}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "1da8a62cbcfada16588eec68db8192cc8a3ef9cca4812d29fe6295a97a80d433ca37cd0d3eef4deab060a23886e5a29a00a2a9cb873a7fec10c0a2ec234357e0_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 180, "offset": 7042}, "start": {"col": 25, "line": 180, "offset": 7029}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 180, "offset": 7054}, "start": {"col": 39, "line": 180, "offset": 7043}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 180, "offset": 7123}, "start": {"col": 115, "line": 180, "offset": 7119}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_05.cs", "start": {"col": 25, "line": 180, "offset": 7029}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 86, "offset": 3361}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 86, "offset": 3361}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_06.cs", "start": {"col": 25, "line": 86, "offset": 3262}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 86, "offset": 3356}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_06.cs", "start": {"col": 115, "line": 86, "offset": 3352}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "007200964660b29847e0d193d3a3d00fa958fe18efaf77e1032273dbd91b0893b8a86f42d4a00aae507d7df9f04d1f66d716a41509cd37d547ad3908a6f321f9_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 86, "offset": 3275}, "start": {"col": 25, "line": 86, "offset": 3262}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 86, "offset": 3287}, "start": {"col": 39, "line": 86, "offset": 3276}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 86, "offset": 3356}, "start": {"col": 115, "line": 86, "offset": 3352}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_06.cs", "start": {"col": 25, "line": 86, "offset": 3262}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 133, "offset": 5276}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 133, "offset": 5276}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_06.cs", "start": {"col": 25, "line": 133, "offset": 5177}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 133, "offset": 5271}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_06.cs", "start": {"col": 115, "line": 133, "offset": 5267}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "007200964660b29847e0d193d3a3d00fa958fe18efaf77e1032273dbd91b0893b8a86f42d4a00aae507d7df9f04d1f66d716a41509cd37d547ad3908a6f321f9_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 133, "offset": 5190}, "start": {"col": 25, "line": 133, "offset": 5177}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 133, "offset": 5202}, "start": {"col": 39, "line": 133, "offset": 5191}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 133, "offset": 5271}, "start": {"col": 115, "line": 133, "offset": 5267}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_06.cs", "start": {"col": 25, "line": 133, "offset": 5177}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 179, "offset": 7129}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 179, "offset": 7129}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_06.cs", "start": {"col": 25, "line": 179, "offset": 7030}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 179, "offset": 7124}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_06.cs", "start": {"col": 115, "line": 179, "offset": 7120}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "007200964660b29847e0d193d3a3d00fa958fe18efaf77e1032273dbd91b0893b8a86f42d4a00aae507d7df9f04d1f66d716a41509cd37d547ad3908a6f321f9_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 179, "offset": 7043}, "start": {"col": 25, "line": 179, "offset": 7030}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 179, "offset": 7055}, "start": {"col": 39, "line": 179, "offset": 7044}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 179, "offset": 7124}, "start": {"col": 115, "line": 179, "offset": 7120}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_06.cs", "start": {"col": 25, "line": 179, "offset": 7030}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 86, "offset": 3365}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 86, "offset": 3365}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_07.cs", "start": {"col": 25, "line": 86, "offset": 3266}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 86, "offset": 3360}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_07.cs", "start": {"col": 115, "line": 86, "offset": 3356}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "a69e7a653359a4e4be9eac72beccc95f1a510c843c85a744ddade948ecc9c31f0f3908a211b14680cc923abfe8cc23f205ecc593db386da9e19aeef0b7bd6b7c_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 86, "offset": 3279}, "start": {"col": 25, "line": 86, "offset": 3266}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 86, "offset": 3291}, "start": {"col": 39, "line": 86, "offset": 3280}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 86, "offset": 3360}, "start": {"col": 115, "line": 86, "offset": 3356}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_07.cs", "start": {"col": 25, "line": 86, "offset": 3266}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 133, "offset": 5252}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 133, "offset": 5252}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_07.cs", "start": {"col": 25, "line": 133, "offset": 5153}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 133, "offset": 5247}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_07.cs", "start": {"col": 115, "line": 133, "offset": 5243}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "a69e7a653359a4e4be9eac72beccc95f1a510c843c85a744ddade948ecc9c31f0f3908a211b14680cc923abfe8cc23f205ecc593db386da9e19aeef0b7bd6b7c_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 133, "offset": 5166}, "start": {"col": 25, "line": 133, "offset": 5153}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 133, "offset": 5178}, "start": {"col": 39, "line": 133, "offset": 5167}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 133, "offset": 5247}, "start": {"col": 115, "line": 133, "offset": 5243}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_07.cs", "start": {"col": 25, "line": 133, "offset": 5153}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 179, "offset": 7091}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 179, "offset": 7091}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_07.cs", "start": {"col": 25, "line": 179, "offset": 6992}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 179, "offset": 7086}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_07.cs", "start": {"col": 115, "line": 179, "offset": 7082}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "a69e7a653359a4e4be9eac72beccc95f1a510c843c85a744ddade948ecc9c31f0f3908a211b14680cc923abfe8cc23f205ecc593db386da9e19aeef0b7bd6b7c_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 179, "offset": 7005}, "start": {"col": 25, "line": 179, "offset": 6992}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 179, "offset": 7017}, "start": {"col": 39, "line": 179, "offset": 7006}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 179, "offset": 7086}, "start": {"col": 115, "line": 179, "offset": 7082}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_07.cs", "start": {"col": 25, "line": 179, "offset": 6992}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 94, "offset": 3497}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 94, "offset": 3497}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_08.cs", "start": {"col": 25, "line": 94, "offset": 3398}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 94, "offset": 3492}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_08.cs", "start": {"col": 115, "line": 94, "offset": 3488}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "ea04d95d49079c2212e39fe9dae35520f7cda468d4bede6e16929a26952d777d89283f0c824ff25020a4c6a31c72a95d1b133d9af8182e2870f34f3c6570b1fa_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 94, "offset": 3411}, "start": {"col": 25, "line": 94, "offset": 3398}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 94, "offset": 3423}, "start": {"col": 39, "line": 94, "offset": 3412}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 94, "offset": 3492}, "start": {"col": 115, "line": 94, "offset": 3488}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_08.cs", "start": {"col": 25, "line": 94, "offset": 3398}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 141, "offset": 5410}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 141, "offset": 5410}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_08.cs", "start": {"col": 25, "line": 141, "offset": 5311}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 141, "offset": 5405}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_08.cs", "start": {"col": 115, "line": 141, "offset": 5401}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "ea04d95d49079c2212e39fe9dae35520f7cda468d4bede6e16929a26952d777d89283f0c824ff25020a4c6a31c72a95d1b133d9af8182e2870f34f3c6570b1fa_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 141, "offset": 5324}, "start": {"col": 25, "line": 141, "offset": 5311}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 141, "offset": 5336}, "start": {"col": 39, "line": 141, "offset": 5325}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 141, "offset": 5405}, "start": {"col": 115, "line": 141, "offset": 5401}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_08.cs", "start": {"col": 25, "line": 141, "offset": 5311}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 187, "offset": 7261}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 187, "offset": 7261}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_08.cs", "start": {"col": 25, "line": 187, "offset": 7162}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 187, "offset": 7256}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_08.cs", "start": {"col": 115, "line": 187, "offset": 7252}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "ea04d95d49079c2212e39fe9dae35520f7cda468d4bede6e16929a26952d777d89283f0c824ff25020a4c6a31c72a95d1b133d9af8182e2870f34f3c6570b1fa_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 187, "offset": 7175}, "start": {"col": 25, "line": 187, "offset": 7162}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 187, "offset": 7187}, "start": {"col": 39, "line": 187, "offset": 7176}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 187, "offset": 7256}, "start": {"col": 115, "line": 187, "offset": 7252}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_08.cs", "start": {"col": 25, "line": 187, "offset": 7162}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 81, "offset": 3158}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 81, "offset": 3158}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_09.cs", "start": {"col": 25, "line": 81, "offset": 3059}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 81, "offset": 3153}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_09.cs", "start": {"col": 115, "line": 81, "offset": 3149}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "3402a66db055d33b67fdf9c59def63f74732a3530129cc71b826d4cc571b1904acea9309c17ab9ce4d20144183ea27e01e1cf10bb985f39a7a5468f13f495132_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 81, "offset": 3072}, "start": {"col": 25, "line": 81, "offset": 3059}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 81, "offset": 3084}, "start": {"col": 39, "line": 81, "offset": 3073}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 81, "offset": 3153}, "start": {"col": 115, "line": 81, "offset": 3149}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_09.cs", "start": {"col": 25, "line": 81, "offset": 3059}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 128, "offset": 5083}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 128, "offset": 5083}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_09.cs", "start": {"col": 25, "line": 128, "offset": 4984}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 128, "offset": 5078}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_09.cs", "start": {"col": 115, "line": 128, "offset": 5074}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "3402a66db055d33b67fdf9c59def63f74732a3530129cc71b826d4cc571b1904acea9309c17ab9ce4d20144183ea27e01e1cf10bb985f39a7a5468f13f495132_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 128, "offset": 4997}, "start": {"col": 25, "line": 128, "offset": 4984}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 128, "offset": 5009}, "start": {"col": 39, "line": 128, "offset": 4998}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 128, "offset": 5078}, "start": {"col": 115, "line": 128, "offset": 5074}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_09.cs", "start": {"col": 25, "line": 128, "offset": 4984}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 174, "offset": 6940}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 174, "offset": 6940}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_09.cs", "start": {"col": 25, "line": 174, "offset": 6841}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 174, "offset": 6935}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_09.cs", "start": {"col": 115, "line": 174, "offset": 6931}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "3402a66db055d33b67fdf9c59def63f74732a3530129cc71b826d4cc571b1904acea9309c17ab9ce4d20144183ea27e01e1cf10bb985f39a7a5468f13f495132_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 174, "offset": 6854}, "start": {"col": 25, "line": 174, "offset": 6841}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 174, "offset": 6866}, "start": {"col": 39, "line": 174, "offset": 6855}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 174, "offset": 6935}, "start": {"col": 115, "line": 174, "offset": 6931}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_09.cs", "start": {"col": 25, "line": 174, "offset": 6841}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 81, "offset": 3118}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 81, "offset": 3118}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_10.cs", "start": {"col": 25, "line": 81, "offset": 3019}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 81, "offset": 3113}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_10.cs", "start": {"col": 115, "line": 81, "offset": 3109}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "160874a01e918261c3faca7e6393e8c30fd3420c7a0368466d713f30e8569fa66e1ba88f44a99d1152c8d793393c521922949f6deab01d432cbf7703a2eb4d69_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 81, "offset": 3032}, "start": {"col": 25, "line": 81, "offset": 3019}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 81, "offset": 3044}, "start": {"col": 39, "line": 81, "offset": 3033}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 81, "offset": 3113}, "start": {"col": 115, "line": 81, "offset": 3109}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_10.cs", "start": {"col": 25, "line": 81, "offset": 3019}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 128, "offset": 5003}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 128, "offset": 5003}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_10.cs", "start": {"col": 25, "line": 128, "offset": 4904}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 128, "offset": 4998}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_10.cs", "start": {"col": 115, "line": 128, "offset": 4994}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "160874a01e918261c3faca7e6393e8c30fd3420c7a0368466d713f30e8569fa66e1ba88f44a99d1152c8d793393c521922949f6deab01d432cbf7703a2eb4d69_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 128, "offset": 4917}, "start": {"col": 25, "line": 128, "offset": 4904}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 128, "offset": 4929}, "start": {"col": 39, "line": 128, "offset": 4918}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 128, "offset": 4998}, "start": {"col": 115, "line": 128, "offset": 4994}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_10.cs", "start": {"col": 25, "line": 128, "offset": 4904}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 174, "offset": 6840}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 174, "offset": 6840}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_10.cs", "start": {"col": 25, "line": 174, "offset": 6741}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 174, "offset": 6835}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_10.cs", "start": {"col": 115, "line": 174, "offset": 6831}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "160874a01e918261c3faca7e6393e8c30fd3420c7a0368466d713f30e8569fa66e1ba88f44a99d1152c8d793393c521922949f6deab01d432cbf7703a2eb4d69_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 174, "offset": 6754}, "start": {"col": 25, "line": 174, "offset": 6741}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 174, "offset": 6766}, "start": {"col": 39, "line": 174, "offset": 6755}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 174, "offset": 6835}, "start": {"col": 115, "line": 174, "offset": 6831}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_10.cs", "start": {"col": 25, "line": 174, "offset": 6741}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 81, "offset": 3153}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 81, "offset": 3153}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_11.cs", "start": {"col": 25, "line": 81, "offset": 3054}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 81, "offset": 3148}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_11.cs", "start": {"col": 115, "line": 81, "offset": 3144}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "7f1565a359f573aa57d42b8ea2c2e474e433954945eb5bb79446236a35f9471c1b835e74cc907b2a0af5cb698787be05a99179aafc2a75c94bc4ac7cd551d3fd_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 81, "offset": 3067}, "start": {"col": 25, "line": 81, "offset": 3054}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 81, "offset": 3079}, "start": {"col": 39, "line": 81, "offset": 3068}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 81, "offset": 3148}, "start": {"col": 115, "line": 81, "offset": 3144}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_11.cs", "start": {"col": 25, "line": 81, "offset": 3054}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 128, "offset": 5074}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 128, "offset": 5074}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_11.cs", "start": {"col": 25, "line": 128, "offset": 4975}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 128, "offset": 5069}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_11.cs", "start": {"col": 115, "line": 128, "offset": 5065}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "7f1565a359f573aa57d42b8ea2c2e474e433954945eb5bb79446236a35f9471c1b835e74cc907b2a0af5cb698787be05a99179aafc2a75c94bc4ac7cd551d3fd_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 128, "offset": 4988}, "start": {"col": 25, "line": 128, "offset": 4975}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 128, "offset": 5000}, "start": {"col": 39, "line": 128, "offset": 4989}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 128, "offset": 5069}, "start": {"col": 115, "line": 128, "offset": 5065}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_11.cs", "start": {"col": 25, "line": 128, "offset": 4975}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 174, "offset": 6929}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 174, "offset": 6929}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_11.cs", "start": {"col": 25, "line": 174, "offset": 6830}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 174, "offset": 6924}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_11.cs", "start": {"col": 115, "line": 174, "offset": 6920}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "7f1565a359f573aa57d42b8ea2c2e474e433954945eb5bb79446236a35f9471c1b835e74cc907b2a0af5cb698787be05a99179aafc2a75c94bc4ac7cd551d3fd_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 174, "offset": 6843}, "start": {"col": 25, "line": 174, "offset": 6830}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 174, "offset": 6855}, "start": {"col": 39, "line": 174, "offset": 6844}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 174, "offset": 6924}, "start": {"col": 115, "line": 174, "offset": 6920}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_11.cs", "start": {"col": 25, "line": 174, "offset": 6830}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 80, "offset": 3019}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 80, "offset": 3019}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_12.cs", "start": {"col": 25, "line": 80, "offset": 2920}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 80, "offset": 3014}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_12.cs", "start": {"col": 115, "line": 80, "offset": 3010}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "853cc07629434d496821cf6a11d3c12dec6c72b6ad7849914bfe499918c96e50e8549aca6176b8e18fffff0b8abdc7b21f0484e03ff3fe86228f9e5407d7548a_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 80, "offset": 2933}, "start": {"col": 25, "line": 80, "offset": 2920}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 80, "offset": 2945}, "start": {"col": 39, "line": 80, "offset": 2934}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 80, "offset": 3014}, "start": {"col": 115, "line": 80, "offset": 3010}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_12.cs", "start": {"col": 25, "line": 80, "offset": 2920}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 81, "offset": 3169}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 81, "offset": 3169}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_13.cs", "start": {"col": 25, "line": 81, "offset": 3070}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 81, "offset": 3164}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_13.cs", "start": {"col": 115, "line": 81, "offset": 3160}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "e6f768a2ce383f7fde7ed72468d14706fe5a66a6a080fc11bad2e1916de3609cb2cb8ab71387a78a9b73a0aee895e1d0cec25ace5db60f7d316f074bad716d35_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 81, "offset": 3083}, "start": {"col": 25, "line": 81, "offset": 3070}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 81, "offset": 3095}, "start": {"col": 39, "line": 81, "offset": 3084}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 81, "offset": 3164}, "start": {"col": 115, "line": 81, "offset": 3160}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_13.cs", "start": {"col": 25, "line": 81, "offset": 3070}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 128, "offset": 5104}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 128, "offset": 5104}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_13.cs", "start": {"col": 25, "line": 128, "offset": 5005}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 128, "offset": 5099}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_13.cs", "start": {"col": 115, "line": 128, "offset": 5095}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "e6f768a2ce383f7fde7ed72468d14706fe5a66a6a080fc11bad2e1916de3609cb2cb8ab71387a78a9b73a0aee895e1d0cec25ace5db60f7d316f074bad716d35_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 128, "offset": 5018}, "start": {"col": 25, "line": 128, "offset": 5005}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 128, "offset": 5030}, "start": {"col": 39, "line": 128, "offset": 5019}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 128, "offset": 5099}, "start": {"col": 115, "line": 128, "offset": 5095}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_13.cs", "start": {"col": 25, "line": 128, "offset": 5005}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 174, "offset": 6967}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 174, "offset": 6967}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_13.cs", "start": {"col": 25, "line": 174, "offset": 6868}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 174, "offset": 6962}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_13.cs", "start": {"col": 115, "line": 174, "offset": 6958}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "e6f768a2ce383f7fde7ed72468d14706fe5a66a6a080fc11bad2e1916de3609cb2cb8ab71387a78a9b73a0aee895e1d0cec25ace5db60f7d316f074bad716d35_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 174, "offset": 6881}, "start": {"col": 25, "line": 174, "offset": 6868}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 174, "offset": 6893}, "start": {"col": 39, "line": 174, "offset": 6882}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 174, "offset": 6962}, "start": {"col": 115, "line": 174, "offset": 6958}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_13.cs", "start": {"col": 25, "line": 174, "offset": 6868}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 81, "offset": 3129}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 81, "offset": 3129}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_14.cs", "start": {"col": 25, "line": 81, "offset": 3030}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 81, "offset": 3124}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_14.cs", "start": {"col": 115, "line": 81, "offset": 3120}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "a9c0015fe0919d7a876bf7f1f6a2168cdfc15dab15eadfc2efd9f4a13ae7af98932d5f2cbe0375b193a5f53efe5e77df80b149a6fc522ee792eccae1d1aee2a6_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 81, "offset": 3043}, "start": {"col": 25, "line": 81, "offset": 3030}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 81, "offset": 3055}, "start": {"col": 39, "line": 81, "offset": 3044}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 81, "offset": 3124}, "start": {"col": 115, "line": 81, "offset": 3120}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_14.cs", "start": {"col": 25, "line": 81, "offset": 3030}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 128, "offset": 5024}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 128, "offset": 5024}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_14.cs", "start": {"col": 25, "line": 128, "offset": 4925}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 128, "offset": 5019}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_14.cs", "start": {"col": 115, "line": 128, "offset": 5015}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "a9c0015fe0919d7a876bf7f1f6a2168cdfc15dab15eadfc2efd9f4a13ae7af98932d5f2cbe0375b193a5f53efe5e77df80b149a6fc522ee792eccae1d1aee2a6_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 128, "offset": 4938}, "start": {"col": 25, "line": 128, "offset": 4925}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 128, "offset": 4950}, "start": {"col": 39, "line": 128, "offset": 4939}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 128, "offset": 5019}, "start": {"col": 115, "line": 128, "offset": 5015}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_14.cs", "start": {"col": 25, "line": 128, "offset": 4925}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 174, "offset": 6867}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 174, "offset": 6867}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_14.cs", "start": {"col": 25, "line": 174, "offset": 6768}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 174, "offset": 6862}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_14.cs", "start": {"col": 115, "line": 174, "offset": 6858}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "a9c0015fe0919d7a876bf7f1f6a2168cdfc15dab15eadfc2efd9f4a13ae7af98932d5f2cbe0375b193a5f53efe5e77df80b149a6fc522ee792eccae1d1aee2a6_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 174, "offset": 6781}, "start": {"col": 25, "line": 174, "offset": 6768}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 174, "offset": 6793}, "start": {"col": 39, "line": 174, "offset": 6782}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 174, "offset": 6862}, "start": {"col": 115, "line": 174, "offset": 6858}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_14.cs", "start": {"col": 25, "line": 174, "offset": 6768}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 83, "offset": 3141}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 83, "offset": 3141}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_15.cs", "start": {"col": 25, "line": 83, "offset": 3042}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 83, "offset": 3136}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_15.cs", "start": {"col": 115, "line": 83, "offset": 3132}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "99cf9822989ccaa330d82467970abd5fdca127e4aa81258ce3269414fb75a1c6a37e94ba64050fa79f8b7389cc5f47076ce729517d3c681da0f5db27808f6602_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 83, "offset": 3055}, "start": {"col": 25, "line": 83, "offset": 3042}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 83, "offset": 3067}, "start": {"col": 39, "line": 83, "offset": 3056}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 83, "offset": 3136}, "start": {"col": 115, "line": 83, "offset": 3132}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_15.cs", "start": {"col": 25, "line": 83, "offset": 3042}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 137, "offset": 5246}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 137, "offset": 5246}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_15.cs", "start": {"col": 25, "line": 137, "offset": 5147}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 137, "offset": 5241}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_15.cs", "start": {"col": 115, "line": 137, "offset": 5237}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "99cf9822989ccaa330d82467970abd5fdca127e4aa81258ce3269414fb75a1c6a37e94ba64050fa79f8b7389cc5f47076ce729517d3c681da0f5db27808f6602_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 137, "offset": 5160}, "start": {"col": 25, "line": 137, "offset": 5147}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 137, "offset": 5172}, "start": {"col": 39, "line": 137, "offset": 5161}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 137, "offset": 5241}, "start": {"col": 115, "line": 137, "offset": 5237}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_15.cs", "start": {"col": 25, "line": 137, "offset": 5147}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 190, "offset": 7321}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 190, "offset": 7321}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_15.cs", "start": {"col": 25, "line": 190, "offset": 7222}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 190, "offset": 7316}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_15.cs", "start": {"col": 115, "line": 190, "offset": 7312}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "99cf9822989ccaa330d82467970abd5fdca127e4aa81258ce3269414fb75a1c6a37e94ba64050fa79f8b7389cc5f47076ce729517d3c681da0f5db27808f6602_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 190, "offset": 7235}, "start": {"col": 25, "line": 190, "offset": 7222}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 190, "offset": 7247}, "start": {"col": 39, "line": 190, "offset": 7236}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 190, "offset": 7316}, "start": {"col": 115, "line": 190, "offset": 7312}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_15.cs", "start": {"col": 25, "line": 190, "offset": 7222}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 76, "offset": 2865}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 76, "offset": 2865}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_16.cs", "start": {"col": 25, "line": 76, "offset": 2766}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 76, "offset": 2860}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_16.cs", "start": {"col": 115, "line": 76, "offset": 2856}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "adee763373621108a48c1bf80875620657ef7bc7e9e3258056fecf8ac90645ab917e279986475b68283ca4cf4eeafbdabf7f4ac95ed33025dc7851753d2caf3c_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 76, "offset": 2779}, "start": {"col": 25, "line": 76, "offset": 2766}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 76, "offset": 2791}, "start": {"col": 39, "line": 76, "offset": 2780}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 76, "offset": 2860}, "start": {"col": 115, "line": 76, "offset": 2856}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_16.cs", "start": {"col": 25, "line": 76, "offset": 2766}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 119, "offset": 4493}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 119, "offset": 4493}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_16.cs", "start": {"col": 25, "line": 119, "offset": 4394}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 119, "offset": 4488}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_16.cs", "start": {"col": 115, "line": 119, "offset": 4484}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "adee763373621108a48c1bf80875620657ef7bc7e9e3258056fecf8ac90645ab917e279986475b68283ca4cf4eeafbdabf7f4ac95ed33025dc7851753d2caf3c_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 119, "offset": 4407}, "start": {"col": 25, "line": 119, "offset": 4394}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 119, "offset": 4419}, "start": {"col": 39, "line": 119, "offset": 4408}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 119, "offset": 4488}, "start": {"col": 115, "line": 119, "offset": 4484}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_16.cs", "start": {"col": 25, "line": 119, "offset": 4394}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 76, "offset": 2892}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 76, "offset": 2892}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_17.cs", "start": {"col": 25, "line": 76, "offset": 2793}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 76, "offset": 2887}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_17.cs", "start": {"col": 115, "line": 76, "offset": 2883}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "ec40e1e7764e44bd9018cc2fcead4d96848c2edea8ca7975a7db926ffd75c0087460b758723c809cfc9d40ea525ded0af65e84cdd5b3cd26d2432c30ab484e54_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 76, "offset": 2806}, "start": {"col": 25, "line": 76, "offset": 2793}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 76, "offset": 2818}, "start": {"col": 39, "line": 76, "offset": 2807}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 76, "offset": 2887}, "start": {"col": 115, "line": 76, "offset": 2883}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_17.cs", "start": {"col": 25, "line": 76, "offset": 2793}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 114, "offset": 4443}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 114, "offset": 4443}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_17.cs", "start": {"col": 25, "line": 114, "offset": 4344}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 114, "offset": 4438}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_17.cs", "start": {"col": 115, "line": 114, "offset": 4434}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "ec40e1e7764e44bd9018cc2fcead4d96848c2edea8ca7975a7db926ffd75c0087460b758723c809cfc9d40ea525ded0af65e84cdd5b3cd26d2432c30ab484e54_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 114, "offset": 4357}, "start": {"col": 25, "line": 114, "offset": 4344}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 114, "offset": 4369}, "start": {"col": 39, "line": 114, "offset": 4358}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 114, "offset": 4438}, "start": {"col": 115, "line": 114, "offset": 4434}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_17.cs", "start": {"col": 25, "line": 114, "offset": 4344}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 81, "offset": 3056}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 81, "offset": 3056}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_21.cs", "start": {"col": 25, "line": 81, "offset": 2957}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 81, "offset": 3051}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_21.cs", "start": {"col": 115, "line": 81, "offset": 3047}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "ac33c9cda09a2d0c922186d0f36d629c05ffdae5540185c7b71ce548154dbb4455fa6f28e7c12987072ff9fadf2168da4cf1c45759be7ca9494167ff4f4560d9_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 81, "offset": 2970}, "start": {"col": 25, "line": 81, "offset": 2957}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 81, "offset": 2982}, "start": {"col": 39, "line": 81, "offset": 2971}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 81, "offset": 3051}, "start": {"col": 115, "line": 81, "offset": 3047}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_21.cs", "start": {"col": 25, "line": 81, "offset": 2957}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 285, "offset": 11304}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 285, "offset": 11304}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_21.cs", "start": {"col": 25, "line": 285, "offset": 11205}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 285, "offset": 11299}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_21.cs", "start": {"col": 115, "line": 285, "offset": 11295}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "ac33c9cda09a2d0c922186d0f36d629c05ffdae5540185c7b71ce548154dbb4455fa6f28e7c12987072ff9fadf2168da4cf1c45759be7ca9494167ff4f4560d9_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 285, "offset": 11218}, "start": {"col": 25, "line": 285, "offset": 11205}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 285, "offset": 11230}, "start": {"col": 39, "line": 285, "offset": 11219}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 285, "offset": 11299}, "start": {"col": 115, "line": 285, "offset": 11295}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_21.cs", "start": {"col": 25, "line": 285, "offset": 11205}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 43, "offset": 1716}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 43, "offset": 1716}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_22b.cs", "start": {"col": 25, "line": 43, "offset": 1617}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 43, "offset": 1711}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_22b.cs", "start": {"col": 115, "line": 43, "offset": 1707}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "0ff7d9158132903515c981f8e643b1dfe369efa5859a370d44f4da32f69db4f862aebadd21d1669351264ecdcb7691958ad789d973b84a813b1098c12c710b3a_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 43, "offset": 1630}, "start": {"col": 25, "line": 43, "offset": 1617}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 43, "offset": 1642}, "start": {"col": 39, "line": 43, "offset": 1631}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 43, "offset": 1711}, "start": {"col": 115, "line": 43, "offset": 1707}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_22b.cs", "start": {"col": 25, "line": 43, "offset": 1617}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 173, "offset": 7481}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 173, "offset": 7481}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_22b.cs", "start": {"col": 25, "line": 173, "offset": 7382}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 173, "offset": 7476}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_22b.cs", "start": {"col": 115, "line": 173, "offset": 7472}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "0ff7d9158132903515c981f8e643b1dfe369efa5859a370d44f4da32f69db4f862aebadd21d1669351264ecdcb7691958ad789d973b84a813b1098c12c710b3a_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 173, "offset": 7395}, "start": {"col": 25, "line": 173, "offset": 7382}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 173, "offset": 7407}, "start": {"col": 39, "line": 173, "offset": 7396}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 173, "offset": 7476}, "start": {"col": 115, "line": 173, "offset": 7472}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_22b.cs", "start": {"col": 25, "line": 173, "offset": 7382}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 76, "offset": 2936}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "dataCopy", "location": {"end": {"col": 21, "line": 63, "offset": 2282}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_31.cs", "start": {"col": 13, "line": 63, "offset": 2274}}}, {"content": "data", "location": {"end": {"col": 24, "line": 66, "offset": 2337}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_31.cs", "start": {"col": 20, "line": 66, "offset": 2333}}}], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 76, "offset": 2936}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_31.cs", "start": {"col": 25, "line": 76, "offset": 2837}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 28, "line": 63, "offset": 2289}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_31.cs", "start": {"col": 24, "line": 63, "offset": 2285}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "660a2146a749362c1920b95b204a4381189bc48a31ce8a4521e693faf64a83d1c80e98638d5e975bc6d982c860666f1fc91d288cd3002faa18447da194dc68ed_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 76, "offset": 2850}, "start": {"col": 25, "line": 76, "offset": 2837}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 76, "offset": 2862}, "start": {"col": 39, "line": 76, "offset": 2851}}, "$X": {"abstract_content": "data", "end": {"col": 28, "line": 63, "offset": 2289}, "start": {"col": 24, "line": 63, "offset": 2285}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_31.cs", "start": {"col": 25, "line": 76, "offset": 2837}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 42, "offset": 1566}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 42, "offset": 1566}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_41.cs", "start": {"col": 21, "line": 42, "offset": 1467}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 42, "offset": 1561}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_41.cs", "start": {"col": 111, "line": 42, "offset": 1557}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "9c361a7be69ea314ed89f5f099d477e086b8a1dee90d3697879e213a3fd048c4767cefbdf5d5c478bad7822902876a51c7b7bb4210ae579e98e3f0dbbdcba2b3_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 42, "offset": 1480}, "start": {"col": 21, "line": 42, "offset": 1467}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 42, "offset": 1492}, "start": {"col": 35, "line": 42, "offset": 1481}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 42, "offset": 1561}, "start": {"col": 111, "line": 42, "offset": 1557}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_41.cs", "start": {"col": 21, "line": 42, "offset": 1467}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 112, "offset": 4239}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 112, "offset": 4239}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_41.cs", "start": {"col": 21, "line": 112, "offset": 4140}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 112, "offset": 4234}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_41.cs", "start": {"col": 111, "line": 112, "offset": 4230}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "9c361a7be69ea314ed89f5f099d477e086b8a1dee90d3697879e213a3fd048c4767cefbdf5d5c478bad7822902876a51c7b7bb4210ae579e98e3f0dbbdcba2b3_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 112, "offset": 4153}, "start": {"col": 21, "line": 112, "offset": 4140}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 112, "offset": 4165}, "start": {"col": 35, "line": 112, "offset": 4154}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 112, "offset": 4234}, "start": {"col": 111, "line": 112, "offset": 4230}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_41.cs", "start": {"col": 21, "line": 112, "offset": 4140}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 76, "offset": 2830}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 76, "offset": 2830}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_42.cs", "start": {"col": 21, "line": 76, "offset": 2731}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 76, "offset": 2825}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_42.cs", "start": {"col": 111, "line": 76, "offset": 2821}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "7954fca3d946677126018bb4afac817301e40aba65779bf8e88f7d10d91b923fc1ef3dca6c17f1491bb0b1efc776ff09aa9b909bc351a53be8f43da1ff7b5a3b_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 76, "offset": 2744}, "start": {"col": 21, "line": 76, "offset": 2731}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 76, "offset": 2756}, "start": {"col": 35, "line": 76, "offset": 2745}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 76, "offset": 2825}, "propagated_value": {"svalue_abstract_content": "BadSource(req resp)", "svalue_end": {"col": 43, "line": 66, "offset": 2282}, "svalue_start": {"col": 23, "line": 66, "offset": 2262}}, "start": {"col": 111, "line": 76, "offset": 2821}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_42.cs", "start": {"col": 21, "line": 76, "offset": 2731}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 117, "offset": 4389}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 117, "offset": 4389}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_42.cs", "start": {"col": 21, "line": 117, "offset": 4290}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 117, "offset": 4384}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_42.cs", "start": {"col": 111, "line": 117, "offset": 4380}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "7954fca3d946677126018bb4afac817301e40aba65779bf8e88f7d10d91b923fc1ef3dca6c17f1491bb0b1efc776ff09aa9b909bc351a53be8f43da1ff7b5a3b_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 117, "offset": 4303}, "start": {"col": 21, "line": 117, "offset": 4290}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 117, "offset": 4315}, "start": {"col": 35, "line": 117, "offset": 4304}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 117, "offset": 4384}, "propagated_value": {"svalue_abstract_content": "GoodG2BSource(req resp)", "svalue_end": {"col": 47, "line": 107, "offset": 3841}, "svalue_start": {"col": 23, "line": 107, "offset": 3817}}, "start": {"col": 111, "line": 117, "offset": 4380}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_42.cs", "start": {"col": 21, "line": 117, "offset": 4290}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 47, "offset": 1696}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "data", "location": {"end": {"col": 20, "line": 37, "offset": 1138}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_45.cs", "start": {"col": 16, "line": 37, "offset": 1134}}}], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 47, "offset": 1696}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_45.cs", "start": {"col": 21, "line": 47, "offset": 1597}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 30, "line": 37, "offset": 1148}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_45.cs", "start": {"col": 23, "line": 37, "offset": 1141}}, "dataBad"]]}, "engine_kind": "OSS", "fingerprint": "1d1bf86a8ac3dbfaf466fcccbcd1047ec22e310c3c400e233c18735bdeb7fca1dc468bd45eb49f79352c7ae93374571818b2e6ad17fc476644f898e6e468d4c1_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 47, "offset": 1610}, "start": {"col": 21, "line": 47, "offset": 1597}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 47, "offset": 1622}, "start": {"col": 35, "line": 47, "offset": 1611}}, "$X": {"abstract_content": "dataBad", "end": {"col": 30, "line": 37, "offset": 1148}, "start": {"col": 23, "line": 37, "offset": 1141}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_45.cs", "start": {"col": 21, "line": 47, "offset": 1597}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 119, "offset": 4401}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "data", "location": {"end": {"col": 20, "line": 109, "offset": 3839}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_45.cs", "start": {"col": 16, "line": 109, "offset": 3835}}}], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 119, "offset": 4401}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_45.cs", "start": {"col": 21, "line": 119, "offset": 4302}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 34, "line": 109, "offset": 3853}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_45.cs", "start": {"col": 23, "line": 109, "offset": 3842}}, "dataGoodG2B"]]}, "engine_kind": "OSS", "fingerprint": "f20b381d913c29f993e7c0a936d4ec13125befe72d7df8f5918b4db65a5b3387555227e0c0cb7a4ba0da59156171c79ab0e4fc5e4387816ddd1b46784ac6730a_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 119, "offset": 4315}, "start": {"col": 21, "line": 119, "offset": 4302}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 119, "offset": 4327}, "start": {"col": 35, "line": 119, "offset": 4316}}, "$X": {"abstract_content": "dataGoodG2B", "end": {"col": 34, "line": 109, "offset": 3853}, "start": {"col": 23, "line": 109, "offset": 3842}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_45.cs", "start": {"col": 21, "line": 119, "offset": 4302}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 41, "offset": 1569}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 41, "offset": 1569}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_51b.cs", "start": {"col": 21, "line": 41, "offset": 1470}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 41, "offset": 1564}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_51b.cs", "start": {"col": 111, "line": 41, "offset": 1560}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "44f89a357b000b83cf2ac9197d20d4ebde6dcc3796c96edc73887b36ad3aaf534689b47e45ff16312885d95aa05c6c0f92ad1cab947d3da42734a926d8175b49_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 41, "offset": 1483}, "start": {"col": 21, "line": 41, "offset": 1470}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 41, "offset": 1495}, "start": {"col": 35, "line": 41, "offset": 1484}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 41, "offset": 1564}, "start": {"col": 111, "line": 41, "offset": 1560}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_51b.cs", "start": {"col": 21, "line": 41, "offset": 1470}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 74, "offset": 2885}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 74, "offset": 2885}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_51b.cs", "start": {"col": 21, "line": 74, "offset": 2786}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 74, "offset": 2880}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_51b.cs", "start": {"col": 111, "line": 74, "offset": 2876}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "44f89a357b000b83cf2ac9197d20d4ebde6dcc3796c96edc73887b36ad3aaf534689b47e45ff16312885d95aa05c6c0f92ad1cab947d3da42734a926d8175b49_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 74, "offset": 2799}, "start": {"col": 21, "line": 74, "offset": 2786}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 74, "offset": 2811}, "start": {"col": 35, "line": 74, "offset": 2800}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 74, "offset": 2880}, "start": {"col": 111, "line": 74, "offset": 2876}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_51b.cs", "start": {"col": 21, "line": 74, "offset": 2786}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 41, "offset": 1584}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 41, "offset": 1584}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_52c.cs", "start": {"col": 21, "line": 41, "offset": 1485}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 41, "offset": 1579}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_52c.cs", "start": {"col": 111, "line": 41, "offset": 1575}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "45755eb96e1cede451393307a9b44fa2fad8bb84846e442f5f0033432a19dfffad00a0c27e950965a7cccebc6be5d4b56e1bd714ea108786067b941d074f65dd_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 41, "offset": 1498}, "start": {"col": 21, "line": 41, "offset": 1485}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 41, "offset": 1510}, "start": {"col": 35, "line": 41, "offset": 1499}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 41, "offset": 1579}, "start": {"col": 111, "line": 41, "offset": 1575}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_52c.cs", "start": {"col": 21, "line": 41, "offset": 1485}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 74, "offset": 2900}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 74, "offset": 2900}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_52c.cs", "start": {"col": 21, "line": 74, "offset": 2801}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 74, "offset": 2895}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_52c.cs", "start": {"col": 111, "line": 74, "offset": 2891}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "45755eb96e1cede451393307a9b44fa2fad8bb84846e442f5f0033432a19dfffad00a0c27e950965a7cccebc6be5d4b56e1bd714ea108786067b941d074f65dd_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 74, "offset": 2814}, "start": {"col": 21, "line": 74, "offset": 2801}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 74, "offset": 2826}, "start": {"col": 35, "line": 74, "offset": 2815}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 74, "offset": 2895}, "start": {"col": 111, "line": 74, "offset": 2891}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_52c.cs", "start": {"col": 21, "line": 74, "offset": 2801}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 41, "offset": 1611}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 41, "offset": 1611}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_53d.cs", "start": {"col": 21, "line": 41, "offset": 1512}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 41, "offset": 1606}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_53d.cs", "start": {"col": 111, "line": 41, "offset": 1602}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "1ec41e5fba7017f9fb852803a2c90798edea0575ad8f6cd05fbd5070e150eb76b8dc4bb46b45b7cbbff98364b90e182386b0a365018c6c11cb98de7c6567665b_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 41, "offset": 1525}, "start": {"col": 21, "line": 41, "offset": 1512}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 41, "offset": 1537}, "start": {"col": 35, "line": 41, "offset": 1526}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 41, "offset": 1606}, "start": {"col": 111, "line": 41, "offset": 1602}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_53d.cs", "start": {"col": 21, "line": 41, "offset": 1512}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 74, "offset": 2927}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 74, "offset": 2927}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_53d.cs", "start": {"col": 21, "line": 74, "offset": 2828}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 74, "offset": 2922}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_53d.cs", "start": {"col": 111, "line": 74, "offset": 2918}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "1ec41e5fba7017f9fb852803a2c90798edea0575ad8f6cd05fbd5070e150eb76b8dc4bb46b45b7cbbff98364b90e182386b0a365018c6c11cb98de7c6567665b_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 74, "offset": 2841}, "start": {"col": 21, "line": 74, "offset": 2828}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 74, "offset": 2853}, "start": {"col": 35, "line": 74, "offset": 2842}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 74, "offset": 2922}, "start": {"col": 111, "line": 74, "offset": 2918}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_53d.cs", "start": {"col": 21, "line": 74, "offset": 2828}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 41, "offset": 1612}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 41, "offset": 1612}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_54e.cs", "start": {"col": 21, "line": 41, "offset": 1513}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 41, "offset": 1607}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_54e.cs", "start": {"col": 111, "line": 41, "offset": 1603}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "668b6d0d9fb0656b13117532a3fbf10045db0a236db0a6ad7f47201cf30c133c715d5ee3fcee9ec5c1199194423bbc0012ad5e9f570678bc07ca6c4550b46531_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 41, "offset": 1526}, "start": {"col": 21, "line": 41, "offset": 1513}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 41, "offset": 1538}, "start": {"col": 35, "line": 41, "offset": 1527}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 41, "offset": 1607}, "start": {"col": 111, "line": 41, "offset": 1603}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_54e.cs", "start": {"col": 21, "line": 41, "offset": 1513}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 74, "offset": 2928}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 74, "offset": 2928}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_54e.cs", "start": {"col": 21, "line": 74, "offset": 2829}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 74, "offset": 2923}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_54e.cs", "start": {"col": 111, "line": 74, "offset": 2919}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "668b6d0d9fb0656b13117532a3fbf10045db0a236db0a6ad7f47201cf30c133c715d5ee3fcee9ec5c1199194423bbc0012ad5e9f570678bc07ca6c4550b46531_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 74, "offset": 2842}, "start": {"col": 21, "line": 74, "offset": 2829}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 74, "offset": 2854}, "start": {"col": 35, "line": 74, "offset": 2843}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 74, "offset": 2923}, "start": {"col": 111, "line": 74, "offset": 2919}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_54e.cs", "start": {"col": 21, "line": 74, "offset": 2829}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 42, "offset": 1659}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 42, "offset": 1659}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_61a.cs", "start": {"col": 21, "line": 42, "offset": 1560}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 42, "offset": 1654}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_61a.cs", "start": {"col": 111, "line": 42, "offset": 1650}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "3e2086c51c1986e4a4506a59b3dc640f5c9db5cb5f9784a93f63d2d5e98a0bf6451c293c97a6aca88f22d92afe089cd0b433b0aca94b4deaa9a0c22b003dff46_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 42, "offset": 1573}, "start": {"col": 21, "line": 42, "offset": 1560}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 42, "offset": 1585}, "start": {"col": 35, "line": 42, "offset": 1574}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 42, "offset": 1654}, "propagated_value": {"svalue_abstract_content": "CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_61b.BadSource(req resp)", "svalue_end": {"col": 97, "line": 32, "offset": 1111}, "svalue_start": {"col": 23, "line": 32, "offset": 1037}}, "start": {"col": 111, "line": 42, "offset": 1650}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_61a.cs", "start": {"col": 21, "line": 42, "offset": 1560}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 81, "offset": 3210}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 81, "offset": 3210}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_61a.cs", "start": {"col": 21, "line": 81, "offset": 3111}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 81, "offset": 3205}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_61a.cs", "start": {"col": 111, "line": 81, "offset": 3201}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "3e2086c51c1986e4a4506a59b3dc640f5c9db5cb5f9784a93f63d2d5e98a0bf6451c293c97a6aca88f22d92afe089cd0b433b0aca94b4deaa9a0c22b003dff46_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 81, "offset": 3124}, "start": {"col": 21, "line": 81, "offset": 3111}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 81, "offset": 3136}, "start": {"col": 35, "line": 81, "offset": 3125}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 81, "offset": 3205}, "propagated_value": {"svalue_abstract_content": "CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_61b.GoodG2BSource(req resp)", "svalue_end": {"col": 101, "line": 71, "offset": 2662}, "svalue_start": {"col": 23, "line": 71, "offset": 2584}}, "start": {"col": 111, "line": 81, "offset": 3201}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_61a.cs", "start": {"col": 21, "line": 81, "offset": 3111}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 42, "offset": 1613}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 42, "offset": 1613}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_66b.cs", "start": {"col": 21, "line": 42, "offset": 1514}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 42, "offset": 1608}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_66b.cs", "start": {"col": 111, "line": 42, "offset": 1604}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "642d7b7cc2d112e879d1d8dd7c77facae05397ad2a3ff31329bcb788486496886685fef2017bfb74a0febbc1e95a431128d35ff470b68de8595f489ccde6d4b0_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 42, "offset": 1527}, "start": {"col": 21, "line": 42, "offset": 1514}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 42, "offset": 1539}, "start": {"col": 35, "line": 42, "offset": 1528}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 42, "offset": 1608}, "start": {"col": 111, "line": 42, "offset": 1604}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_66b.cs", "start": {"col": 21, "line": 42, "offset": 1514}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 76, "offset": 2973}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 76, "offset": 2973}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_66b.cs", "start": {"col": 21, "line": 76, "offset": 2874}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 76, "offset": 2968}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_66b.cs", "start": {"col": 111, "line": 76, "offset": 2964}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "642d7b7cc2d112e879d1d8dd7c77facae05397ad2a3ff31329bcb788486496886685fef2017bfb74a0febbc1e95a431128d35ff470b68de8595f489ccde6d4b0_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 76, "offset": 2887}, "start": {"col": 21, "line": 76, "offset": 2874}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 76, "offset": 2899}, "start": {"col": 35, "line": 76, "offset": 2888}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 76, "offset": 2968}, "start": {"col": 111, "line": 76, "offset": 2964}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_66b.cs", "start": {"col": 21, "line": 76, "offset": 2874}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 42, "offset": 1685}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 42, "offset": 1685}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_67b.cs", "start": {"col": 21, "line": 42, "offset": 1586}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 42, "offset": 1680}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_67b.cs", "start": {"col": 111, "line": 42, "offset": 1676}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "70d40808d1178e64ab6b6bb8acfd5296c735014c38f1c3d03389bdfb87dafc23acfdf60791eae07a0410607b8643be134ca51361272903808bfecbb457c6675b_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 42, "offset": 1599}, "start": {"col": 21, "line": 42, "offset": 1586}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 42, "offset": 1611}, "start": {"col": 35, "line": 42, "offset": 1600}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 42, "offset": 1680}, "propagated_value": {"svalue_abstract_content": "dataContainer.containerOne", "svalue_end": {"col": 49, "line": 32, "offset": 1137}, "svalue_start": {"col": 23, "line": 32, "offset": 1111}}, "start": {"col": 111, "line": 42, "offset": 1676}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_67b.cs", "start": {"col": 21, "line": 42, "offset": 1586}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 76, "offset": 3118}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 76, "offset": 3118}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_67b.cs", "start": {"col": 21, "line": 76, "offset": 3019}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 76, "offset": 3113}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_67b.cs", "start": {"col": 111, "line": 76, "offset": 3109}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "70d40808d1178e64ab6b6bb8acfd5296c735014c38f1c3d03389bdfb87dafc23acfdf60791eae07a0410607b8643be134ca51361272903808bfecbb457c6675b_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 76, "offset": 3032}, "start": {"col": 21, "line": 76, "offset": 3019}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 76, "offset": 3044}, "start": {"col": 35, "line": 76, "offset": 3033}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 76, "offset": 3113}, "propagated_value": {"svalue_abstract_content": "dataContainer.containerOne", "svalue_end": {"col": 49, "line": 66, "offset": 2570}, "svalue_start": {"col": 23, "line": 66, "offset": 2544}}, "start": {"col": 111, "line": 76, "offset": 3109}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_67b.cs", "start": {"col": 21, "line": 76, "offset": 3019}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 42, "offset": 1655}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 42, "offset": 1655}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_68b.cs", "start": {"col": 21, "line": 42, "offset": 1556}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 42, "offset": 1650}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_68b.cs", "start": {"col": 111, "line": 42, "offset": 1646}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "9d75d9cca75dcceb4f87cd22e6a9569a840766b7487be93ab43f30b99f26ae7e6b76f71abb734bb1344fa4514e907e98d6c8b3f1d40071b1e5ad2f37b395ae50_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 42, "offset": 1569}, "start": {"col": 21, "line": 42, "offset": 1556}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 42, "offset": 1581}, "start": {"col": 35, "line": 42, "offset": 1570}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 42, "offset": 1650}, "propagated_value": {"svalue_abstract_content": "CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_68a.data", "svalue_end": {"col": 81, "line": 32, "offset": 1107}, "svalue_start": {"col": 23, "line": 32, "offset": 1049}}, "start": {"col": 111, "line": 42, "offset": 1646}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_68b.cs", "start": {"col": 21, "line": 42, "offset": 1556}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 76, "offset": 3040}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 76, "offset": 3040}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_68b.cs", "start": {"col": 21, "line": 76, "offset": 2941}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 76, "offset": 3035}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_68b.cs", "start": {"col": 111, "line": 76, "offset": 3031}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "9d75d9cca75dcceb4f87cd22e6a9569a840766b7487be93ab43f30b99f26ae7e6b76f71abb734bb1344fa4514e907e98d6c8b3f1d40071b1e5ad2f37b395ae50_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 76, "offset": 2954}, "start": {"col": 21, "line": 76, "offset": 2941}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 76, "offset": 2966}, "start": {"col": 35, "line": 76, "offset": 2955}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 76, "offset": 3035}, "propagated_value": {"svalue_abstract_content": "CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_68a.data", "svalue_end": {"col": 81, "line": 66, "offset": 2492}, "svalue_start": {"col": 23, "line": 66, "offset": 2434}}, "start": {"col": 111, "line": 76, "offset": 3031}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_68b.cs", "start": {"col": 21, "line": 76, "offset": 2941}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 43, "offset": 1635}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "data", "location": {"end": {"col": 20, "line": 33, "offset": 1066}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_71b.cs", "start": {"col": 16, "line": 33, "offset": 1062}}}], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 43, "offset": 1635}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_71b.cs", "start": {"col": 21, "line": 43, "offset": 1536}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 41, "line": 33, "offset": 1087}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_71b.cs", "start": {"col": 23, "line": 33, "offset": 1069}}, "(string)dataObject"]]}, "engine_kind": "OSS", "fingerprint": "2bb0dc9404656374d0e0b505daf53867ba4b4d8d0c14a4d53ee4c4eac7bf701e71968ca57bd7994857d148774380e7708738d471e14f250170c9773fff8e7f12_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 43, "offset": 1549}, "start": {"col": 21, "line": 43, "offset": 1536}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 43, "offset": 1561}, "start": {"col": 35, "line": 43, "offset": 1550}}, "$X": {"abstract_content": "(string dataObject", "end": {"col": 41, "line": 33, "offset": 1087}, "start": {"col": 23, "line": 33, "offset": 1069}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_71b.cs", "start": {"col": 21, "line": 43, "offset": 1536}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 77, "offset": 3000}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "data", "location": {"end": {"col": 20, "line": 67, "offset": 2431}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_71b.cs", "start": {"col": 16, "line": 67, "offset": 2427}}}], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 77, "offset": 3000}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_71b.cs", "start": {"col": 21, "line": 77, "offset": 2901}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 41, "line": 67, "offset": 2452}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_71b.cs", "start": {"col": 23, "line": 67, "offset": 2434}}, "(string)dataObject"]]}, "engine_kind": "OSS", "fingerprint": "2bb0dc9404656374d0e0b505daf53867ba4b4d8d0c14a4d53ee4c4eac7bf701e71968ca57bd7994857d148774380e7708738d471e14f250170c9773fff8e7f12_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 77, "offset": 2914}, "start": {"col": 21, "line": 77, "offset": 2901}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 77, "offset": 2926}, "start": {"col": 35, "line": 77, "offset": 2915}}, "$X": {"abstract_content": "(string dataObject", "end": {"col": 41, "line": 67, "offset": 2452}, "start": {"col": 23, "line": 67, "offset": 2434}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_71b.cs", "start": {"col": 21, "line": 77, "offset": 2901}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 43, "offset": 1661}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "data", "location": {"end": {"col": 20, "line": 33, "offset": 1085}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_72b.cs", "start": {"col": 16, "line": 33, "offset": 1081}}}], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 43, "offset": 1661}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_72b.cs", "start": {"col": 21, "line": 43, "offset": 1562}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 48, "line": 33, "offset": 1113}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_72b.cs", "start": {"col": 23, "line": 33, "offset": 1088}}, "(string) dataHashtable[2]"]]}, "engine_kind": "OSS", "fingerprint": "35bd990188182afa978f0314cb20d271f8ef6bf11ecee21ad39ead29b7f5c920949a7da9bbc9fe3a3be177e79de52f94fad243779b32e655fc376298511f9330_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 43, "offset": 1575}, "start": {"col": 21, "line": 43, "offset": 1562}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 43, "offset": 1587}, "start": {"col": 35, "line": 43, "offset": 1576}}, "$X": {"abstract_content": "(string dataHashtable[[2]]", "end": {"col": 48, "line": 33, "offset": 1113}, "start": {"col": 23, "line": 33, "offset": 1088}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_72b.cs", "start": {"col": 21, "line": 43, "offset": 1562}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 77, "offset": 3039}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "data", "location": {"end": {"col": 20, "line": 67, "offset": 2463}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_72b.cs", "start": {"col": 16, "line": 67, "offset": 2459}}}], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 77, "offset": 3039}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_72b.cs", "start": {"col": 21, "line": 77, "offset": 2940}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 48, "line": 67, "offset": 2491}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_72b.cs", "start": {"col": 23, "line": 67, "offset": 2466}}, "(string) dataHashtable[2]"]]}, "engine_kind": "OSS", "fingerprint": "35bd990188182afa978f0314cb20d271f8ef6bf11ecee21ad39ead29b7f5c920949a7da9bbc9fe3a3be177e79de52f94fad243779b32e655fc376298511f9330_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 77, "offset": 2953}, "start": {"col": 21, "line": 77, "offset": 2940}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 77, "offset": 2965}, "start": {"col": 35, "line": 77, "offset": 2954}}, "$X": {"abstract_content": "(string dataHashtable[[2]]", "end": {"col": 48, "line": 67, "offset": 2491}, "start": {"col": 23, "line": 67, "offset": 2466}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_72b.cs", "start": {"col": 21, "line": 77, "offset": 2940}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 43, "offset": 1680}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 43, "offset": 1680}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_73b.cs", "start": {"col": 21, "line": 43, "offset": 1581}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 43, "offset": 1675}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_73b.cs", "start": {"col": 111, "line": 43, "offset": 1671}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "0f9ac72bf4b25211491760aa745c73e711a28126923e6461be3f41e1a4545901e7951c98d120def07094cde05bf031dbe1c5f92eaddf923048e0a6706af6395d_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 43, "offset": 1594}, "start": {"col": 21, "line": 43, "offset": 1581}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 43, "offset": 1606}, "start": {"col": 35, "line": 43, "offset": 1595}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 43, "offset": 1675}, "propagated_value": {"svalue_abstract_content": "dataLinkedList.Last.Value", "svalue_end": {"col": 48, "line": 33, "offset": 1132}, "svalue_start": {"col": 23, "line": 33, "offset": 1107}}, "start": {"col": 111, "line": 43, "offset": 1671}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_73b.cs", "start": {"col": 21, "line": 43, "offset": 1581}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 77, "offset": 3068}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 77, "offset": 3068}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_73b.cs", "start": {"col": 21, "line": 77, "offset": 2969}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 77, "offset": 3063}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_73b.cs", "start": {"col": 111, "line": 77, "offset": 3059}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "0f9ac72bf4b25211491760aa745c73e711a28126923e6461be3f41e1a4545901e7951c98d120def07094cde05bf031dbe1c5f92eaddf923048e0a6706af6395d_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 77, "offset": 2982}, "start": {"col": 21, "line": 77, "offset": 2969}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 77, "offset": 2994}, "start": {"col": 35, "line": 77, "offset": 2983}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 77, "offset": 3063}, "propagated_value": {"svalue_abstract_content": "dataLinkedList.Last.Value", "svalue_end": {"col": 48, "line": 67, "offset": 2520}, "svalue_start": {"col": 23, "line": 67, "offset": 2495}}, "start": {"col": 111, "line": 77, "offset": 3059}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_73b.cs", "start": {"col": 21, "line": 77, "offset": 2969}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 43, "offset": 1676}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 43, "offset": 1676}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_74b.cs", "start": {"col": 21, "line": 43, "offset": 1577}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 43, "offset": 1671}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_74b.cs", "start": {"col": 111, "line": 43, "offset": 1667}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "d2046b3b6b1ccc66817409eb1745507b5159b624b4f91fef0c0f5bb3a16642f39e709d5031c4a8c79a7257333bd9a3d0b1004a93adfef939db23b74e5c2850a6_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 43, "offset": 1590}, "start": {"col": 21, "line": 43, "offset": 1577}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 43, "offset": 1602}, "start": {"col": 35, "line": 43, "offset": 1591}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 43, "offset": 1671}, "start": {"col": 111, "line": 43, "offset": 1667}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_74b.cs", "start": {"col": 21, "line": 43, "offset": 1577}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 77, "offset": 3061}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 77, "offset": 3061}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_74b.cs", "start": {"col": 21, "line": 77, "offset": 2962}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 77, "offset": 3056}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_74b.cs", "start": {"col": 111, "line": 77, "offset": 3052}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "d2046b3b6b1ccc66817409eb1745507b5159b624b4f91fef0c0f5bb3a16642f39e709d5031c4a8c79a7257333bd9a3d0b1004a93adfef939db23b74e5c2850a6_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 77, "offset": 2975}, "start": {"col": 21, "line": 77, "offset": 2962}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 77, "offset": 2987}, "start": {"col": 35, "line": 77, "offset": 2976}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 77, "offset": 3056}, "start": {"col": 111, "line": 77, "offset": 3052}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_74b.cs", "start": {"col": 21, "line": 77, "offset": 2962}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 55, "line": 68, "offset": 2454}, "extra": {"engine_kind": "OSS", "fingerprint": "f02474fca036746d298032564a297e8ea122b7ca8eec32117d3b6d9e5ed8303fde28dee5ad1dc621164cdb2d41414d9aefcf2462112f913a3010e52b15614746_0", "is_ignored": false, "lines": "            BinaryFormatter bf = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_75a.cs", "start": {"col": 13, "line": 68, "offset": 2412}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 55, "line": 124, "offset": 4538}, "extra": {"engine_kind": "OSS", "fingerprint": "f02474fca036746d298032564a297e8ea122b7ca8eec32117d3b6d9e5ed8303fde28dee5ad1dc621164cdb2d41414d9aefcf2462112f913a3010e52b15614746_1", "is_ignored": false, "lines": "            BinaryFormatter bf = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_75a.cs", "start": {"col": 13, "line": 124, "offset": 4496}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 55, "line": 173, "offset": 6452}, "extra": {"engine_kind": "OSS", "fingerprint": "f02474fca036746d298032564a297e8ea122b7ca8eec32117d3b6d9e5ed8303fde28dee5ad1dc621164cdb2d41414d9aefcf2462112f913a3010e52b15614746_2", "is_ignored": false, "lines": "            BinaryFormatter bf = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_75a.cs", "start": {"col": 13, "line": 173, "offset": 6410}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 48, "line": 38, "offset": 1252}, "extra": {"engine_kind": "OSS", "fingerprint": "e7d05e088d102b7f8784908c475cd3847afe38c06ea5bb75726a3e0e796aa28d26c320d877c5610c090508a15e8450c00929b9f805ed9136c9395e305820d97c_0", "is_ignored": false, "lines": "            var binForm = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_75b.cs", "start": {"col": 17, "line": 38, "offset": 1221}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 54, "offset": 2120}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "data", "location": {"end": {"col": 21, "line": 43, "offset": 1476}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_75b.cs", "start": {"col": 17, "line": 43, "offset": 1472}}}], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 54, "offset": 2120}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_75b.cs", "start": {"col": 25, "line": 54, "offset": 2021}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 62, "line": 43, "offset": 1517}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_75b.cs", "start": {"col": 24, "line": 43, "offset": 1479}}, "(string)binForm.Deserialize(memStream)"]]}, "engine_kind": "OSS", "fingerprint": "ce76088e98edb1817232b20692297f607056e6bc1037e4434dcdc798c3a874184e50b9d80f877f7a4529d85b52bc8f87bf9c687404b999d8ffac479e54ef41ab_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 54, "offset": 2034}, "start": {"col": 25, "line": 54, "offset": 2021}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 54, "offset": 2046}, "start": {"col": 39, "line": 54, "offset": 2035}}, "$X": {"abstract_content": "(string binForm.Deserialize(memStream)", "end": {"col": 62, "line": 43, "offset": 1517}, "start": {"col": 24, "line": 43, "offset": 1479}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_75b.cs", "start": {"col": 25, "line": 54, "offset": 2021}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 48, "line": 86, "offset": 3261}, "extra": {"engine_kind": "OSS", "fingerprint": "e7d05e088d102b7f8784908c475cd3847afe38c06ea5bb75726a3e0e796aa28d26c320d877c5610c090508a15e8450c00929b9f805ed9136c9395e305820d97c_1", "is_ignored": false, "lines": "            var binForm = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_75b.cs", "start": {"col": 17, "line": 86, "offset": 3230}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 102, "offset": 4129}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "data", "location": {"end": {"col": 21, "line": 91, "offset": 3485}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_75b.cs", "start": {"col": 17, "line": 91, "offset": 3481}}}], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 102, "offset": 4129}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_75b.cs", "start": {"col": 25, "line": 102, "offset": 4030}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 62, "line": 91, "offset": 3526}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_75b.cs", "start": {"col": 24, "line": 91, "offset": 3488}}, "(string)binForm.Deserialize(memStream)"]]}, "engine_kind": "OSS", "fingerprint": "ce76088e98edb1817232b20692297f607056e6bc1037e4434dcdc798c3a874184e50b9d80f877f7a4529d85b52bc8f87bf9c687404b999d8ffac479e54ef41ab_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 102, "offset": 4043}, "start": {"col": 25, "line": 102, "offset": 4030}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 102, "offset": 4055}, "start": {"col": 39, "line": 102, "offset": 4044}}, "$X": {"abstract_content": "(string binForm.Deserialize(memStream)", "end": {"col": 62, "line": 91, "offset": 3526}, "start": {"col": 24, "line": 91, "offset": 3488}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_75b.cs", "start": {"col": 25, "line": 102, "offset": 4030}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 48, "line": 132, "offset": 5245}, "extra": {"engine_kind": "OSS", "fingerprint": "e7d05e088d102b7f8784908c475cd3847afe38c06ea5bb75726a3e0e796aa28d26c320d877c5610c090508a15e8450c00929b9f805ed9136c9395e305820d97c_2", "is_ignored": false, "lines": "            var binForm = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_75b.cs", "start": {"col": 17, "line": 132, "offset": 5214}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 41, "offset": 1591}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 41, "offset": 1591}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_81_bad.cs", "start": {"col": 21, "line": 41, "offset": 1492}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 41, "offset": 1586}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_81_bad.cs", "start": {"col": 111, "line": 41, "offset": 1582}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "89e098a641cc9f9506a4175c2094bd281e67ae0443a8619240e3d684fcdf89af6129fb82468c5fa840cb0ed115fa2a5adfa2bdaa8ddc13809e260484f195b2eb_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 41, "offset": 1505}, "start": {"col": 21, "line": 41, "offset": 1492}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 41, "offset": 1517}, "start": {"col": 35, "line": 41, "offset": 1506}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 41, "offset": 1586}, "start": {"col": 111, "line": 41, "offset": 1582}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_81_bad.cs", "start": {"col": 21, "line": 41, "offset": 1492}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 42, "offset": 1606}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 42, "offset": 1606}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_81_goodG2B.cs", "start": {"col": 21, "line": 42, "offset": 1507}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 42, "offset": 1601}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_81_goodG2B.cs", "start": {"col": 111, "line": 42, "offset": 1597}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "3c556e4c384b26a8d52d4c39fe3cbfe6714ea4805edfcff32cc292b1e83e898f8431dfcf389e81f4753e0eb4611793d89214cb47ef350c707fc76b04413a7f89_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 42, "offset": 1520}, "start": {"col": 21, "line": 42, "offset": 1507}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 42, "offset": 1532}, "start": {"col": 35, "line": 42, "offset": 1521}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 42, "offset": 1601}, "start": {"col": 111, "line": 42, "offset": 1597}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteNonQuery_81_goodG2B.cs", "start": {"col": 21, "line": 42, "offset": 1507}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 69, "offset": 2538}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 69, "offset": 2538}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_01.cs", "start": {"col": 21, "line": 69, "offset": 2465}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 69, "offset": 2533}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_01.cs", "start": {"col": 85, "line": 69, "offset": 2529}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "2aa31f6c311e283f463ff37aad3a1f357e85b8c18b3c293aea1cd51c11b8474e01825564eb06dad0182589b3029aeac137959e938e9b74f51de1334a4518fb73_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 69, "offset": 2478}, "start": {"col": 21, "line": 69, "offset": 2465}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 69, "offset": 2490}, "start": {"col": 35, "line": 69, "offset": 2479}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 69, "offset": 2533}, "start": {"col": 85, "line": 69, "offset": 2529}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_01.cs", "start": {"col": 21, "line": 69, "offset": 2465}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 80, "offset": 3013}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 80, "offset": 3013}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_02.cs", "start": {"col": 25, "line": 80, "offset": 2940}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 80, "offset": 3008}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_02.cs", "start": {"col": 89, "line": 80, "offset": 3004}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "91412d031db40114273f283b42612d62d2ee52d2be1162c513b732eb258b2d523ab44c74ce199cb5b93f79a77679b5fad786037728fe85cdaf53bfac28619f4b_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 80, "offset": 2953}, "start": {"col": 25, "line": 80, "offset": 2940}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 80, "offset": 2965}, "start": {"col": 39, "line": 80, "offset": 2954}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 80, "offset": 3008}, "start": {"col": 89, "line": 80, "offset": 3004}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_02.cs", "start": {"col": 25, "line": 80, "offset": 2940}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 122, "offset": 4647}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 122, "offset": 4647}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_02.cs", "start": {"col": 25, "line": 122, "offset": 4574}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 122, "offset": 4642}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_02.cs", "start": {"col": 89, "line": 122, "offset": 4638}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "91412d031db40114273f283b42612d62d2ee52d2be1162c513b732eb258b2d523ab44c74ce199cb5b93f79a77679b5fad786037728fe85cdaf53bfac28619f4b_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 122, "offset": 4587}, "start": {"col": 25, "line": 122, "offset": 4574}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 122, "offset": 4599}, "start": {"col": 39, "line": 122, "offset": 4588}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 122, "offset": 4642}, "start": {"col": 89, "line": 122, "offset": 4638}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_02.cs", "start": {"col": 25, "line": 122, "offset": 4574}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 163, "offset": 6251}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 163, "offset": 6251}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_02.cs", "start": {"col": 25, "line": 163, "offset": 6178}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 163, "offset": 6246}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_02.cs", "start": {"col": 89, "line": 163, "offset": 6242}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "91412d031db40114273f283b42612d62d2ee52d2be1162c513b732eb258b2d523ab44c74ce199cb5b93f79a77679b5fad786037728fe85cdaf53bfac28619f4b_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 163, "offset": 6191}, "start": {"col": 25, "line": 163, "offset": 6178}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 163, "offset": 6203}, "start": {"col": 39, "line": 163, "offset": 6192}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 163, "offset": 6246}, "start": {"col": 89, "line": 163, "offset": 6242}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_02.cs", "start": {"col": 25, "line": 163, "offset": 6178}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 80, "offset": 3012}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 80, "offset": 3012}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_03.cs", "start": {"col": 25, "line": 80, "offset": 2939}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 80, "offset": 3007}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_03.cs", "start": {"col": 89, "line": 80, "offset": 3003}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "a151c930ca3362d33459ca53cc5a1de5a171a13a5f2e282f692241a42dea6d01e93738eaf05165c985580d27c4672cdb566100473d6957c6d799ae41f765666b_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 80, "offset": 2952}, "start": {"col": 25, "line": 80, "offset": 2939}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 80, "offset": 2964}, "start": {"col": 39, "line": 80, "offset": 2953}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 80, "offset": 3007}, "start": {"col": 89, "line": 80, "offset": 3003}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_03.cs", "start": {"col": 25, "line": 80, "offset": 2939}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 122, "offset": 4644}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 122, "offset": 4644}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_03.cs", "start": {"col": 25, "line": 122, "offset": 4571}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 122, "offset": 4639}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_03.cs", "start": {"col": 89, "line": 122, "offset": 4635}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "a151c930ca3362d33459ca53cc5a1de5a171a13a5f2e282f692241a42dea6d01e93738eaf05165c985580d27c4672cdb566100473d6957c6d799ae41f765666b_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 122, "offset": 4584}, "start": {"col": 25, "line": 122, "offset": 4571}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 122, "offset": 4596}, "start": {"col": 39, "line": 122, "offset": 4585}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 122, "offset": 4639}, "start": {"col": 89, "line": 122, "offset": 4635}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_03.cs", "start": {"col": 25, "line": 122, "offset": 4571}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 163, "offset": 6248}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 163, "offset": 6248}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_03.cs", "start": {"col": 25, "line": 163, "offset": 6175}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 163, "offset": 6243}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_03.cs", "start": {"col": 89, "line": 163, "offset": 6239}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "a151c930ca3362d33459ca53cc5a1de5a171a13a5f2e282f692241a42dea6d01e93738eaf05165c985580d27c4672cdb566100473d6957c6d799ae41f765666b_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 163, "offset": 6188}, "start": {"col": 25, "line": 163, "offset": 6175}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 163, "offset": 6200}, "start": {"col": 39, "line": 163, "offset": 6189}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 163, "offset": 6243}, "start": {"col": 89, "line": 163, "offset": 6239}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_03.cs", "start": {"col": 25, "line": 163, "offset": 6175}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 87, "offset": 3356}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 87, "offset": 3356}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_04.cs", "start": {"col": 25, "line": 87, "offset": 3283}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 87, "offset": 3351}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_04.cs", "start": {"col": 89, "line": 87, "offset": 3347}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "2483e1329b20e09d926f004c0c48ee9d32223393bb6680b8018a0dff6716f38a952804433af45b4c3c79221af9d079c1f279a9141cd219c10632a1a5f82d8457_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 87, "offset": 3296}, "start": {"col": 25, "line": 87, "offset": 3283}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 87, "offset": 3308}, "start": {"col": 39, "line": 87, "offset": 3297}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 87, "offset": 3351}, "start": {"col": 89, "line": 87, "offset": 3347}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_04.cs", "start": {"col": 25, "line": 87, "offset": 3283}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 129, "offset": 5046}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 129, "offset": 5046}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_04.cs", "start": {"col": 25, "line": 129, "offset": 4973}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 129, "offset": 5041}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_04.cs", "start": {"col": 89, "line": 129, "offset": 5037}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "2483e1329b20e09d926f004c0c48ee9d32223393bb6680b8018a0dff6716f38a952804433af45b4c3c79221af9d079c1f279a9141cd219c10632a1a5f82d8457_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 129, "offset": 4986}, "start": {"col": 25, "line": 129, "offset": 4973}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 129, "offset": 4998}, "start": {"col": 39, "line": 129, "offset": 4987}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 129, "offset": 5041}, "start": {"col": 89, "line": 129, "offset": 5037}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_04.cs", "start": {"col": 25, "line": 129, "offset": 4973}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 170, "offset": 6678}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 170, "offset": 6678}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_04.cs", "start": {"col": 25, "line": 170, "offset": 6605}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 170, "offset": 6673}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_04.cs", "start": {"col": 89, "line": 170, "offset": 6669}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "2483e1329b20e09d926f004c0c48ee9d32223393bb6680b8018a0dff6716f38a952804433af45b4c3c79221af9d079c1f279a9141cd219c10632a1a5f82d8457_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 170, "offset": 6618}, "start": {"col": 25, "line": 170, "offset": 6605}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 170, "offset": 6630}, "start": {"col": 39, "line": 170, "offset": 6619}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 170, "offset": 6673}, "start": {"col": 89, "line": 170, "offset": 6669}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_04.cs", "start": {"col": 25, "line": 170, "offset": 6605}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 86, "offset": 3349}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 86, "offset": 3349}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_05.cs", "start": {"col": 25, "line": 86, "offset": 3276}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 86, "offset": 3344}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_05.cs", "start": {"col": 89, "line": 86, "offset": 3340}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "658ea4ca3ed05f223f06383c59aab75963b8a33532c1d5fcbfd7ee6e4726a7dd65544284368bee7abe4d13a6d0b82a0ef2f716b11937423ed8c968ef57d0dbef_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 86, "offset": 3289}, "start": {"col": 25, "line": 86, "offset": 3276}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 86, "offset": 3301}, "start": {"col": 39, "line": 86, "offset": 3290}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 86, "offset": 3344}, "start": {"col": 89, "line": 86, "offset": 3340}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_05.cs", "start": {"col": 25, "line": 86, "offset": 3276}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 128, "offset": 5011}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 128, "offset": 5011}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_05.cs", "start": {"col": 25, "line": 128, "offset": 4938}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 128, "offset": 5006}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_05.cs", "start": {"col": 89, "line": 128, "offset": 5002}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "658ea4ca3ed05f223f06383c59aab75963b8a33532c1d5fcbfd7ee6e4726a7dd65544284368bee7abe4d13a6d0b82a0ef2f716b11937423ed8c968ef57d0dbef_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 128, "offset": 4951}, "start": {"col": 25, "line": 128, "offset": 4938}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 128, "offset": 4963}, "start": {"col": 39, "line": 128, "offset": 4952}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 128, "offset": 5006}, "start": {"col": 89, "line": 128, "offset": 5002}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_05.cs", "start": {"col": 25, "line": 128, "offset": 4938}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 169, "offset": 6629}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 169, "offset": 6629}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_05.cs", "start": {"col": 25, "line": 169, "offset": 6556}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 169, "offset": 6624}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_05.cs", "start": {"col": 89, "line": 169, "offset": 6620}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "658ea4ca3ed05f223f06383c59aab75963b8a33532c1d5fcbfd7ee6e4726a7dd65544284368bee7abe4d13a6d0b82a0ef2f716b11937423ed8c968ef57d0dbef_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 169, "offset": 6569}, "start": {"col": 25, "line": 169, "offset": 6556}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 169, "offset": 6581}, "start": {"col": 39, "line": 169, "offset": 6570}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 169, "offset": 6624}, "start": {"col": 89, "line": 169, "offset": 6620}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_05.cs", "start": {"col": 25, "line": 169, "offset": 6556}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 85, "offset": 3292}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 85, "offset": 3292}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_06.cs", "start": {"col": 25, "line": 85, "offset": 3219}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 85, "offset": 3287}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_06.cs", "start": {"col": 89, "line": 85, "offset": 3283}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "72e5830182e1cdf055e431b0190569b607073ca52ec4e365c53f33ebf59c4536309aa33e9f16795f620cbe4ae8441037a1dd92ef750a8a4991d6b01f45f18fef_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 85, "offset": 3232}, "start": {"col": 25, "line": 85, "offset": 3219}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 85, "offset": 3244}, "start": {"col": 39, "line": 85, "offset": 3233}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 85, "offset": 3287}, "start": {"col": 89, "line": 85, "offset": 3283}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_06.cs", "start": {"col": 25, "line": 85, "offset": 3219}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 127, "offset": 4992}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 127, "offset": 4992}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_06.cs", "start": {"col": 25, "line": 127, "offset": 4919}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 127, "offset": 4987}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_06.cs", "start": {"col": 89, "line": 127, "offset": 4983}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "72e5830182e1cdf055e431b0190569b607073ca52ec4e365c53f33ebf59c4536309aa33e9f16795f620cbe4ae8441037a1dd92ef750a8a4991d6b01f45f18fef_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 127, "offset": 4932}, "start": {"col": 25, "line": 127, "offset": 4919}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 127, "offset": 4944}, "start": {"col": 39, "line": 127, "offset": 4933}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 127, "offset": 4987}, "start": {"col": 89, "line": 127, "offset": 4983}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_06.cs", "start": {"col": 25, "line": 127, "offset": 4919}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 168, "offset": 6630}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 168, "offset": 6630}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_06.cs", "start": {"col": 25, "line": 168, "offset": 6557}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 168, "offset": 6625}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_06.cs", "start": {"col": 89, "line": 168, "offset": 6621}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "72e5830182e1cdf055e431b0190569b607073ca52ec4e365c53f33ebf59c4536309aa33e9f16795f620cbe4ae8441037a1dd92ef750a8a4991d6b01f45f18fef_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 168, "offset": 6570}, "start": {"col": 25, "line": 168, "offset": 6557}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 168, "offset": 6582}, "start": {"col": 39, "line": 168, "offset": 6571}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 168, "offset": 6625}, "start": {"col": 89, "line": 168, "offset": 6621}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_06.cs", "start": {"col": 25, "line": 168, "offset": 6557}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 85, "offset": 3296}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 85, "offset": 3296}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_07.cs", "start": {"col": 25, "line": 85, "offset": 3223}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 85, "offset": 3291}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_07.cs", "start": {"col": 89, "line": 85, "offset": 3287}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "1279ec1100e6c3af7c419b4eeaf9a9df9238fb44a82426406e9b19539f6c130053e9e2d67659cd38a9d046c12ed5f3ec104da573c83a8a67e05ab2b1831e499e_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 85, "offset": 3236}, "start": {"col": 25, "line": 85, "offset": 3223}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 85, "offset": 3248}, "start": {"col": 39, "line": 85, "offset": 3237}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 85, "offset": 3291}, "start": {"col": 89, "line": 85, "offset": 3287}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_07.cs", "start": {"col": 25, "line": 85, "offset": 3223}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 127, "offset": 4968}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 127, "offset": 4968}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_07.cs", "start": {"col": 25, "line": 127, "offset": 4895}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 127, "offset": 4963}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_07.cs", "start": {"col": 89, "line": 127, "offset": 4959}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "1279ec1100e6c3af7c419b4eeaf9a9df9238fb44a82426406e9b19539f6c130053e9e2d67659cd38a9d046c12ed5f3ec104da573c83a8a67e05ab2b1831e499e_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 127, "offset": 4908}, "start": {"col": 25, "line": 127, "offset": 4895}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 127, "offset": 4920}, "start": {"col": 39, "line": 127, "offset": 4909}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 127, "offset": 4963}, "start": {"col": 89, "line": 127, "offset": 4959}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_07.cs", "start": {"col": 25, "line": 127, "offset": 4895}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 168, "offset": 6592}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 168, "offset": 6592}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_07.cs", "start": {"col": 25, "line": 168, "offset": 6519}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 168, "offset": 6587}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_07.cs", "start": {"col": 89, "line": 168, "offset": 6583}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "1279ec1100e6c3af7c419b4eeaf9a9df9238fb44a82426406e9b19539f6c130053e9e2d67659cd38a9d046c12ed5f3ec104da573c83a8a67e05ab2b1831e499e_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 168, "offset": 6532}, "start": {"col": 25, "line": 168, "offset": 6519}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 168, "offset": 6544}, "start": {"col": 39, "line": 168, "offset": 6533}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 168, "offset": 6587}, "start": {"col": 89, "line": 168, "offset": 6583}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_07.cs", "start": {"col": 25, "line": 168, "offset": 6519}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 93, "offset": 3428}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 93, "offset": 3428}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_08.cs", "start": {"col": 25, "line": 93, "offset": 3355}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 93, "offset": 3423}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_08.cs", "start": {"col": 89, "line": 93, "offset": 3419}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "26416e54161af6d46eeacb65d3e68661cca69dc29d9608b9f27a8d93bf0e2aa9741ffcb73efca1ec09392138374c192cd0d3000f26db33f9892dcf9697a187ad_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 93, "offset": 3368}, "start": {"col": 25, "line": 93, "offset": 3355}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 93, "offset": 3380}, "start": {"col": 39, "line": 93, "offset": 3369}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 93, "offset": 3423}, "start": {"col": 89, "line": 93, "offset": 3419}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_08.cs", "start": {"col": 25, "line": 93, "offset": 3355}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 135, "offset": 5126}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 135, "offset": 5126}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_08.cs", "start": {"col": 25, "line": 135, "offset": 5053}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 135, "offset": 5121}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_08.cs", "start": {"col": 89, "line": 135, "offset": 5117}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "26416e54161af6d46eeacb65d3e68661cca69dc29d9608b9f27a8d93bf0e2aa9741ffcb73efca1ec09392138374c192cd0d3000f26db33f9892dcf9697a187ad_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 135, "offset": 5066}, "start": {"col": 25, "line": 135, "offset": 5053}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 135, "offset": 5078}, "start": {"col": 39, "line": 135, "offset": 5067}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 135, "offset": 5121}, "start": {"col": 89, "line": 135, "offset": 5117}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_08.cs", "start": {"col": 25, "line": 135, "offset": 5053}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 176, "offset": 6762}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 176, "offset": 6762}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_08.cs", "start": {"col": 25, "line": 176, "offset": 6689}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 176, "offset": 6757}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_08.cs", "start": {"col": 89, "line": 176, "offset": 6753}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "26416e54161af6d46eeacb65d3e68661cca69dc29d9608b9f27a8d93bf0e2aa9741ffcb73efca1ec09392138374c192cd0d3000f26db33f9892dcf9697a187ad_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 176, "offset": 6702}, "start": {"col": 25, "line": 176, "offset": 6689}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 176, "offset": 6714}, "start": {"col": 39, "line": 176, "offset": 6703}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 176, "offset": 6757}, "start": {"col": 89, "line": 176, "offset": 6753}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_08.cs", "start": {"col": 25, "line": 176, "offset": 6689}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 80, "offset": 3089}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 80, "offset": 3089}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_09.cs", "start": {"col": 25, "line": 80, "offset": 3016}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 80, "offset": 3084}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_09.cs", "start": {"col": 89, "line": 80, "offset": 3080}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "976c38f0f301d4d7d66c3a27d4af3b16d44245962878452474ec0ebcebab457b015d9ec0bc1252df8e07357db8257ba153114cfd0640f870e26ca6f475efe234_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 80, "offset": 3029}, "start": {"col": 25, "line": 80, "offset": 3016}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 80, "offset": 3041}, "start": {"col": 39, "line": 80, "offset": 3030}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 80, "offset": 3084}, "start": {"col": 89, "line": 80, "offset": 3080}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_09.cs", "start": {"col": 25, "line": 80, "offset": 3016}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 122, "offset": 4799}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 122, "offset": 4799}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_09.cs", "start": {"col": 25, "line": 122, "offset": 4726}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 122, "offset": 4794}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_09.cs", "start": {"col": 89, "line": 122, "offset": 4790}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "976c38f0f301d4d7d66c3a27d4af3b16d44245962878452474ec0ebcebab457b015d9ec0bc1252df8e07357db8257ba153114cfd0640f870e26ca6f475efe234_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 122, "offset": 4739}, "start": {"col": 25, "line": 122, "offset": 4726}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 122, "offset": 4751}, "start": {"col": 39, "line": 122, "offset": 4740}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 122, "offset": 4794}, "start": {"col": 89, "line": 122, "offset": 4790}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_09.cs", "start": {"col": 25, "line": 122, "offset": 4726}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 163, "offset": 6441}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 163, "offset": 6441}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_09.cs", "start": {"col": 25, "line": 163, "offset": 6368}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 163, "offset": 6436}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_09.cs", "start": {"col": 89, "line": 163, "offset": 6432}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "976c38f0f301d4d7d66c3a27d4af3b16d44245962878452474ec0ebcebab457b015d9ec0bc1252df8e07357db8257ba153114cfd0640f870e26ca6f475efe234_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 163, "offset": 6381}, "start": {"col": 25, "line": 163, "offset": 6368}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 163, "offset": 6393}, "start": {"col": 39, "line": 163, "offset": 6382}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 163, "offset": 6436}, "start": {"col": 89, "line": 163, "offset": 6432}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_09.cs", "start": {"col": 25, "line": 163, "offset": 6368}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 80, "offset": 3049}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 80, "offset": 3049}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_10.cs", "start": {"col": 25, "line": 80, "offset": 2976}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 80, "offset": 3044}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_10.cs", "start": {"col": 89, "line": 80, "offset": 3040}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "fe5ef7446cfd21cc3bb0e4e18e673f4bfbed372a9f4789d58848d15d5366b0b64b4ee2a597ee1cd3de0396991bfc3b01a97bfdc0f07e9ce684933227c67107aa_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 80, "offset": 2989}, "start": {"col": 25, "line": 80, "offset": 2976}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 80, "offset": 3001}, "start": {"col": 39, "line": 80, "offset": 2990}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 80, "offset": 3044}, "start": {"col": 89, "line": 80, "offset": 3040}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_10.cs", "start": {"col": 25, "line": 80, "offset": 2976}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 122, "offset": 4719}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 122, "offset": 4719}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_10.cs", "start": {"col": 25, "line": 122, "offset": 4646}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 122, "offset": 4714}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_10.cs", "start": {"col": 89, "line": 122, "offset": 4710}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "fe5ef7446cfd21cc3bb0e4e18e673f4bfbed372a9f4789d58848d15d5366b0b64b4ee2a597ee1cd3de0396991bfc3b01a97bfdc0f07e9ce684933227c67107aa_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 122, "offset": 4659}, "start": {"col": 25, "line": 122, "offset": 4646}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 122, "offset": 4671}, "start": {"col": 39, "line": 122, "offset": 4660}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 122, "offset": 4714}, "start": {"col": 89, "line": 122, "offset": 4710}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_10.cs", "start": {"col": 25, "line": 122, "offset": 4646}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 163, "offset": 6341}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 163, "offset": 6341}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_10.cs", "start": {"col": 25, "line": 163, "offset": 6268}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 163, "offset": 6336}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_10.cs", "start": {"col": 89, "line": 163, "offset": 6332}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "fe5ef7446cfd21cc3bb0e4e18e673f4bfbed372a9f4789d58848d15d5366b0b64b4ee2a597ee1cd3de0396991bfc3b01a97bfdc0f07e9ce684933227c67107aa_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 163, "offset": 6281}, "start": {"col": 25, "line": 163, "offset": 6268}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 163, "offset": 6293}, "start": {"col": 39, "line": 163, "offset": 6282}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 163, "offset": 6336}, "start": {"col": 89, "line": 163, "offset": 6332}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_10.cs", "start": {"col": 25, "line": 163, "offset": 6268}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 80, "offset": 3084}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 80, "offset": 3084}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_11.cs", "start": {"col": 25, "line": 80, "offset": 3011}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 80, "offset": 3079}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_11.cs", "start": {"col": 89, "line": 80, "offset": 3075}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "0cdf82f632da9d78f1336f0a3e4c26b1202c21449d3644717cd69c6ec423091cd5df0ec65a06b2fb9c6e8e5bd6ba05d63b5cbcfaa1dae120ba99ba0dffc8d3c6_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 80, "offset": 3024}, "start": {"col": 25, "line": 80, "offset": 3011}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 80, "offset": 3036}, "start": {"col": 39, "line": 80, "offset": 3025}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 80, "offset": 3079}, "start": {"col": 89, "line": 80, "offset": 3075}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_11.cs", "start": {"col": 25, "line": 80, "offset": 3011}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 122, "offset": 4790}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 122, "offset": 4790}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_11.cs", "start": {"col": 25, "line": 122, "offset": 4717}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 122, "offset": 4785}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_11.cs", "start": {"col": 89, "line": 122, "offset": 4781}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "0cdf82f632da9d78f1336f0a3e4c26b1202c21449d3644717cd69c6ec423091cd5df0ec65a06b2fb9c6e8e5bd6ba05d63b5cbcfaa1dae120ba99ba0dffc8d3c6_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 122, "offset": 4730}, "start": {"col": 25, "line": 122, "offset": 4717}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 122, "offset": 4742}, "start": {"col": 39, "line": 122, "offset": 4731}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 122, "offset": 4785}, "start": {"col": 89, "line": 122, "offset": 4781}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_11.cs", "start": {"col": 25, "line": 122, "offset": 4717}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 163, "offset": 6430}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 163, "offset": 6430}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_11.cs", "start": {"col": 25, "line": 163, "offset": 6357}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 163, "offset": 6425}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_11.cs", "start": {"col": 89, "line": 163, "offset": 6421}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "0cdf82f632da9d78f1336f0a3e4c26b1202c21449d3644717cd69c6ec423091cd5df0ec65a06b2fb9c6e8e5bd6ba05d63b5cbcfaa1dae120ba99ba0dffc8d3c6_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 163, "offset": 6370}, "start": {"col": 25, "line": 163, "offset": 6357}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 163, "offset": 6382}, "start": {"col": 39, "line": 163, "offset": 6371}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 163, "offset": 6425}, "start": {"col": 89, "line": 163, "offset": 6421}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_11.cs", "start": {"col": 25, "line": 163, "offset": 6357}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 79, "offset": 2950}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 79, "offset": 2950}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_12.cs", "start": {"col": 25, "line": 79, "offset": 2877}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 79, "offset": 2945}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_12.cs", "start": {"col": 89, "line": 79, "offset": 2941}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "eef6b990a9993cd6278657f45afa4bba0d94f9ecce0a9869464c22964e327fcb5aba8b63f541295c8fb98883752edbc1f4034b6227a1260ca72f8ed5c0bb837a_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 79, "offset": 2890}, "start": {"col": 25, "line": 79, "offset": 2877}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 79, "offset": 2902}, "start": {"col": 39, "line": 79, "offset": 2891}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 79, "offset": 2945}, "start": {"col": 89, "line": 79, "offset": 2941}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_12.cs", "start": {"col": 25, "line": 79, "offset": 2877}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 80, "offset": 3100}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 80, "offset": 3100}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_13.cs", "start": {"col": 25, "line": 80, "offset": 3027}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 80, "offset": 3095}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_13.cs", "start": {"col": 89, "line": 80, "offset": 3091}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "000d31f0629ca2158e57f27fd24f5ba6f6eda2aca150aee2487b9160eebe1f61b72d6d0508bccb1deacde6445f8fc4a44f13352b688ae204b414e88ebfb67e92_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 80, "offset": 3040}, "start": {"col": 25, "line": 80, "offset": 3027}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 80, "offset": 3052}, "start": {"col": 39, "line": 80, "offset": 3041}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 80, "offset": 3095}, "start": {"col": 89, "line": 80, "offset": 3091}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_13.cs", "start": {"col": 25, "line": 80, "offset": 3027}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 122, "offset": 4820}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 122, "offset": 4820}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_13.cs", "start": {"col": 25, "line": 122, "offset": 4747}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 122, "offset": 4815}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_13.cs", "start": {"col": 89, "line": 122, "offset": 4811}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "000d31f0629ca2158e57f27fd24f5ba6f6eda2aca150aee2487b9160eebe1f61b72d6d0508bccb1deacde6445f8fc4a44f13352b688ae204b414e88ebfb67e92_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 122, "offset": 4760}, "start": {"col": 25, "line": 122, "offset": 4747}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 122, "offset": 4772}, "start": {"col": 39, "line": 122, "offset": 4761}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 122, "offset": 4815}, "start": {"col": 89, "line": 122, "offset": 4811}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_13.cs", "start": {"col": 25, "line": 122, "offset": 4747}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 163, "offset": 6468}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 163, "offset": 6468}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_13.cs", "start": {"col": 25, "line": 163, "offset": 6395}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 163, "offset": 6463}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_13.cs", "start": {"col": 89, "line": 163, "offset": 6459}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "000d31f0629ca2158e57f27fd24f5ba6f6eda2aca150aee2487b9160eebe1f61b72d6d0508bccb1deacde6445f8fc4a44f13352b688ae204b414e88ebfb67e92_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 163, "offset": 6408}, "start": {"col": 25, "line": 163, "offset": 6395}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 163, "offset": 6420}, "start": {"col": 39, "line": 163, "offset": 6409}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 163, "offset": 6463}, "start": {"col": 89, "line": 163, "offset": 6459}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_13.cs", "start": {"col": 25, "line": 163, "offset": 6395}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 80, "offset": 3060}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 80, "offset": 3060}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_14.cs", "start": {"col": 25, "line": 80, "offset": 2987}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 80, "offset": 3055}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_14.cs", "start": {"col": 89, "line": 80, "offset": 3051}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "e91da1bf71c54b4a67857cc11fa9ea2b5a906c5d665a8902eea08c235e2bd793b50338454cf752771e25978839ce14f977fa5adb700c667d30f5c86768876ab6_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 80, "offset": 3000}, "start": {"col": 25, "line": 80, "offset": 2987}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 80, "offset": 3012}, "start": {"col": 39, "line": 80, "offset": 3001}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 80, "offset": 3055}, "start": {"col": 89, "line": 80, "offset": 3051}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_14.cs", "start": {"col": 25, "line": 80, "offset": 2987}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 122, "offset": 4740}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 122, "offset": 4740}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_14.cs", "start": {"col": 25, "line": 122, "offset": 4667}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 122, "offset": 4735}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_14.cs", "start": {"col": 89, "line": 122, "offset": 4731}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "e91da1bf71c54b4a67857cc11fa9ea2b5a906c5d665a8902eea08c235e2bd793b50338454cf752771e25978839ce14f977fa5adb700c667d30f5c86768876ab6_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 122, "offset": 4680}, "start": {"col": 25, "line": 122, "offset": 4667}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 122, "offset": 4692}, "start": {"col": 39, "line": 122, "offset": 4681}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 122, "offset": 4735}, "start": {"col": 89, "line": 122, "offset": 4731}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_14.cs", "start": {"col": 25, "line": 122, "offset": 4667}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 163, "offset": 6368}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 163, "offset": 6368}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_14.cs", "start": {"col": 25, "line": 163, "offset": 6295}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 163, "offset": 6363}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_14.cs", "start": {"col": 89, "line": 163, "offset": 6359}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "e91da1bf71c54b4a67857cc11fa9ea2b5a906c5d665a8902eea08c235e2bd793b50338454cf752771e25978839ce14f977fa5adb700c667d30f5c86768876ab6_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 163, "offset": 6308}, "start": {"col": 25, "line": 163, "offset": 6295}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 163, "offset": 6320}, "start": {"col": 39, "line": 163, "offset": 6309}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 163, "offset": 6363}, "start": {"col": 89, "line": 163, "offset": 6359}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_14.cs", "start": {"col": 25, "line": 163, "offset": 6295}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 82, "offset": 3072}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 82, "offset": 3072}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_15.cs", "start": {"col": 25, "line": 82, "offset": 2999}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 82, "offset": 3067}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_15.cs", "start": {"col": 89, "line": 82, "offset": 3063}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "7511be3e5706fefeb05422d2e5281d8c64caf9c7934bcc9183373cd160c517e3c535d0b16ab7e8142ea5f172cc43ce87e4a89d9c85b7956e956d6cafed5064a4_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 82, "offset": 3012}, "start": {"col": 25, "line": 82, "offset": 2999}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 82, "offset": 3024}, "start": {"col": 39, "line": 82, "offset": 3013}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 82, "offset": 3067}, "start": {"col": 89, "line": 82, "offset": 3063}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_15.cs", "start": {"col": 25, "line": 82, "offset": 2999}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 131, "offset": 4962}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 131, "offset": 4962}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_15.cs", "start": {"col": 25, "line": 131, "offset": 4889}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 131, "offset": 4957}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_15.cs", "start": {"col": 89, "line": 131, "offset": 4953}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "7511be3e5706fefeb05422d2e5281d8c64caf9c7934bcc9183373cd160c517e3c535d0b16ab7e8142ea5f172cc43ce87e4a89d9c85b7956e956d6cafed5064a4_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 131, "offset": 4902}, "start": {"col": 25, "line": 131, "offset": 4889}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 131, "offset": 4914}, "start": {"col": 39, "line": 131, "offset": 4903}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 131, "offset": 4957}, "start": {"col": 89, "line": 131, "offset": 4953}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_15.cs", "start": {"col": 25, "line": 131, "offset": 4889}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 179, "offset": 6822}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 179, "offset": 6822}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_15.cs", "start": {"col": 25, "line": 179, "offset": 6749}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 179, "offset": 6817}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_15.cs", "start": {"col": 89, "line": 179, "offset": 6813}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "7511be3e5706fefeb05422d2e5281d8c64caf9c7934bcc9183373cd160c517e3c535d0b16ab7e8142ea5f172cc43ce87e4a89d9c85b7956e956d6cafed5064a4_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 179, "offset": 6762}, "start": {"col": 25, "line": 179, "offset": 6749}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 179, "offset": 6774}, "start": {"col": 39, "line": 179, "offset": 6763}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 179, "offset": 6817}, "start": {"col": 89, "line": 179, "offset": 6813}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_15.cs", "start": {"col": 25, "line": 179, "offset": 6749}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 75, "offset": 2796}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 75, "offset": 2796}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_16.cs", "start": {"col": 25, "line": 75, "offset": 2723}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 75, "offset": 2791}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_16.cs", "start": {"col": 89, "line": 75, "offset": 2787}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "ad49a6af25ee19ac238b237a133c517aa82d304a874376db69e6a0db6ff93657ed8ddaac47a9a9af5199a3a305c015c301b1cd4790403336806b09a74c74aae9_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 75, "offset": 2736}, "start": {"col": 25, "line": 75, "offset": 2723}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 75, "offset": 2748}, "start": {"col": 39, "line": 75, "offset": 2737}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 75, "offset": 2791}, "start": {"col": 89, "line": 75, "offset": 2787}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_16.cs", "start": {"col": 25, "line": 75, "offset": 2723}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 113, "offset": 4209}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 113, "offset": 4209}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_16.cs", "start": {"col": 25, "line": 113, "offset": 4136}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 113, "offset": 4204}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_16.cs", "start": {"col": 89, "line": 113, "offset": 4200}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "ad49a6af25ee19ac238b237a133c517aa82d304a874376db69e6a0db6ff93657ed8ddaac47a9a9af5199a3a305c015c301b1cd4790403336806b09a74c74aae9_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 113, "offset": 4149}, "start": {"col": 25, "line": 113, "offset": 4136}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 113, "offset": 4161}, "start": {"col": 39, "line": 113, "offset": 4150}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 113, "offset": 4204}, "start": {"col": 89, "line": 113, "offset": 4200}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_16.cs", "start": {"col": 25, "line": 113, "offset": 4136}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 75, "offset": 2823}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 75, "offset": 2823}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_17.cs", "start": {"col": 25, "line": 75, "offset": 2750}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 75, "offset": 2818}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_17.cs", "start": {"col": 89, "line": 75, "offset": 2814}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "7252c79eaea5cf610c0d34d135fe3de95006422243d96acc0160e21c0e2d5636cd68949d5a3623e6102e3487923709d3db54f5c2e7ac4f298e5311ae4ba3cb83_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 75, "offset": 2763}, "start": {"col": 25, "line": 75, "offset": 2750}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 75, "offset": 2775}, "start": {"col": 39, "line": 75, "offset": 2764}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 75, "offset": 2818}, "start": {"col": 89, "line": 75, "offset": 2814}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_17.cs", "start": {"col": 25, "line": 75, "offset": 2750}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 108, "offset": 4159}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 108, "offset": 4159}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_17.cs", "start": {"col": 25, "line": 108, "offset": 4086}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 108, "offset": 4154}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_17.cs", "start": {"col": 89, "line": 108, "offset": 4150}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "7252c79eaea5cf610c0d34d135fe3de95006422243d96acc0160e21c0e2d5636cd68949d5a3623e6102e3487923709d3db54f5c2e7ac4f298e5311ae4ba3cb83_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 108, "offset": 4099}, "start": {"col": 25, "line": 108, "offset": 4086}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 108, "offset": 4111}, "start": {"col": 39, "line": 108, "offset": 4100}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 108, "offset": 4154}, "start": {"col": 89, "line": 108, "offset": 4150}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_17.cs", "start": {"col": 25, "line": 108, "offset": 4086}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 80, "offset": 2987}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 80, "offset": 2987}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_21.cs", "start": {"col": 25, "line": 80, "offset": 2914}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 80, "offset": 2982}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_21.cs", "start": {"col": 89, "line": 80, "offset": 2978}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "fdec5bb3b0a363730b8e24be510a5a781b36ab213e7bed91e4ca1ad1c6195443b3f145adab7dcf6b5594b1fd23863d3fc2875b8a48a4985e42b790237a42e1bc_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 80, "offset": 2927}, "start": {"col": 25, "line": 80, "offset": 2914}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 80, "offset": 2939}, "start": {"col": 39, "line": 80, "offset": 2928}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 80, "offset": 2982}, "start": {"col": 89, "line": 80, "offset": 2978}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_21.cs", "start": {"col": 25, "line": 80, "offset": 2914}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 267, "offset": 10490}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 267, "offset": 10490}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_21.cs", "start": {"col": 25, "line": 267, "offset": 10417}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 267, "offset": 10485}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_21.cs", "start": {"col": 89, "line": 267, "offset": 10481}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "fdec5bb3b0a363730b8e24be510a5a781b36ab213e7bed91e4ca1ad1c6195443b3f145adab7dcf6b5594b1fd23863d3fc2875b8a48a4985e42b790237a42e1bc_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 267, "offset": 10430}, "start": {"col": 25, "line": 267, "offset": 10417}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 267, "offset": 10442}, "start": {"col": 39, "line": 267, "offset": 10431}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 267, "offset": 10485}, "start": {"col": 89, "line": 267, "offset": 10481}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_21.cs", "start": {"col": 25, "line": 267, "offset": 10417}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 42, "offset": 1645}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 42, "offset": 1645}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_22b.cs", "start": {"col": 25, "line": 42, "offset": 1572}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 42, "offset": 1640}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_22b.cs", "start": {"col": 89, "line": 42, "offset": 1636}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "d31e735e07910dda691306ae1f9f64ce932a5657f04cf0ce3a33a693403124f7e4680dc377a03ab14d5182c12cba379cb78830d708499f4fd4cbe644b616aaa0_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 42, "offset": 1585}, "start": {"col": 25, "line": 42, "offset": 1572}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 42, "offset": 1597}, "start": {"col": 39, "line": 42, "offset": 1586}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 42, "offset": 1640}, "start": {"col": 89, "line": 42, "offset": 1636}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_22b.cs", "start": {"col": 25, "line": 42, "offset": 1572}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 155, "offset": 6659}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 155, "offset": 6659}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_22b.cs", "start": {"col": 25, "line": 155, "offset": 6586}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 155, "offset": 6654}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_22b.cs", "start": {"col": 89, "line": 155, "offset": 6650}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "d31e735e07910dda691306ae1f9f64ce932a5657f04cf0ce3a33a693403124f7e4680dc377a03ab14d5182c12cba379cb78830d708499f4fd4cbe644b616aaa0_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 155, "offset": 6599}, "start": {"col": 25, "line": 155, "offset": 6586}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 155, "offset": 6611}, "start": {"col": 39, "line": 155, "offset": 6600}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 155, "offset": 6654}, "start": {"col": 89, "line": 155, "offset": 6650}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_22b.cs", "start": {"col": 25, "line": 155, "offset": 6586}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 75, "offset": 2867}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "dataCopy", "location": {"end": {"col": 21, "line": 63, "offset": 2274}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_31.cs", "start": {"col": 13, "line": 63, "offset": 2266}}}, {"content": "data", "location": {"end": {"col": 24, "line": 66, "offset": 2329}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_31.cs", "start": {"col": 20, "line": 66, "offset": 2325}}}], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 75, "offset": 2867}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_31.cs", "start": {"col": 25, "line": 75, "offset": 2794}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 28, "line": 63, "offset": 2281}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_31.cs", "start": {"col": 24, "line": 63, "offset": 2277}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "4af164413a04505aaae3160a7d759191bc0c02c530d39bd693b3e95d77a003ffd81dde92625fea58ba7a399d60d743f015fbe2b59f2f2391c9dcab407070a9e7_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 75, "offset": 2807}, "start": {"col": 25, "line": 75, "offset": 2794}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 75, "offset": 2819}, "start": {"col": 39, "line": 75, "offset": 2808}}, "$X": {"abstract_content": "data", "end": {"col": 28, "line": 63, "offset": 2281}, "start": {"col": 24, "line": 63, "offset": 2277}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_31.cs", "start": {"col": 25, "line": 75, "offset": 2794}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 41, "offset": 1501}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 41, "offset": 1501}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_41.cs", "start": {"col": 21, "line": 41, "offset": 1428}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 41, "offset": 1496}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_41.cs", "start": {"col": 85, "line": 41, "offset": 1492}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "c2408d1826e0e9ca1fd6eb804c8dde4c3808a205399adec1e2ec95c703068bc6729cd7e7f725874ede949651c119a7b559ff05bf8eb5c7d9e4827b3e7a57eaec_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 41, "offset": 1441}, "start": {"col": 21, "line": 41, "offset": 1428}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 41, "offset": 1453}, "start": {"col": 35, "line": 41, "offset": 1442}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 41, "offset": 1496}, "start": {"col": 85, "line": 41, "offset": 1492}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_41.cs", "start": {"col": 21, "line": 41, "offset": 1428}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 106, "offset": 3979}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 106, "offset": 3979}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_41.cs", "start": {"col": 21, "line": 106, "offset": 3906}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 106, "offset": 3974}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_41.cs", "start": {"col": 85, "line": 106, "offset": 3970}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "c2408d1826e0e9ca1fd6eb804c8dde4c3808a205399adec1e2ec95c703068bc6729cd7e7f725874ede949651c119a7b559ff05bf8eb5c7d9e4827b3e7a57eaec_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 106, "offset": 3919}, "start": {"col": 21, "line": 106, "offset": 3906}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 106, "offset": 3931}, "start": {"col": 35, "line": 106, "offset": 3920}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 106, "offset": 3974}, "start": {"col": 85, "line": 106, "offset": 3970}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_41.cs", "start": {"col": 21, "line": 106, "offset": 3906}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 75, "offset": 2765}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 75, "offset": 2765}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_42.cs", "start": {"col": 21, "line": 75, "offset": 2692}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 75, "offset": 2760}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_42.cs", "start": {"col": 85, "line": 75, "offset": 2756}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "cb8a7f1b160c35787d99e4951d4977f5ddcad8bde35fc227f36ca35fd9fc5fb2277ff14999eec1b78dcddb78988cf00cb4927d8f8b8082b443f71d88eaa9573e_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 75, "offset": 2705}, "start": {"col": 21, "line": 75, "offset": 2692}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 75, "offset": 2717}, "start": {"col": 35, "line": 75, "offset": 2706}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 75, "offset": 2760}, "propagated_value": {"svalue_abstract_content": "BadSource(req resp)", "svalue_end": {"col": 43, "line": 66, "offset": 2274}, "svalue_start": {"col": 23, "line": 66, "offset": 2254}}, "start": {"col": 85, "line": 75, "offset": 2756}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_42.cs", "start": {"col": 21, "line": 75, "offset": 2692}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 111, "offset": 4129}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 111, "offset": 4129}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_42.cs", "start": {"col": 21, "line": 111, "offset": 4056}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 111, "offset": 4124}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_42.cs", "start": {"col": 85, "line": 111, "offset": 4120}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "cb8a7f1b160c35787d99e4951d4977f5ddcad8bde35fc227f36ca35fd9fc5fb2277ff14999eec1b78dcddb78988cf00cb4927d8f8b8082b443f71d88eaa9573e_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 111, "offset": 4069}, "start": {"col": 21, "line": 111, "offset": 4056}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 111, "offset": 4081}, "start": {"col": 35, "line": 111, "offset": 4070}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 111, "offset": 4124}, "propagated_value": {"svalue_abstract_content": "GoodG2BSource(req resp)", "svalue_end": {"col": 47, "line": 102, "offset": 3638}, "svalue_start": {"col": 23, "line": 102, "offset": 3614}}, "start": {"col": 85, "line": 111, "offset": 4120}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_42.cs", "start": {"col": 21, "line": 111, "offset": 4056}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 46, "offset": 1631}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "data", "location": {"end": {"col": 20, "line": 37, "offset": 1130}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_45.cs", "start": {"col": 16, "line": 37, "offset": 1126}}}], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 46, "offset": 1631}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_45.cs", "start": {"col": 21, "line": 46, "offset": 1558}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 30, "line": 37, "offset": 1140}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_45.cs", "start": {"col": 23, "line": 37, "offset": 1133}}, "dataBad"]]}, "engine_kind": "OSS", "fingerprint": "3bdc50be1a0d7229d9f19cb99f058385831324c3da2c10918f5877da80f626243b9a0a051466f7c563b0e974744405b7e921b2efab38a56cfe9c84076ddc29ba_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 46, "offset": 1571}, "start": {"col": 21, "line": 46, "offset": 1558}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 46, "offset": 1583}, "start": {"col": 35, "line": 46, "offset": 1572}}, "$X": {"abstract_content": "dataBad", "end": {"col": 30, "line": 37, "offset": 1140}, "start": {"col": 23, "line": 37, "offset": 1133}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_45.cs", "start": {"col": 21, "line": 46, "offset": 1558}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 113, "offset": 4141}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "data", "location": {"end": {"col": 20, "line": 104, "offset": 3636}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_45.cs", "start": {"col": 16, "line": 104, "offset": 3632}}}], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 113, "offset": 4141}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_45.cs", "start": {"col": 21, "line": 113, "offset": 4068}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 34, "line": 104, "offset": 3650}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_45.cs", "start": {"col": 23, "line": 104, "offset": 3639}}, "dataGoodG2B"]]}, "engine_kind": "OSS", "fingerprint": "4886b418b592629fd24bd09af2694c5b59f08a7a97f2c0701606bb8c24a5888036a53d179035bd86500af48a3c78abef222e824f96b3a4f128ffd46bdec610d5_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 113, "offset": 4081}, "start": {"col": 21, "line": 113, "offset": 4068}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 113, "offset": 4093}, "start": {"col": 35, "line": 113, "offset": 4082}}, "$X": {"abstract_content": "dataGoodG2B", "end": {"col": 34, "line": 104, "offset": 3650}, "start": {"col": 23, "line": 104, "offset": 3639}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_45.cs", "start": {"col": 21, "line": 113, "offset": 4068}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 40, "offset": 1504}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 40, "offset": 1504}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_51b.cs", "start": {"col": 21, "line": 40, "offset": 1431}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 40, "offset": 1499}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_51b.cs", "start": {"col": 85, "line": 40, "offset": 1495}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "66e63fce6f890b826626443e4e5d54ca14662d493bb8e12d28bda0d7a22605c7c2ae382a99653b3fb34e2610c89bfe7a0f0001828a1f9c0d1632618ded3c2584_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 40, "offset": 1444}, "start": {"col": 21, "line": 40, "offset": 1431}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 40, "offset": 1456}, "start": {"col": 35, "line": 40, "offset": 1445}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 40, "offset": 1499}, "start": {"col": 85, "line": 40, "offset": 1495}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_51b.cs", "start": {"col": 21, "line": 40, "offset": 1431}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 68, "offset": 2625}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 68, "offset": 2625}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_51b.cs", "start": {"col": 21, "line": 68, "offset": 2552}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 68, "offset": 2620}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_51b.cs", "start": {"col": 85, "line": 68, "offset": 2616}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "66e63fce6f890b826626443e4e5d54ca14662d493bb8e12d28bda0d7a22605c7c2ae382a99653b3fb34e2610c89bfe7a0f0001828a1f9c0d1632618ded3c2584_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 68, "offset": 2565}, "start": {"col": 21, "line": 68, "offset": 2552}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 68, "offset": 2577}, "start": {"col": 35, "line": 68, "offset": 2566}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 68, "offset": 2620}, "start": {"col": 85, "line": 68, "offset": 2616}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_51b.cs", "start": {"col": 21, "line": 68, "offset": 2552}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 40, "offset": 1519}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 40, "offset": 1519}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_52c.cs", "start": {"col": 21, "line": 40, "offset": 1446}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 40, "offset": 1514}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_52c.cs", "start": {"col": 85, "line": 40, "offset": 1510}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "bae09c9161056c8dce03e727ee4349b75c876f8d6de0d602b8572053646cb3c8bd2b3ff4c1db73ff7d8885dffdf949d75059646f1c6744f44404eb0456df9556_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 40, "offset": 1459}, "start": {"col": 21, "line": 40, "offset": 1446}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 40, "offset": 1471}, "start": {"col": 35, "line": 40, "offset": 1460}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 40, "offset": 1514}, "start": {"col": 85, "line": 40, "offset": 1510}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_52c.cs", "start": {"col": 21, "line": 40, "offset": 1446}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 68, "offset": 2640}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 68, "offset": 2640}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_52c.cs", "start": {"col": 21, "line": 68, "offset": 2567}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 68, "offset": 2635}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_52c.cs", "start": {"col": 85, "line": 68, "offset": 2631}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "bae09c9161056c8dce03e727ee4349b75c876f8d6de0d602b8572053646cb3c8bd2b3ff4c1db73ff7d8885dffdf949d75059646f1c6744f44404eb0456df9556_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 68, "offset": 2580}, "start": {"col": 21, "line": 68, "offset": 2567}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 68, "offset": 2592}, "start": {"col": 35, "line": 68, "offset": 2581}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 68, "offset": 2635}, "start": {"col": 85, "line": 68, "offset": 2631}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_52c.cs", "start": {"col": 21, "line": 68, "offset": 2567}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 40, "offset": 1546}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 40, "offset": 1546}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_53d.cs", "start": {"col": 21, "line": 40, "offset": 1473}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 40, "offset": 1541}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_53d.cs", "start": {"col": 85, "line": 40, "offset": 1537}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "a593735c34899d7754045f6b2b1b25acebfabd8464cae94d17bfa5b831dede9252960668fc5385abecff2efc727a178419b2d84667e4bdf6caec3042d34dd686_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 40, "offset": 1486}, "start": {"col": 21, "line": 40, "offset": 1473}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 40, "offset": 1498}, "start": {"col": 35, "line": 40, "offset": 1487}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 40, "offset": 1541}, "start": {"col": 85, "line": 40, "offset": 1537}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_53d.cs", "start": {"col": 21, "line": 40, "offset": 1473}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 68, "offset": 2667}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 68, "offset": 2667}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_53d.cs", "start": {"col": 21, "line": 68, "offset": 2594}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 68, "offset": 2662}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_53d.cs", "start": {"col": 85, "line": 68, "offset": 2658}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "a593735c34899d7754045f6b2b1b25acebfabd8464cae94d17bfa5b831dede9252960668fc5385abecff2efc727a178419b2d84667e4bdf6caec3042d34dd686_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 68, "offset": 2607}, "start": {"col": 21, "line": 68, "offset": 2594}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 68, "offset": 2619}, "start": {"col": 35, "line": 68, "offset": 2608}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 68, "offset": 2662}, "start": {"col": 85, "line": 68, "offset": 2658}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_53d.cs", "start": {"col": 21, "line": 68, "offset": 2594}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 40, "offset": 1547}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 40, "offset": 1547}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_54e.cs", "start": {"col": 21, "line": 40, "offset": 1474}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 40, "offset": 1542}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_54e.cs", "start": {"col": 85, "line": 40, "offset": 1538}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "bb19aab74c382b46be4351e60f2abc8b173f4e084324facab89d933467bc906752fce30689b3c94b0665ef08e6606555f096eda6402c16ddf9c004011c03a4b5_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 40, "offset": 1487}, "start": {"col": 21, "line": 40, "offset": 1474}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 40, "offset": 1499}, "start": {"col": 35, "line": 40, "offset": 1488}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 40, "offset": 1542}, "start": {"col": 85, "line": 40, "offset": 1538}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_54e.cs", "start": {"col": 21, "line": 40, "offset": 1474}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 68, "offset": 2668}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 68, "offset": 2668}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_54e.cs", "start": {"col": 21, "line": 68, "offset": 2595}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 68, "offset": 2663}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_54e.cs", "start": {"col": 85, "line": 68, "offset": 2659}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "bb19aab74c382b46be4351e60f2abc8b173f4e084324facab89d933467bc906752fce30689b3c94b0665ef08e6606555f096eda6402c16ddf9c004011c03a4b5_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 68, "offset": 2608}, "start": {"col": 21, "line": 68, "offset": 2595}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 68, "offset": 2620}, "start": {"col": 35, "line": 68, "offset": 2609}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 68, "offset": 2663}, "start": {"col": 85, "line": 68, "offset": 2659}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_54e.cs", "start": {"col": 21, "line": 68, "offset": 2595}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 41, "offset": 1592}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 41, "offset": 1592}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_61a.cs", "start": {"col": 21, "line": 41, "offset": 1519}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 41, "offset": 1587}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_61a.cs", "start": {"col": 85, "line": 41, "offset": 1583}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "ad2f3df949bcdd8399c180bd861f98e910341b39242228494f5bae1b51fefa4c1935f03d4a4119fd55fb45d73212427c6c9a374a3196c0246655d9586c8da366_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 41, "offset": 1532}, "start": {"col": 21, "line": 41, "offset": 1519}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 41, "offset": 1544}, "start": {"col": 35, "line": 41, "offset": 1533}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 41, "offset": 1587}, "propagated_value": {"svalue_abstract_content": "CWE89_SQL_Injection__Web_Database_ExecuteScalar_61b.BadSource(req resp)", "svalue_end": {"col": 95, "line": 32, "offset": 1101}, "svalue_start": {"col": 23, "line": 32, "offset": 1029}}, "start": {"col": 85, "line": 41, "offset": 1583}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_61a.cs", "start": {"col": 21, "line": 41, "offset": 1519}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 75, "offset": 2946}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 75, "offset": 2946}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_61a.cs", "start": {"col": 21, "line": 75, "offset": 2873}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 75, "offset": 2941}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_61a.cs", "start": {"col": 85, "line": 75, "offset": 2937}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "ad2f3df949bcdd8399c180bd861f98e910341b39242228494f5bae1b51fefa4c1935f03d4a4119fd55fb45d73212427c6c9a374a3196c0246655d9586c8da366_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 75, "offset": 2886}, "start": {"col": 21, "line": 75, "offset": 2873}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 75, "offset": 2898}, "start": {"col": 35, "line": 75, "offset": 2887}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 75, "offset": 2941}, "propagated_value": {"svalue_abstract_content": "CWE89_SQL_Injection__Web_Database_ExecuteScalar_61b.GoodG2BSource(req resp)", "svalue_end": {"col": 99, "line": 66, "offset": 2455}, "svalue_start": {"col": 23, "line": 66, "offset": 2379}}, "start": {"col": 85, "line": 75, "offset": 2937}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_61a.cs", "start": {"col": 21, "line": 75, "offset": 2873}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 41, "offset": 1548}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 41, "offset": 1548}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_66b.cs", "start": {"col": 21, "line": 41, "offset": 1475}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 41, "offset": 1543}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_66b.cs", "start": {"col": 85, "line": 41, "offset": 1539}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "f7f2498f102fdee9a0c7340824216f834cf50cf9007335a153b846c9f5b3ef40aa6c5310011f63cd3ea84152e8af4ef1d0f72d30f71a7ebf37942b49ba38eace_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 41, "offset": 1488}, "start": {"col": 21, "line": 41, "offset": 1475}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 41, "offset": 1500}, "start": {"col": 35, "line": 41, "offset": 1489}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 41, "offset": 1543}, "start": {"col": 85, "line": 41, "offset": 1539}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_66b.cs", "start": {"col": 21, "line": 41, "offset": 1475}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 70, "offset": 2713}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 70, "offset": 2713}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_66b.cs", "start": {"col": 21, "line": 70, "offset": 2640}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 70, "offset": 2708}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_66b.cs", "start": {"col": 85, "line": 70, "offset": 2704}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "f7f2498f102fdee9a0c7340824216f834cf50cf9007335a153b846c9f5b3ef40aa6c5310011f63cd3ea84152e8af4ef1d0f72d30f71a7ebf37942b49ba38eace_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 70, "offset": 2653}, "start": {"col": 21, "line": 70, "offset": 2640}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 70, "offset": 2665}, "start": {"col": 35, "line": 70, "offset": 2654}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 70, "offset": 2708}, "start": {"col": 85, "line": 70, "offset": 2704}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_66b.cs", "start": {"col": 21, "line": 70, "offset": 2640}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 41, "offset": 1618}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 41, "offset": 1618}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_67b.cs", "start": {"col": 21, "line": 41, "offset": 1545}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 41, "offset": 1613}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_67b.cs", "start": {"col": 85, "line": 41, "offset": 1609}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "535c05bbfc0e186d6c25f285b115060e9c15e4a7b48ac215f6f49476bc4a6bf37f3b9434442e77add3371425e4f929cd1a030d625660bd8fdbd82c6afe515c06_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 41, "offset": 1558}, "start": {"col": 21, "line": 41, "offset": 1545}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 41, "offset": 1570}, "start": {"col": 35, "line": 41, "offset": 1559}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 41, "offset": 1613}, "propagated_value": {"svalue_abstract_content": "dataContainer.containerOne", "svalue_end": {"col": 49, "line": 32, "offset": 1127}, "svalue_start": {"col": 23, "line": 32, "offset": 1101}}, "start": {"col": 85, "line": 41, "offset": 1609}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_67b.cs", "start": {"col": 21, "line": 41, "offset": 1545}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 70, "offset": 2854}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 70, "offset": 2854}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_67b.cs", "start": {"col": 21, "line": 70, "offset": 2781}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 70, "offset": 2849}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_67b.cs", "start": {"col": 85, "line": 70, "offset": 2845}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "535c05bbfc0e186d6c25f285b115060e9c15e4a7b48ac215f6f49476bc4a6bf37f3b9434442e77add3371425e4f929cd1a030d625660bd8fdbd82c6afe515c06_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 70, "offset": 2794}, "start": {"col": 21, "line": 70, "offset": 2781}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 70, "offset": 2806}, "start": {"col": 35, "line": 70, "offset": 2795}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 70, "offset": 2849}, "propagated_value": {"svalue_abstract_content": "dataContainer.containerOne", "svalue_end": {"col": 49, "line": 61, "offset": 2363}, "svalue_start": {"col": 23, "line": 61, "offset": 2337}}, "start": {"col": 85, "line": 70, "offset": 2845}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_67b.cs", "start": {"col": 21, "line": 70, "offset": 2781}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 41, "offset": 1588}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 41, "offset": 1588}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_68b.cs", "start": {"col": 21, "line": 41, "offset": 1515}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 41, "offset": 1583}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_68b.cs", "start": {"col": 85, "line": 41, "offset": 1579}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "ddbd1c01101fed9776fee2703e29ffb85dae6b90210238e748ebf1de31738252ab1370fd86be61f6be3cf9a86fc87431be3c2914582c2ccb97abba3948999ab6_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 41, "offset": 1528}, "start": {"col": 21, "line": 41, "offset": 1515}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 41, "offset": 1540}, "start": {"col": 35, "line": 41, "offset": 1529}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 41, "offset": 1583}, "propagated_value": {"svalue_abstract_content": "CWE89_SQL_Injection__Web_Database_ExecuteScalar_68a.data", "svalue_end": {"col": 79, "line": 32, "offset": 1097}, "svalue_start": {"col": 23, "line": 32, "offset": 1041}}, "start": {"col": 85, "line": 41, "offset": 1579}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_68b.cs", "start": {"col": 21, "line": 41, "offset": 1515}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 70, "offset": 2776}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 70, "offset": 2776}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_68b.cs", "start": {"col": 21, "line": 70, "offset": 2703}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 70, "offset": 2771}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_68b.cs", "start": {"col": 85, "line": 70, "offset": 2767}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "ddbd1c01101fed9776fee2703e29ffb85dae6b90210238e748ebf1de31738252ab1370fd86be61f6be3cf9a86fc87431be3c2914582c2ccb97abba3948999ab6_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 70, "offset": 2716}, "start": {"col": 21, "line": 70, "offset": 2703}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 70, "offset": 2728}, "start": {"col": 35, "line": 70, "offset": 2717}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 70, "offset": 2771}, "propagated_value": {"svalue_abstract_content": "CWE89_SQL_Injection__Web_Database_ExecuteScalar_68a.data", "svalue_end": {"col": 79, "line": 61, "offset": 2285}, "svalue_start": {"col": 23, "line": 61, "offset": 2229}}, "start": {"col": 85, "line": 70, "offset": 2767}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_68b.cs", "start": {"col": 21, "line": 70, "offset": 2703}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 42, "offset": 1570}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "data", "location": {"end": {"col": 20, "line": 33, "offset": 1058}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_71b.cs", "start": {"col": 16, "line": 33, "offset": 1054}}}], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 42, "offset": 1570}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_71b.cs", "start": {"col": 21, "line": 42, "offset": 1497}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 41, "line": 33, "offset": 1079}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_71b.cs", "start": {"col": 23, "line": 33, "offset": 1061}}, "(string)dataObject"]]}, "engine_kind": "OSS", "fingerprint": "9f096095ab6a54067bc1b5a092694ad226bc9e730c22f4932e69de46298f5052655002e5323f650210c344add1864b0d68a77fa98875c3c89bccf5f2068c7a9b_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 42, "offset": 1510}, "start": {"col": 21, "line": 42, "offset": 1497}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 42, "offset": 1522}, "start": {"col": 35, "line": 42, "offset": 1511}}, "$X": {"abstract_content": "(string dataObject", "end": {"col": 41, "line": 33, "offset": 1079}, "start": {"col": 23, "line": 33, "offset": 1061}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_71b.cs", "start": {"col": 21, "line": 42, "offset": 1497}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 71, "offset": 2740}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "data", "location": {"end": {"col": 20, "line": 62, "offset": 2228}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_71b.cs", "start": {"col": 16, "line": 62, "offset": 2224}}}], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 71, "offset": 2740}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_71b.cs", "start": {"col": 21, "line": 71, "offset": 2667}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 41, "line": 62, "offset": 2249}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_71b.cs", "start": {"col": 23, "line": 62, "offset": 2231}}, "(string)dataObject"]]}, "engine_kind": "OSS", "fingerprint": "9f096095ab6a54067bc1b5a092694ad226bc9e730c22f4932e69de46298f5052655002e5323f650210c344add1864b0d68a77fa98875c3c89bccf5f2068c7a9b_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 71, "offset": 2680}, "start": {"col": 21, "line": 71, "offset": 2667}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 71, "offset": 2692}, "start": {"col": 35, "line": 71, "offset": 2681}}, "$X": {"abstract_content": "(string dataObject", "end": {"col": 41, "line": 62, "offset": 2249}, "start": {"col": 23, "line": 62, "offset": 2231}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_71b.cs", "start": {"col": 21, "line": 71, "offset": 2667}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 42, "offset": 1596}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "data", "location": {"end": {"col": 20, "line": 33, "offset": 1077}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_72b.cs", "start": {"col": 16, "line": 33, "offset": 1073}}}], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 42, "offset": 1596}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_72b.cs", "start": {"col": 21, "line": 42, "offset": 1523}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 48, "line": 33, "offset": 1105}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_72b.cs", "start": {"col": 23, "line": 33, "offset": 1080}}, "(string) dataHashtable[2]"]]}, "engine_kind": "OSS", "fingerprint": "01400b5e4831f38d24d680c62d1662f3565d07be63e84570f81c937a7eceaed1b1e132b16d10b2cb8f93a8d2872abd85b8d1d5ddf18eee38de54a89820a240e6_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 42, "offset": 1536}, "start": {"col": 21, "line": 42, "offset": 1523}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 42, "offset": 1548}, "start": {"col": 35, "line": 42, "offset": 1537}}, "$X": {"abstract_content": "(string dataHashtable[[2]]", "end": {"col": 48, "line": 33, "offset": 1105}, "start": {"col": 23, "line": 33, "offset": 1080}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_72b.cs", "start": {"col": 21, "line": 42, "offset": 1523}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 71, "offset": 2779}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "data", "location": {"end": {"col": 20, "line": 62, "offset": 2260}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_72b.cs", "start": {"col": 16, "line": 62, "offset": 2256}}}], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 71, "offset": 2779}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_72b.cs", "start": {"col": 21, "line": 71, "offset": 2706}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 48, "line": 62, "offset": 2288}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_72b.cs", "start": {"col": 23, "line": 62, "offset": 2263}}, "(string) dataHashtable[2]"]]}, "engine_kind": "OSS", "fingerprint": "01400b5e4831f38d24d680c62d1662f3565d07be63e84570f81c937a7eceaed1b1e132b16d10b2cb8f93a8d2872abd85b8d1d5ddf18eee38de54a89820a240e6_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 71, "offset": 2719}, "start": {"col": 21, "line": 71, "offset": 2706}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 71, "offset": 2731}, "start": {"col": 35, "line": 71, "offset": 2720}}, "$X": {"abstract_content": "(string dataHashtable[[2]]", "end": {"col": 48, "line": 62, "offset": 2288}, "start": {"col": 23, "line": 62, "offset": 2263}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_72b.cs", "start": {"col": 21, "line": 71, "offset": 2706}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 42, "offset": 1615}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 42, "offset": 1615}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_73b.cs", "start": {"col": 21, "line": 42, "offset": 1542}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 42, "offset": 1610}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_73b.cs", "start": {"col": 85, "line": 42, "offset": 1606}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "6a47b37816e1b6878382e172a21de53aa0089dc6d9dbf2fdb4c3300fb7731e75a4b5de43584a6ae9f321c4369dc611accd51210dd60e8876cddc551936317c9e_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 42, "offset": 1555}, "start": {"col": 21, "line": 42, "offset": 1542}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 42, "offset": 1567}, "start": {"col": 35, "line": 42, "offset": 1556}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 42, "offset": 1610}, "propagated_value": {"svalue_abstract_content": "dataLinkedList.Last.Value", "svalue_end": {"col": 48, "line": 33, "offset": 1124}, "svalue_start": {"col": 23, "line": 33, "offset": 1099}}, "start": {"col": 85, "line": 42, "offset": 1606}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_73b.cs", "start": {"col": 21, "line": 42, "offset": 1542}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 71, "offset": 2808}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 71, "offset": 2808}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_73b.cs", "start": {"col": 21, "line": 71, "offset": 2735}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 71, "offset": 2803}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_73b.cs", "start": {"col": 85, "line": 71, "offset": 2799}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "6a47b37816e1b6878382e172a21de53aa0089dc6d9dbf2fdb4c3300fb7731e75a4b5de43584a6ae9f321c4369dc611accd51210dd60e8876cddc551936317c9e_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 71, "offset": 2748}, "start": {"col": 21, "line": 71, "offset": 2735}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 71, "offset": 2760}, "start": {"col": 35, "line": 71, "offset": 2749}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 71, "offset": 2803}, "propagated_value": {"svalue_abstract_content": "dataLinkedList.Last.Value", "svalue_end": {"col": 48, "line": 62, "offset": 2317}, "svalue_start": {"col": 23, "line": 62, "offset": 2292}}, "start": {"col": 85, "line": 71, "offset": 2799}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_73b.cs", "start": {"col": 21, "line": 71, "offset": 2735}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 42, "offset": 1611}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 42, "offset": 1611}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_74b.cs", "start": {"col": 21, "line": 42, "offset": 1538}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 42, "offset": 1606}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_74b.cs", "start": {"col": 85, "line": 42, "offset": 1602}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "b5a7ac3c7c3b78cae4a42f3dc6a28b9448c380720af0aee5d7477c316a8cbddcf8625bdeb9b2f6bb559855d52d9fa5470579297c4cdb29d4581e818ab98ce022_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 42, "offset": 1551}, "start": {"col": 21, "line": 42, "offset": 1538}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 42, "offset": 1563}, "start": {"col": 35, "line": 42, "offset": 1552}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 42, "offset": 1606}, "start": {"col": 85, "line": 42, "offset": 1602}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_74b.cs", "start": {"col": 21, "line": 42, "offset": 1538}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 71, "offset": 2801}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 71, "offset": 2801}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_74b.cs", "start": {"col": 21, "line": 71, "offset": 2728}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 71, "offset": 2796}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_74b.cs", "start": {"col": 85, "line": 71, "offset": 2792}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "b5a7ac3c7c3b78cae4a42f3dc6a28b9448c380720af0aee5d7477c316a8cbddcf8625bdeb9b2f6bb559855d52d9fa5470579297c4cdb29d4581e818ab98ce022_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 71, "offset": 2741}, "start": {"col": 21, "line": 71, "offset": 2728}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 71, "offset": 2753}, "start": {"col": 35, "line": 71, "offset": 2742}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 71, "offset": 2796}, "start": {"col": 85, "line": 71, "offset": 2792}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_74b.cs", "start": {"col": 21, "line": 71, "offset": 2728}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 55, "line": 68, "offset": 2446}, "extra": {"engine_kind": "OSS", "fingerprint": "7d3935ab138769c0b2dbe63a09bea5abc02d513e9a8986a11cca750e8e98ab6e5d8db18863ad98a42673b7be1de7a45e9c701c4dd1ce606ef6d101dd3e23871c_0", "is_ignored": false, "lines": "            BinaryFormatter bf = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_75a.cs", "start": {"col": 13, "line": 68, "offset": 2404}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 55, "line": 124, "offset": 4528}, "extra": {"engine_kind": "OSS", "fingerprint": "7d3935ab138769c0b2dbe63a09bea5abc02d513e9a8986a11cca750e8e98ab6e5d8db18863ad98a42673b7be1de7a45e9c701c4dd1ce606ef6d101dd3e23871c_1", "is_ignored": false, "lines": "            BinaryFormatter bf = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_75a.cs", "start": {"col": 13, "line": 124, "offset": 4486}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 55, "line": 173, "offset": 6440}, "extra": {"engine_kind": "OSS", "fingerprint": "7d3935ab138769c0b2dbe63a09bea5abc02d513e9a8986a11cca750e8e98ab6e5d8db18863ad98a42673b7be1de7a45e9c701c4dd1ce606ef6d101dd3e23871c_2", "is_ignored": false, "lines": "            BinaryFormatter bf = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_75a.cs", "start": {"col": 13, "line": 173, "offset": 6398}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 48, "line": 38, "offset": 1244}, "extra": {"engine_kind": "OSS", "fingerprint": "670b2ea7fac14ba7e83d64ab46a277869162bb53122742c4b764e001d83930e0f6ac681cd9829acd935b892f505ee2be5edbbc1f445c0cd5d8ae4d8a43499249_0", "is_ignored": false, "lines": "            var binForm = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_75b.cs", "start": {"col": 17, "line": 38, "offset": 1213}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 53, "offset": 2051}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "data", "location": {"end": {"col": 21, "line": 43, "offset": 1468}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_75b.cs", "start": {"col": 17, "line": 43, "offset": 1464}}}], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 53, "offset": 2051}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_75b.cs", "start": {"col": 25, "line": 53, "offset": 1978}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 62, "line": 43, "offset": 1509}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_75b.cs", "start": {"col": 24, "line": 43, "offset": 1471}}, "(string)binForm.Deserialize(memStream)"]]}, "engine_kind": "OSS", "fingerprint": "9d341618eb089fbe187835ffd14cf099bbc824de7d62bf2c26dd2766a69a73a41fa3afaebcd6971ebfb3c2fc11eb2e09aad8db695ab81e88a9514477999ed6ab_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 53, "offset": 1991}, "start": {"col": 25, "line": 53, "offset": 1978}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 53, "offset": 2003}, "start": {"col": 39, "line": 53, "offset": 1992}}, "$X": {"abstract_content": "(string binForm.Deserialize(memStream)", "end": {"col": 62, "line": 43, "offset": 1509}, "start": {"col": 24, "line": 43, "offset": 1471}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_75b.cs", "start": {"col": 25, "line": 53, "offset": 1978}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 48, "line": 81, "offset": 3038}, "extra": {"engine_kind": "OSS", "fingerprint": "670b2ea7fac14ba7e83d64ab46a277869162bb53122742c4b764e001d83930e0f6ac681cd9829acd935b892f505ee2be5edbbc1f445c0cd5d8ae4d8a43499249_1", "is_ignored": false, "lines": "            var binForm = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_75b.cs", "start": {"col": 17, "line": 81, "offset": 3007}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 96, "offset": 3845}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "data", "location": {"end": {"col": 21, "line": 86, "offset": 3262}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_75b.cs", "start": {"col": 17, "line": 86, "offset": 3258}}}], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 96, "offset": 3845}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_75b.cs", "start": {"col": 25, "line": 96, "offset": 3772}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 62, "line": 86, "offset": 3303}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_75b.cs", "start": {"col": 24, "line": 86, "offset": 3265}}, "(string)binForm.Deserialize(memStream)"]]}, "engine_kind": "OSS", "fingerprint": "9d341618eb089fbe187835ffd14cf099bbc824de7d62bf2c26dd2766a69a73a41fa3afaebcd6971ebfb3c2fc11eb2e09aad8db695ab81e88a9514477999ed6ab_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 96, "offset": 3785}, "start": {"col": 25, "line": 96, "offset": 3772}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 96, "offset": 3797}, "start": {"col": 39, "line": 96, "offset": 3786}}, "$X": {"abstract_content": "(string binForm.Deserialize(memStream)", "end": {"col": 62, "line": 86, "offset": 3303}, "start": {"col": 24, "line": 86, "offset": 3265}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_75b.cs", "start": {"col": 25, "line": 96, "offset": 3772}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 48, "line": 122, "offset": 4807}, "extra": {"engine_kind": "OSS", "fingerprint": "670b2ea7fac14ba7e83d64ab46a277869162bb53122742c4b764e001d83930e0f6ac681cd9829acd935b892f505ee2be5edbbc1f445c0cd5d8ae4d8a43499249_2", "is_ignored": false, "lines": "            var binForm = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_75b.cs", "start": {"col": 17, "line": 122, "offset": 4776}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 40, "offset": 1524}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 40, "offset": 1524}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_81_bad.cs", "start": {"col": 21, "line": 40, "offset": 1451}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 40, "offset": 1519}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_81_bad.cs", "start": {"col": 85, "line": 40, "offset": 1515}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "cb551b1bafc07017bef0919cb07d39237f1b53b9382277628a1a492657f2e16daa5021c030e9be24995b907472af3b92aafcb15023595b56be96c1663f15a6c6_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 40, "offset": 1464}, "start": {"col": 21, "line": 40, "offset": 1451}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 40, "offset": 1476}, "start": {"col": 35, "line": 40, "offset": 1465}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 40, "offset": 1519}, "start": {"col": 85, "line": 40, "offset": 1515}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_81_bad.cs", "start": {"col": 21, "line": 40, "offset": 1451}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 41, "offset": 1539}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 41, "offset": 1539}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_81_goodG2B.cs", "start": {"col": 21, "line": 41, "offset": 1466}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 41, "offset": 1534}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_81_goodG2B.cs", "start": {"col": 85, "line": 41, "offset": 1530}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "1d3ffef01a71e104da061966debfa7c49139cd180c4f7c1b7c0dd4550d808234afd1d2dd65c512ac2023dd8c2d8ccdd8d919ed837ae3d6b5f2e07aaabee1ae1b_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 41, "offset": 1479}, "start": {"col": 21, "line": 41, "offset": 1466}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 41, "offset": 1491}, "start": {"col": 35, "line": 41, "offset": 1480}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 41, "offset": 1534}, "start": {"col": 85, "line": 41, "offset": 1530}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Database_ExecuteScalar_81_goodG2B.cs", "start": {"col": 21, "line": 41, "offset": 1466}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 55, "line": 59, "offset": 2048}, "extra": {"engine_kind": "OSS", "fingerprint": "6a596cc0db2a73389e85364f592e33845f2200895ee7e473281c69c7c04cddf6a9eae5058c4e02c2f1d93f8dd02f3a9eed3922884715213191f69d9dce7b5544_0", "is_ignored": false, "lines": "            BinaryFormatter bf = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_CommandText_75a.cs", "start": {"col": 13, "line": 59, "offset": 2006}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 55, "line": 106, "offset": 3729}, "extra": {"engine_kind": "OSS", "fingerprint": "6a596cc0db2a73389e85364f592e33845f2200895ee7e473281c69c7c04cddf6a9eae5058c4e02c2f1d93f8dd02f3a9eed3922884715213191f69d9dce7b5544_1", "is_ignored": false, "lines": "            BinaryFormatter bf = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_CommandText_75a.cs", "start": {"col": 13, "line": 106, "offset": 3687}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 55, "line": 146, "offset": 5240}, "extra": {"engine_kind": "OSS", "fingerprint": "6a596cc0db2a73389e85364f592e33845f2200895ee7e473281c69c7c04cddf6a9eae5058c4e02c2f1d93f8dd02f3a9eed3922884715213191f69d9dce7b5544_2", "is_ignored": false, "lines": "            BinaryFormatter bf = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_CommandText_75a.cs", "start": {"col": 13, "line": 146, "offset": 5198}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 48, "line": 38, "offset": 1241}, "extra": {"engine_kind": "OSS", "fingerprint": "d79d895dc39fe92a9e4b156410d596996975331573a3191486ede01e9c22495f5ac564cc8723ca06e726623cfcb46f98122d19c9690205d94be176ae7eda1766_0", "is_ignored": false, "lines": "            var binForm = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_CommandText_75b.cs", "start": {"col": 17, "line": 38, "offset": 1210}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 48, "line": 100, "offset": 3824}, "extra": {"engine_kind": "OSS", "fingerprint": "d79d895dc39fe92a9e4b156410d596996975331573a3191486ede01e9c22495f5ac564cc8723ca06e726623cfcb46f98122d19c9690205d94be176ae7eda1766_1", "is_ignored": false, "lines": "            var binForm = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_CommandText_75b.cs", "start": {"col": 17, "line": 100, "offset": 3793}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 48, "line": 160, "offset": 6382}, "extra": {"engine_kind": "OSS", "fingerprint": "d79d895dc39fe92a9e4b156410d596996975331573a3191486ede01e9c22495f5ac564cc8723ca06e726623cfcb46f98122d19c9690205d94be176ae7eda1766_2", "is_ignored": false, "lines": "            var binForm = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_CommandText_75b.cs", "start": {"col": 17, "line": 160, "offset": 6351}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 62, "offset": 2225}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 62, "offset": 2225}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_01.cs", "start": {"col": 21, "line": 62, "offset": 2126}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 62, "offset": 2220}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_01.cs", "start": {"col": 111, "line": 62, "offset": 2216}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "c6f3fc1d604361ca7c8021719c010955baeca66d7813691ed9f5cf97edf20535a7d0c61767a6ede96a4b2cb59bc4eaecbfd340a95bf8efaf668fc59f7aa4135c_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 62, "offset": 2139}, "start": {"col": 21, "line": 62, "offset": 2126}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 62, "offset": 2151}, "start": {"col": 35, "line": 62, "offset": 2140}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 62, "offset": 2220}, "start": {"col": 111, "line": 62, "offset": 2216}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_01.cs", "start": {"col": 21, "line": 62, "offset": 2126}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 73, "offset": 2668}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 73, "offset": 2668}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_02.cs", "start": {"col": 25, "line": 73, "offset": 2569}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 73, "offset": 2663}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_02.cs", "start": {"col": 115, "line": 73, "offset": 2659}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "089ac37dc564bb2aa2a41268c1125a85d5f48262740d6212f42b82e229eccb794b3b7f0f374f3f6520cd7970f20f57f78265f8eaef15dc09318767ea5219cc79_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 73, "offset": 2582}, "start": {"col": 25, "line": 73, "offset": 2569}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 73, "offset": 2594}, "start": {"col": 39, "line": 73, "offset": 2583}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 73, "offset": 2663}, "start": {"col": 115, "line": 73, "offset": 2659}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_02.cs", "start": {"col": 25, "line": 73, "offset": 2569}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 120, "offset": 4517}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 120, "offset": 4517}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_02.cs", "start": {"col": 25, "line": 120, "offset": 4418}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 120, "offset": 4512}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_02.cs", "start": {"col": 115, "line": 120, "offset": 4508}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "089ac37dc564bb2aa2a41268c1125a85d5f48262740d6212f42b82e229eccb794b3b7f0f374f3f6520cd7970f20f57f78265f8eaef15dc09318767ea5219cc79_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 120, "offset": 4431}, "start": {"col": 25, "line": 120, "offset": 4418}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 120, "offset": 4443}, "start": {"col": 39, "line": 120, "offset": 4432}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 120, "offset": 4512}, "start": {"col": 115, "line": 120, "offset": 4508}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_02.cs", "start": {"col": 25, "line": 120, "offset": 4418}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 166, "offset": 6336}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 166, "offset": 6336}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_02.cs", "start": {"col": 25, "line": 166, "offset": 6237}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 166, "offset": 6331}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_02.cs", "start": {"col": 115, "line": 166, "offset": 6327}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "089ac37dc564bb2aa2a41268c1125a85d5f48262740d6212f42b82e229eccb794b3b7f0f374f3f6520cd7970f20f57f78265f8eaef15dc09318767ea5219cc79_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 166, "offset": 6250}, "start": {"col": 25, "line": 166, "offset": 6237}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 166, "offset": 6262}, "start": {"col": 39, "line": 166, "offset": 6251}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 166, "offset": 6331}, "start": {"col": 115, "line": 166, "offset": 6327}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_02.cs", "start": {"col": 25, "line": 166, "offset": 6237}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 73, "offset": 2667}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 73, "offset": 2667}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_03.cs", "start": {"col": 25, "line": 73, "offset": 2568}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 73, "offset": 2662}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_03.cs", "start": {"col": 115, "line": 73, "offset": 2658}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "6916c401192e41b09930c8b87586a9d774fc9e0d648a7295f3cca881c93f40f9c1553a99e9426b7a1c2df58182f06a0fdbb4b1c3f01a5266a4f11bc1f8748e74_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 73, "offset": 2581}, "start": {"col": 25, "line": 73, "offset": 2568}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 73, "offset": 2593}, "start": {"col": 39, "line": 73, "offset": 2582}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 73, "offset": 2662}, "start": {"col": 115, "line": 73, "offset": 2658}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_03.cs", "start": {"col": 25, "line": 73, "offset": 2568}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 120, "offset": 4514}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 120, "offset": 4514}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_03.cs", "start": {"col": 25, "line": 120, "offset": 4415}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 120, "offset": 4509}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_03.cs", "start": {"col": 115, "line": 120, "offset": 4505}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "6916c401192e41b09930c8b87586a9d774fc9e0d648a7295f3cca881c93f40f9c1553a99e9426b7a1c2df58182f06a0fdbb4b1c3f01a5266a4f11bc1f8748e74_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 120, "offset": 4428}, "start": {"col": 25, "line": 120, "offset": 4415}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 120, "offset": 4440}, "start": {"col": 39, "line": 120, "offset": 4429}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 120, "offset": 4509}, "start": {"col": 115, "line": 120, "offset": 4505}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_03.cs", "start": {"col": 25, "line": 120, "offset": 4415}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 166, "offset": 6333}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 166, "offset": 6333}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_03.cs", "start": {"col": 25, "line": 166, "offset": 6234}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 166, "offset": 6328}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_03.cs", "start": {"col": 115, "line": 166, "offset": 6324}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "6916c401192e41b09930c8b87586a9d774fc9e0d648a7295f3cca881c93f40f9c1553a99e9426b7a1c2df58182f06a0fdbb4b1c3f01a5266a4f11bc1f8748e74_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 166, "offset": 6247}, "start": {"col": 25, "line": 166, "offset": 6234}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 166, "offset": 6259}, "start": {"col": 39, "line": 166, "offset": 6248}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 166, "offset": 6328}, "start": {"col": 115, "line": 166, "offset": 6324}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_03.cs", "start": {"col": 25, "line": 166, "offset": 6234}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 80, "offset": 3011}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 80, "offset": 3011}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_04.cs", "start": {"col": 25, "line": 80, "offset": 2912}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 80, "offset": 3006}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_04.cs", "start": {"col": 115, "line": 80, "offset": 3002}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "2532704a7b9520033efb1711aa2d6701fe7b3de9895ad388c53cec160f1a191f6144aa1060f3beaad049414643cbc9f6aad660343fdec01a7f05e29ff065153e_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 80, "offset": 2925}, "start": {"col": 25, "line": 80, "offset": 2912}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 80, "offset": 2937}, "start": {"col": 39, "line": 80, "offset": 2926}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 80, "offset": 3006}, "start": {"col": 115, "line": 80, "offset": 3002}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_04.cs", "start": {"col": 25, "line": 80, "offset": 2912}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 127, "offset": 4916}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 127, "offset": 4916}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_04.cs", "start": {"col": 25, "line": 127, "offset": 4817}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 127, "offset": 4911}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_04.cs", "start": {"col": 115, "line": 127, "offset": 4907}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "2532704a7b9520033efb1711aa2d6701fe7b3de9895ad388c53cec160f1a191f6144aa1060f3beaad049414643cbc9f6aad660343fdec01a7f05e29ff065153e_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 127, "offset": 4830}, "start": {"col": 25, "line": 127, "offset": 4817}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 127, "offset": 4842}, "start": {"col": 39, "line": 127, "offset": 4831}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 127, "offset": 4911}, "start": {"col": 115, "line": 127, "offset": 4907}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_04.cs", "start": {"col": 25, "line": 127, "offset": 4817}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 173, "offset": 6763}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 173, "offset": 6763}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_04.cs", "start": {"col": 25, "line": 173, "offset": 6664}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 173, "offset": 6758}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_04.cs", "start": {"col": 115, "line": 173, "offset": 6754}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "2532704a7b9520033efb1711aa2d6701fe7b3de9895ad388c53cec160f1a191f6144aa1060f3beaad049414643cbc9f6aad660343fdec01a7f05e29ff065153e_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 173, "offset": 6677}, "start": {"col": 25, "line": 173, "offset": 6664}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 173, "offset": 6689}, "start": {"col": 39, "line": 173, "offset": 6678}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 173, "offset": 6758}, "start": {"col": 115, "line": 173, "offset": 6754}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_04.cs", "start": {"col": 25, "line": 173, "offset": 6664}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 79, "offset": 3004}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 79, "offset": 3004}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_05.cs", "start": {"col": 25, "line": 79, "offset": 2905}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 79, "offset": 2999}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_05.cs", "start": {"col": 115, "line": 79, "offset": 2995}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "5b9b4c8ab854a2b6933a3fe1e528750a5ef46c8e7b5c79c6e98f15ea0a73c7696f88bc7ab87b7a07d99632806c243aceb0a14fb171518b41ffaea5386d9b65f3_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 79, "offset": 2918}, "start": {"col": 25, "line": 79, "offset": 2905}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 79, "offset": 2930}, "start": {"col": 39, "line": 79, "offset": 2919}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 79, "offset": 2999}, "start": {"col": 115, "line": 79, "offset": 2995}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_05.cs", "start": {"col": 25, "line": 79, "offset": 2905}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 126, "offset": 4881}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 126, "offset": 4881}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_05.cs", "start": {"col": 25, "line": 126, "offset": 4782}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 126, "offset": 4876}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_05.cs", "start": {"col": 115, "line": 126, "offset": 4872}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "5b9b4c8ab854a2b6933a3fe1e528750a5ef46c8e7b5c79c6e98f15ea0a73c7696f88bc7ab87b7a07d99632806c243aceb0a14fb171518b41ffaea5386d9b65f3_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 126, "offset": 4795}, "start": {"col": 25, "line": 126, "offset": 4782}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 126, "offset": 4807}, "start": {"col": 39, "line": 126, "offset": 4796}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 126, "offset": 4876}, "start": {"col": 115, "line": 126, "offset": 4872}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_05.cs", "start": {"col": 25, "line": 126, "offset": 4782}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 172, "offset": 6714}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 172, "offset": 6714}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_05.cs", "start": {"col": 25, "line": 172, "offset": 6615}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 172, "offset": 6709}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_05.cs", "start": {"col": 115, "line": 172, "offset": 6705}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "5b9b4c8ab854a2b6933a3fe1e528750a5ef46c8e7b5c79c6e98f15ea0a73c7696f88bc7ab87b7a07d99632806c243aceb0a14fb171518b41ffaea5386d9b65f3_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 172, "offset": 6628}, "start": {"col": 25, "line": 172, "offset": 6615}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 172, "offset": 6640}, "start": {"col": 39, "line": 172, "offset": 6629}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 172, "offset": 6709}, "start": {"col": 115, "line": 172, "offset": 6705}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_05.cs", "start": {"col": 25, "line": 172, "offset": 6615}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 78, "offset": 2947}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 78, "offset": 2947}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_06.cs", "start": {"col": 25, "line": 78, "offset": 2848}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 78, "offset": 2942}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_06.cs", "start": {"col": 115, "line": 78, "offset": 2938}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "2ecceb7b7a016375d35a108e0baf78bb32429308dc3cbd528ac90014680a0260927f568d9e38a129e2f9f3599814d4a35e2942899e0b126562c916c03f6e3670_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 78, "offset": 2861}, "start": {"col": 25, "line": 78, "offset": 2848}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 78, "offset": 2873}, "start": {"col": 39, "line": 78, "offset": 2862}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 78, "offset": 2942}, "start": {"col": 115, "line": 78, "offset": 2938}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_06.cs", "start": {"col": 25, "line": 78, "offset": 2848}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 125, "offset": 4862}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 125, "offset": 4862}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_06.cs", "start": {"col": 25, "line": 125, "offset": 4763}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 125, "offset": 4857}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_06.cs", "start": {"col": 115, "line": 125, "offset": 4853}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "2ecceb7b7a016375d35a108e0baf78bb32429308dc3cbd528ac90014680a0260927f568d9e38a129e2f9f3599814d4a35e2942899e0b126562c916c03f6e3670_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 125, "offset": 4776}, "start": {"col": 25, "line": 125, "offset": 4763}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 125, "offset": 4788}, "start": {"col": 39, "line": 125, "offset": 4777}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 125, "offset": 4857}, "start": {"col": 115, "line": 125, "offset": 4853}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_06.cs", "start": {"col": 25, "line": 125, "offset": 4763}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 171, "offset": 6715}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 171, "offset": 6715}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_06.cs", "start": {"col": 25, "line": 171, "offset": 6616}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 171, "offset": 6710}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_06.cs", "start": {"col": 115, "line": 171, "offset": 6706}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "2ecceb7b7a016375d35a108e0baf78bb32429308dc3cbd528ac90014680a0260927f568d9e38a129e2f9f3599814d4a35e2942899e0b126562c916c03f6e3670_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 171, "offset": 6629}, "start": {"col": 25, "line": 171, "offset": 6616}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 171, "offset": 6641}, "start": {"col": 39, "line": 171, "offset": 6630}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 171, "offset": 6710}, "start": {"col": 115, "line": 171, "offset": 6706}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_06.cs", "start": {"col": 25, "line": 171, "offset": 6616}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 78, "offset": 2951}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 78, "offset": 2951}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_07.cs", "start": {"col": 25, "line": 78, "offset": 2852}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 78, "offset": 2946}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_07.cs", "start": {"col": 115, "line": 78, "offset": 2942}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "02c917d7b831db1b7bdadabcc5db1d610eaf612458aa7d618fb83b1b7f50138c4c6cc8ea2a4aaf4657583cad0d099a324ecd4e23cff8a35d55b38e23f9aa66d0_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 78, "offset": 2865}, "start": {"col": 25, "line": 78, "offset": 2852}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 78, "offset": 2877}, "start": {"col": 39, "line": 78, "offset": 2866}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 78, "offset": 2946}, "start": {"col": 115, "line": 78, "offset": 2942}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_07.cs", "start": {"col": 25, "line": 78, "offset": 2852}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 125, "offset": 4838}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 125, "offset": 4838}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_07.cs", "start": {"col": 25, "line": 125, "offset": 4739}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 125, "offset": 4833}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_07.cs", "start": {"col": 115, "line": 125, "offset": 4829}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "02c917d7b831db1b7bdadabcc5db1d610eaf612458aa7d618fb83b1b7f50138c4c6cc8ea2a4aaf4657583cad0d099a324ecd4e23cff8a35d55b38e23f9aa66d0_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 125, "offset": 4752}, "start": {"col": 25, "line": 125, "offset": 4739}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 125, "offset": 4764}, "start": {"col": 39, "line": 125, "offset": 4753}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 125, "offset": 4833}, "start": {"col": 115, "line": 125, "offset": 4829}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_07.cs", "start": {"col": 25, "line": 125, "offset": 4739}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 171, "offset": 6677}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 171, "offset": 6677}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_07.cs", "start": {"col": 25, "line": 171, "offset": 6578}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 171, "offset": 6672}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_07.cs", "start": {"col": 115, "line": 171, "offset": 6668}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "02c917d7b831db1b7bdadabcc5db1d610eaf612458aa7d618fb83b1b7f50138c4c6cc8ea2a4aaf4657583cad0d099a324ecd4e23cff8a35d55b38e23f9aa66d0_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 171, "offset": 6591}, "start": {"col": 25, "line": 171, "offset": 6578}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 171, "offset": 6603}, "start": {"col": 39, "line": 171, "offset": 6592}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 171, "offset": 6672}, "start": {"col": 115, "line": 171, "offset": 6668}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_07.cs", "start": {"col": 25, "line": 171, "offset": 6578}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 86, "offset": 3083}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 86, "offset": 3083}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_08.cs", "start": {"col": 25, "line": 86, "offset": 2984}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 86, "offset": 3078}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_08.cs", "start": {"col": 115, "line": 86, "offset": 3074}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "c4d7684641212ce18e49dc429f171799eec59f533dbe4006fef4d18a050a69f093bcb37a62e4cf76e35171eb683a13fea2d76529fe8c89e413bff23d59035160_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 86, "offset": 2997}, "start": {"col": 25, "line": 86, "offset": 2984}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 86, "offset": 3009}, "start": {"col": 39, "line": 86, "offset": 2998}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 86, "offset": 3078}, "start": {"col": 115, "line": 86, "offset": 3074}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_08.cs", "start": {"col": 25, "line": 86, "offset": 2984}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 133, "offset": 4996}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 133, "offset": 4996}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_08.cs", "start": {"col": 25, "line": 133, "offset": 4897}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 133, "offset": 4991}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_08.cs", "start": {"col": 115, "line": 133, "offset": 4987}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "c4d7684641212ce18e49dc429f171799eec59f533dbe4006fef4d18a050a69f093bcb37a62e4cf76e35171eb683a13fea2d76529fe8c89e413bff23d59035160_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 133, "offset": 4910}, "start": {"col": 25, "line": 133, "offset": 4897}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 133, "offset": 4922}, "start": {"col": 39, "line": 133, "offset": 4911}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 133, "offset": 4991}, "start": {"col": 115, "line": 133, "offset": 4987}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_08.cs", "start": {"col": 25, "line": 133, "offset": 4897}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 179, "offset": 6847}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 179, "offset": 6847}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_08.cs", "start": {"col": 25, "line": 179, "offset": 6748}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 179, "offset": 6842}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_08.cs", "start": {"col": 115, "line": 179, "offset": 6838}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "c4d7684641212ce18e49dc429f171799eec59f533dbe4006fef4d18a050a69f093bcb37a62e4cf76e35171eb683a13fea2d76529fe8c89e413bff23d59035160_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 179, "offset": 6761}, "start": {"col": 25, "line": 179, "offset": 6748}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 179, "offset": 6773}, "start": {"col": 39, "line": 179, "offset": 6762}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 179, "offset": 6842}, "start": {"col": 115, "line": 179, "offset": 6838}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_08.cs", "start": {"col": 25, "line": 179, "offset": 6748}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 73, "offset": 2744}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 73, "offset": 2744}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_09.cs", "start": {"col": 25, "line": 73, "offset": 2645}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 73, "offset": 2739}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_09.cs", "start": {"col": 115, "line": 73, "offset": 2735}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "5ac173783f07e5ca7c8720281b70e646d3b671ae5457c60cccb66af0596b7344824ea00c03e704e0298e455557a7a0076a3c0965bac0eb6719fde49d9b2780e3_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 73, "offset": 2658}, "start": {"col": 25, "line": 73, "offset": 2645}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 73, "offset": 2670}, "start": {"col": 39, "line": 73, "offset": 2659}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 73, "offset": 2739}, "start": {"col": 115, "line": 73, "offset": 2735}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_09.cs", "start": {"col": 25, "line": 73, "offset": 2645}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 120, "offset": 4669}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 120, "offset": 4669}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_09.cs", "start": {"col": 25, "line": 120, "offset": 4570}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 120, "offset": 4664}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_09.cs", "start": {"col": 115, "line": 120, "offset": 4660}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "5ac173783f07e5ca7c8720281b70e646d3b671ae5457c60cccb66af0596b7344824ea00c03e704e0298e455557a7a0076a3c0965bac0eb6719fde49d9b2780e3_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 120, "offset": 4583}, "start": {"col": 25, "line": 120, "offset": 4570}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 120, "offset": 4595}, "start": {"col": 39, "line": 120, "offset": 4584}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 120, "offset": 4664}, "start": {"col": 115, "line": 120, "offset": 4660}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_09.cs", "start": {"col": 25, "line": 120, "offset": 4570}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 166, "offset": 6526}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 166, "offset": 6526}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_09.cs", "start": {"col": 25, "line": 166, "offset": 6427}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 166, "offset": 6521}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_09.cs", "start": {"col": 115, "line": 166, "offset": 6517}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "5ac173783f07e5ca7c8720281b70e646d3b671ae5457c60cccb66af0596b7344824ea00c03e704e0298e455557a7a0076a3c0965bac0eb6719fde49d9b2780e3_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 166, "offset": 6440}, "start": {"col": 25, "line": 166, "offset": 6427}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 166, "offset": 6452}, "start": {"col": 39, "line": 166, "offset": 6441}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 166, "offset": 6521}, "start": {"col": 115, "line": 166, "offset": 6517}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_09.cs", "start": {"col": 25, "line": 166, "offset": 6427}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 73, "offset": 2704}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 73, "offset": 2704}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_10.cs", "start": {"col": 25, "line": 73, "offset": 2605}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 73, "offset": 2699}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_10.cs", "start": {"col": 115, "line": 73, "offset": 2695}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "2286752ca02b99a3e65f334d35ac882c0fd70e5ae3070d016531732347686c87a19d1f934b088e247ecff33df985d60f95a2baf17797f0a7a636a4f625ccc900_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 73, "offset": 2618}, "start": {"col": 25, "line": 73, "offset": 2605}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 73, "offset": 2630}, "start": {"col": 39, "line": 73, "offset": 2619}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 73, "offset": 2699}, "start": {"col": 115, "line": 73, "offset": 2695}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_10.cs", "start": {"col": 25, "line": 73, "offset": 2605}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 120, "offset": 4589}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 120, "offset": 4589}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_10.cs", "start": {"col": 25, "line": 120, "offset": 4490}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 120, "offset": 4584}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_10.cs", "start": {"col": 115, "line": 120, "offset": 4580}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "2286752ca02b99a3e65f334d35ac882c0fd70e5ae3070d016531732347686c87a19d1f934b088e247ecff33df985d60f95a2baf17797f0a7a636a4f625ccc900_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 120, "offset": 4503}, "start": {"col": 25, "line": 120, "offset": 4490}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 120, "offset": 4515}, "start": {"col": 39, "line": 120, "offset": 4504}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 120, "offset": 4584}, "start": {"col": 115, "line": 120, "offset": 4580}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_10.cs", "start": {"col": 25, "line": 120, "offset": 4490}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 166, "offset": 6426}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 166, "offset": 6426}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_10.cs", "start": {"col": 25, "line": 166, "offset": 6327}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 166, "offset": 6421}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_10.cs", "start": {"col": 115, "line": 166, "offset": 6417}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "2286752ca02b99a3e65f334d35ac882c0fd70e5ae3070d016531732347686c87a19d1f934b088e247ecff33df985d60f95a2baf17797f0a7a636a4f625ccc900_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 166, "offset": 6340}, "start": {"col": 25, "line": 166, "offset": 6327}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 166, "offset": 6352}, "start": {"col": 39, "line": 166, "offset": 6341}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 166, "offset": 6421}, "start": {"col": 115, "line": 166, "offset": 6417}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_10.cs", "start": {"col": 25, "line": 166, "offset": 6327}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 73, "offset": 2739}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 73, "offset": 2739}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_11.cs", "start": {"col": 25, "line": 73, "offset": 2640}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 73, "offset": 2734}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_11.cs", "start": {"col": 115, "line": 73, "offset": 2730}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "96910740fc01c07bef19d1f1f8b2377ab61130b736b8ef6ebe65e93dbc0820698a7e21b397703c2adbf49c9d9ef4c046509106c6d9c08f316813dc987123b16b_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 73, "offset": 2653}, "start": {"col": 25, "line": 73, "offset": 2640}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 73, "offset": 2665}, "start": {"col": 39, "line": 73, "offset": 2654}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 73, "offset": 2734}, "start": {"col": 115, "line": 73, "offset": 2730}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_11.cs", "start": {"col": 25, "line": 73, "offset": 2640}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 120, "offset": 4660}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 120, "offset": 4660}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_11.cs", "start": {"col": 25, "line": 120, "offset": 4561}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 120, "offset": 4655}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_11.cs", "start": {"col": 115, "line": 120, "offset": 4651}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "96910740fc01c07bef19d1f1f8b2377ab61130b736b8ef6ebe65e93dbc0820698a7e21b397703c2adbf49c9d9ef4c046509106c6d9c08f316813dc987123b16b_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 120, "offset": 4574}, "start": {"col": 25, "line": 120, "offset": 4561}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 120, "offset": 4586}, "start": {"col": 39, "line": 120, "offset": 4575}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 120, "offset": 4655}, "start": {"col": 115, "line": 120, "offset": 4651}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_11.cs", "start": {"col": 25, "line": 120, "offset": 4561}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 166, "offset": 6515}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 166, "offset": 6515}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_11.cs", "start": {"col": 25, "line": 166, "offset": 6416}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 166, "offset": 6510}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_11.cs", "start": {"col": 115, "line": 166, "offset": 6506}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "96910740fc01c07bef19d1f1f8b2377ab61130b736b8ef6ebe65e93dbc0820698a7e21b397703c2adbf49c9d9ef4c046509106c6d9c08f316813dc987123b16b_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 166, "offset": 6429}, "start": {"col": 25, "line": 166, "offset": 6416}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 166, "offset": 6441}, "start": {"col": 39, "line": 166, "offset": 6430}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 166, "offset": 6510}, "start": {"col": 115, "line": 166, "offset": 6506}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_11.cs", "start": {"col": 25, "line": 166, "offset": 6416}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 72, "offset": 2605}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 72, "offset": 2605}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_12.cs", "start": {"col": 25, "line": 72, "offset": 2506}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 72, "offset": 2600}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_12.cs", "start": {"col": 115, "line": 72, "offset": 2596}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "aa038004abe1ea6e11fc447015ebe61c700c77eca1ddd1346e588a28c8bcaad2a8b7ab23aca15424bfaa9f52d81ebefe7f25af8789b6aa6dd557e9b9c3801226_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 72, "offset": 2519}, "start": {"col": 25, "line": 72, "offset": 2506}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 72, "offset": 2531}, "start": {"col": 39, "line": 72, "offset": 2520}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 72, "offset": 2600}, "start": {"col": 115, "line": 72, "offset": 2596}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_12.cs", "start": {"col": 25, "line": 72, "offset": 2506}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 73, "offset": 2755}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 73, "offset": 2755}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_13.cs", "start": {"col": 25, "line": 73, "offset": 2656}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 73, "offset": 2750}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_13.cs", "start": {"col": 115, "line": 73, "offset": 2746}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "266fc9fc7abd3667f6fd80b49c2e9bbe9aef1e76fea3ebe93a7a832a7b808e29d40b2e9e7e66fb9c3c37c43af203d6a5f09aa36e74b17c5eac04d91ce6b666d0_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 73, "offset": 2669}, "start": {"col": 25, "line": 73, "offset": 2656}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 73, "offset": 2681}, "start": {"col": 39, "line": 73, "offset": 2670}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 73, "offset": 2750}, "start": {"col": 115, "line": 73, "offset": 2746}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_13.cs", "start": {"col": 25, "line": 73, "offset": 2656}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 120, "offset": 4690}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 120, "offset": 4690}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_13.cs", "start": {"col": 25, "line": 120, "offset": 4591}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 120, "offset": 4685}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_13.cs", "start": {"col": 115, "line": 120, "offset": 4681}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "266fc9fc7abd3667f6fd80b49c2e9bbe9aef1e76fea3ebe93a7a832a7b808e29d40b2e9e7e66fb9c3c37c43af203d6a5f09aa36e74b17c5eac04d91ce6b666d0_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 120, "offset": 4604}, "start": {"col": 25, "line": 120, "offset": 4591}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 120, "offset": 4616}, "start": {"col": 39, "line": 120, "offset": 4605}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 120, "offset": 4685}, "start": {"col": 115, "line": 120, "offset": 4681}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_13.cs", "start": {"col": 25, "line": 120, "offset": 4591}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 166, "offset": 6553}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 166, "offset": 6553}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_13.cs", "start": {"col": 25, "line": 166, "offset": 6454}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 166, "offset": 6548}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_13.cs", "start": {"col": 115, "line": 166, "offset": 6544}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "266fc9fc7abd3667f6fd80b49c2e9bbe9aef1e76fea3ebe93a7a832a7b808e29d40b2e9e7e66fb9c3c37c43af203d6a5f09aa36e74b17c5eac04d91ce6b666d0_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 166, "offset": 6467}, "start": {"col": 25, "line": 166, "offset": 6454}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 166, "offset": 6479}, "start": {"col": 39, "line": 166, "offset": 6468}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 166, "offset": 6548}, "start": {"col": 115, "line": 166, "offset": 6544}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_13.cs", "start": {"col": 25, "line": 166, "offset": 6454}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 73, "offset": 2715}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 73, "offset": 2715}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_14.cs", "start": {"col": 25, "line": 73, "offset": 2616}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 73, "offset": 2710}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_14.cs", "start": {"col": 115, "line": 73, "offset": 2706}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "ccf3a78a4d93e18fc561f999d1129d7ab44e6b5e984b06e1c2061e0841b6762de218b212988b1c02438b42601a1d5d8d3d5f452785997aef5b59350f62ce08ec_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 73, "offset": 2629}, "start": {"col": 25, "line": 73, "offset": 2616}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 73, "offset": 2641}, "start": {"col": 39, "line": 73, "offset": 2630}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 73, "offset": 2710}, "start": {"col": 115, "line": 73, "offset": 2706}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_14.cs", "start": {"col": 25, "line": 73, "offset": 2616}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 120, "offset": 4610}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 120, "offset": 4610}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_14.cs", "start": {"col": 25, "line": 120, "offset": 4511}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 120, "offset": 4605}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_14.cs", "start": {"col": 115, "line": 120, "offset": 4601}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "ccf3a78a4d93e18fc561f999d1129d7ab44e6b5e984b06e1c2061e0841b6762de218b212988b1c02438b42601a1d5d8d3d5f452785997aef5b59350f62ce08ec_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 120, "offset": 4524}, "start": {"col": 25, "line": 120, "offset": 4511}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 120, "offset": 4536}, "start": {"col": 39, "line": 120, "offset": 4525}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 120, "offset": 4605}, "start": {"col": 115, "line": 120, "offset": 4601}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_14.cs", "start": {"col": 25, "line": 120, "offset": 4511}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 166, "offset": 6453}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 166, "offset": 6453}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_14.cs", "start": {"col": 25, "line": 166, "offset": 6354}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 166, "offset": 6448}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_14.cs", "start": {"col": 115, "line": 166, "offset": 6444}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "ccf3a78a4d93e18fc561f999d1129d7ab44e6b5e984b06e1c2061e0841b6762de218b212988b1c02438b42601a1d5d8d3d5f452785997aef5b59350f62ce08ec_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 166, "offset": 6367}, "start": {"col": 25, "line": 166, "offset": 6354}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 166, "offset": 6379}, "start": {"col": 39, "line": 166, "offset": 6368}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 166, "offset": 6448}, "start": {"col": 115, "line": 166, "offset": 6444}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_14.cs", "start": {"col": 25, "line": 166, "offset": 6354}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 75, "offset": 2727}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 75, "offset": 2727}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_15.cs", "start": {"col": 25, "line": 75, "offset": 2628}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 75, "offset": 2722}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_15.cs", "start": {"col": 115, "line": 75, "offset": 2718}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "762fffd7222d138e5b444e5c90176d96c0b59f18ee88a27f2457a3f0134fcd26de7035591c6d6876af70f422b67c295fcc885cad70eae6723367f2c566b6928c_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 75, "offset": 2641}, "start": {"col": 25, "line": 75, "offset": 2628}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 75, "offset": 2653}, "start": {"col": 39, "line": 75, "offset": 2642}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 75, "offset": 2722}, "start": {"col": 115, "line": 75, "offset": 2718}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_15.cs", "start": {"col": 25, "line": 75, "offset": 2628}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 129, "offset": 4832}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 129, "offset": 4832}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_15.cs", "start": {"col": 25, "line": 129, "offset": 4733}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 129, "offset": 4827}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_15.cs", "start": {"col": 115, "line": 129, "offset": 4823}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "762fffd7222d138e5b444e5c90176d96c0b59f18ee88a27f2457a3f0134fcd26de7035591c6d6876af70f422b67c295fcc885cad70eae6723367f2c566b6928c_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 129, "offset": 4746}, "start": {"col": 25, "line": 129, "offset": 4733}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 129, "offset": 4758}, "start": {"col": 39, "line": 129, "offset": 4747}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 129, "offset": 4827}, "start": {"col": 115, "line": 129, "offset": 4823}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_15.cs", "start": {"col": 25, "line": 129, "offset": 4733}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 182, "offset": 6907}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 182, "offset": 6907}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_15.cs", "start": {"col": 25, "line": 182, "offset": 6808}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 182, "offset": 6902}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_15.cs", "start": {"col": 115, "line": 182, "offset": 6898}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "762fffd7222d138e5b444e5c90176d96c0b59f18ee88a27f2457a3f0134fcd26de7035591c6d6876af70f422b67c295fcc885cad70eae6723367f2c566b6928c_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 182, "offset": 6821}, "start": {"col": 25, "line": 182, "offset": 6808}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 182, "offset": 6833}, "start": {"col": 39, "line": 182, "offset": 6822}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 182, "offset": 6902}, "start": {"col": 115, "line": 182, "offset": 6898}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_15.cs", "start": {"col": 25, "line": 182, "offset": 6808}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 68, "offset": 2451}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 68, "offset": 2451}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_16.cs", "start": {"col": 25, "line": 68, "offset": 2352}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 68, "offset": 2446}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_16.cs", "start": {"col": 115, "line": 68, "offset": 2442}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "11c4126815549e0a05505ba2a92d37355f71b2348d1dd32b6f5e1d600a58cdf123fff7b13979fde1fff5a124b476f6d30e3c00f3e2eefc483f9b3aa980f94338_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 68, "offset": 2365}, "start": {"col": 25, "line": 68, "offset": 2352}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 68, "offset": 2377}, "start": {"col": 39, "line": 68, "offset": 2366}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 68, "offset": 2446}, "start": {"col": 115, "line": 68, "offset": 2442}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_16.cs", "start": {"col": 25, "line": 68, "offset": 2352}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 111, "offset": 4079}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 111, "offset": 4079}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_16.cs", "start": {"col": 25, "line": 111, "offset": 3980}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 111, "offset": 4074}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_16.cs", "start": {"col": 115, "line": 111, "offset": 4070}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "11c4126815549e0a05505ba2a92d37355f71b2348d1dd32b6f5e1d600a58cdf123fff7b13979fde1fff5a124b476f6d30e3c00f3e2eefc483f9b3aa980f94338_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 111, "offset": 3993}, "start": {"col": 25, "line": 111, "offset": 3980}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 111, "offset": 4005}, "start": {"col": 39, "line": 111, "offset": 3994}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 111, "offset": 4074}, "start": {"col": 115, "line": 111, "offset": 4070}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_16.cs", "start": {"col": 25, "line": 111, "offset": 3980}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 68, "offset": 2514}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 68, "offset": 2514}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_17.cs", "start": {"col": 25, "line": 68, "offset": 2415}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 68, "offset": 2509}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_17.cs", "start": {"col": 115, "line": 68, "offset": 2505}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "02c7cc84d01e344c6057a0d3777a4ad24da067f30261ebbe3954ed100955de3c503e1f6791d8c641d255711e017634c0d32698f1f5aefe7ee173167bf39d145a_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 68, "offset": 2428}, "start": {"col": 25, "line": 68, "offset": 2415}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 68, "offset": 2440}, "start": {"col": 39, "line": 68, "offset": 2429}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 68, "offset": 2509}, "start": {"col": 115, "line": 68, "offset": 2505}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_17.cs", "start": {"col": 25, "line": 68, "offset": 2415}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 106, "offset": 4065}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 106, "offset": 4065}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_17.cs", "start": {"col": 25, "line": 106, "offset": 3966}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 106, "offset": 4060}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_17.cs", "start": {"col": 115, "line": 106, "offset": 4056}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "02c7cc84d01e344c6057a0d3777a4ad24da067f30261ebbe3954ed100955de3c503e1f6791d8c641d255711e017634c0d32698f1f5aefe7ee173167bf39d145a_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 106, "offset": 3979}, "start": {"col": 25, "line": 106, "offset": 3966}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 106, "offset": 3991}, "start": {"col": 39, "line": 106, "offset": 3980}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 106, "offset": 4060}, "start": {"col": 115, "line": 106, "offset": 4056}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_17.cs", "start": {"col": 25, "line": 106, "offset": 3966}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 73, "offset": 2678}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 73, "offset": 2678}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_21.cs", "start": {"col": 25, "line": 73, "offset": 2579}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 73, "offset": 2673}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_21.cs", "start": {"col": 115, "line": 73, "offset": 2669}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "9292d6d3f4f86383245d063fcb1188a9465a6df232524fd7aa5116c3bf95ab4dc232afad5b130ceb14f1f8c76b69550055ca53546adff4407689539f22b212aa_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 73, "offset": 2592}, "start": {"col": 25, "line": 73, "offset": 2579}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 73, "offset": 2604}, "start": {"col": 39, "line": 73, "offset": 2593}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 73, "offset": 2673}, "start": {"col": 115, "line": 73, "offset": 2669}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_21.cs", "start": {"col": 25, "line": 73, "offset": 2579}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 259, "offset": 10136}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 259, "offset": 10136}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_21.cs", "start": {"col": 25, "line": 259, "offset": 10037}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 259, "offset": 10131}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_21.cs", "start": {"col": 115, "line": 259, "offset": 10127}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "9292d6d3f4f86383245d063fcb1188a9465a6df232524fd7aa5116c3bf95ab4dc232afad5b130ceb14f1f8c76b69550055ca53546adff4407689539f22b212aa_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 259, "offset": 10050}, "start": {"col": 25, "line": 259, "offset": 10037}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 259, "offset": 10062}, "start": {"col": 39, "line": 259, "offset": 10051}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 259, "offset": 10131}, "start": {"col": 115, "line": 259, "offset": 10127}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_21.cs", "start": {"col": 25, "line": 259, "offset": 10037}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 43, "offset": 1711}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 43, "offset": 1711}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_22b.cs", "start": {"col": 25, "line": 43, "offset": 1612}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 43, "offset": 1706}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_22b.cs", "start": {"col": 115, "line": 43, "offset": 1702}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "e5dd739c8e4e1278c51f87e8102f4b0509127dadb5e49aaa9162afcbff06bbac526f1e13c9585526a8d4f8b62d3cf6ea1cddb628ab66da88efdee5882061bf76_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 43, "offset": 1625}, "start": {"col": 25, "line": 43, "offset": 1612}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 43, "offset": 1637}, "start": {"col": 39, "line": 43, "offset": 1626}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 43, "offset": 1706}, "start": {"col": 115, "line": 43, "offset": 1702}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_22b.cs", "start": {"col": 25, "line": 43, "offset": 1612}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 173, "offset": 7464}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 173, "offset": 7464}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_22b.cs", "start": {"col": 25, "line": 173, "offset": 7365}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 173, "offset": 7459}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_22b.cs", "start": {"col": 115, "line": 173, "offset": 7455}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "e5dd739c8e4e1278c51f87e8102f4b0509127dadb5e49aaa9162afcbff06bbac526f1e13c9585526a8d4f8b62d3cf6ea1cddb628ab66da88efdee5882061bf76_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 173, "offset": 7378}, "start": {"col": 25, "line": 173, "offset": 7365}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 173, "offset": 7390}, "start": {"col": 39, "line": 173, "offset": 7379}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 173, "offset": 7459}, "start": {"col": 115, "line": 173, "offset": 7455}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_22b.cs", "start": {"col": 25, "line": 173, "offset": 7365}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 68, "offset": 2522}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "dataCopy", "location": {"end": {"col": 21, "line": 55, "offset": 1868}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_31.cs", "start": {"col": 13, "line": 55, "offset": 1860}}}, {"content": "data", "location": {"end": {"col": 24, "line": 58, "offset": 1923}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_31.cs", "start": {"col": 20, "line": 58, "offset": 1919}}}], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 68, "offset": 2522}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_31.cs", "start": {"col": 25, "line": 68, "offset": 2423}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 28, "line": 55, "offset": 1875}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_31.cs", "start": {"col": 24, "line": 55, "offset": 1871}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "aac573bb64803465d18a503300efda9504e877c003ae7f6aac90ee82bd5b0481086d3ca2c8c6969561af14cf03576284bba8a4d61971f36d688a16f0e9a1a31e_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 68, "offset": 2436}, "start": {"col": 25, "line": 68, "offset": 2423}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 68, "offset": 2448}, "start": {"col": 39, "line": 68, "offset": 2437}}, "$X": {"abstract_content": "data", "end": {"col": 28, "line": 55, "offset": 1875}, "start": {"col": 24, "line": 55, "offset": 1871}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_31.cs", "start": {"col": 25, "line": 68, "offset": 2423}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 43, "offset": 1583}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 43, "offset": 1583}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_41.cs", "start": {"col": 21, "line": 43, "offset": 1484}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 43, "offset": 1578}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_41.cs", "start": {"col": 111, "line": 43, "offset": 1574}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "55dd533eefcee5e55c4f5d9c69e3c81e7553d3fd9b2688597862152f1d401a7436c0de205cff8b79542c7c9962b06c45fa7e9481412294d836de4aaa2fa36c2b_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 43, "offset": 1497}, "start": {"col": 21, "line": 43, "offset": 1484}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 43, "offset": 1509}, "start": {"col": 35, "line": 43, "offset": 1498}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 43, "offset": 1578}, "start": {"col": 111, "line": 43, "offset": 1574}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_41.cs", "start": {"col": 21, "line": 43, "offset": 1484}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 104, "offset": 3861}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 104, "offset": 3861}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_41.cs", "start": {"col": 21, "line": 104, "offset": 3762}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 104, "offset": 3856}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_41.cs", "start": {"col": 111, "line": 104, "offset": 3852}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "55dd533eefcee5e55c4f5d9c69e3c81e7553d3fd9b2688597862152f1d401a7436c0de205cff8b79542c7c9962b06c45fa7e9481412294d836de4aaa2fa36c2b_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 104, "offset": 3775}, "start": {"col": 21, "line": 104, "offset": 3762}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 104, "offset": 3787}, "start": {"col": 35, "line": 104, "offset": 3776}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 104, "offset": 3856}, "start": {"col": 111, "line": 104, "offset": 3852}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_41.cs", "start": {"col": 21, "line": 104, "offset": 3762}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 68, "offset": 2452}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 68, "offset": 2452}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_42.cs", "start": {"col": 21, "line": 68, "offset": 2353}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 68, "offset": 2447}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_42.cs", "start": {"col": 111, "line": 68, "offset": 2443}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "e5689e5c08f36a53abad17c098d232dc15408357ef19de0b184a70f5b059f0779cd3a71caff2ea2a2a3d6accb0bf8a3ee23b8e1316f94f1069a703098c3ff967_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 68, "offset": 2366}, "start": {"col": 21, "line": 68, "offset": 2353}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 68, "offset": 2378}, "start": {"col": 35, "line": 68, "offset": 2367}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 68, "offset": 2447}, "propagated_value": {"svalue_abstract_content": "BadSource(req resp)", "svalue_end": {"col": 43, "line": 58, "offset": 1904}, "svalue_start": {"col": 23, "line": 58, "offset": 1884}}, "start": {"col": 111, "line": 68, "offset": 2443}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_42.cs", "start": {"col": 21, "line": 68, "offset": 2353}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 109, "offset": 4011}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 109, "offset": 4011}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_42.cs", "start": {"col": 21, "line": 109, "offset": 3912}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 109, "offset": 4006}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_42.cs", "start": {"col": 111, "line": 109, "offset": 4002}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "e5689e5c08f36a53abad17c098d232dc15408357ef19de0b184a70f5b059f0779cd3a71caff2ea2a2a3d6accb0bf8a3ee23b8e1316f94f1069a703098c3ff967_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 109, "offset": 3925}, "start": {"col": 21, "line": 109, "offset": 3912}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 109, "offset": 3937}, "start": {"col": 35, "line": 109, "offset": 3926}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 109, "offset": 4006}, "propagated_value": {"svalue_abstract_content": "GoodG2BSource(req resp)", "svalue_end": {"col": 47, "line": 99, "offset": 3463}, "svalue_start": {"col": 23, "line": 99, "offset": 3439}}, "start": {"col": 111, "line": 109, "offset": 4002}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_42.cs", "start": {"col": 21, "line": 109, "offset": 3912}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 48, "offset": 1713}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "data", "location": {"end": {"col": 20, "line": 38, "offset": 1155}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_45.cs", "start": {"col": 16, "line": 38, "offset": 1151}}}], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 48, "offset": 1713}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_45.cs", "start": {"col": 21, "line": 48, "offset": 1614}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 30, "line": 38, "offset": 1165}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_45.cs", "start": {"col": 23, "line": 38, "offset": 1158}}, "dataBad"]]}, "engine_kind": "OSS", "fingerprint": "28015bd5e9d89e57b1107a3c244d3992d20376413022f4efb6c553ea2cb20bcc03a8ddb05f6e6ec3d78d926049fec4b97c319c241f07c5eb122cf67ef5d3714a_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 48, "offset": 1627}, "start": {"col": 21, "line": 48, "offset": 1614}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 48, "offset": 1639}, "start": {"col": 35, "line": 48, "offset": 1628}}, "$X": {"abstract_content": "dataBad", "end": {"col": 30, "line": 38, "offset": 1165}, "start": {"col": 23, "line": 38, "offset": 1158}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_45.cs", "start": {"col": 21, "line": 48, "offset": 1614}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 111, "offset": 4023}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "data", "location": {"end": {"col": 20, "line": 101, "offset": 3461}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_45.cs", "start": {"col": 16, "line": 101, "offset": 3457}}}], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 111, "offset": 4023}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_45.cs", "start": {"col": 21, "line": 111, "offset": 3924}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 34, "line": 101, "offset": 3475}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_45.cs", "start": {"col": 23, "line": 101, "offset": 3464}}, "dataGoodG2B"]]}, "engine_kind": "OSS", "fingerprint": "ca33f16385860518364f08894865fe3b4c73506f53a20235daea12665b04ae738a2bcb2d0f6d00d2c51c0cfc15cf8fa710f435c84c89e216fc486ab339e43d12_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 111, "offset": 3937}, "start": {"col": 21, "line": 111, "offset": 3924}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 111, "offset": 3949}, "start": {"col": 35, "line": 111, "offset": 3938}}, "$X": {"abstract_content": "dataGoodG2B", "end": {"col": 34, "line": 101, "offset": 3475}, "start": {"col": 23, "line": 101, "offset": 3464}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_45.cs", "start": {"col": 21, "line": 111, "offset": 3924}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 41, "offset": 1568}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 41, "offset": 1568}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_51b.cs", "start": {"col": 21, "line": 41, "offset": 1469}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 41, "offset": 1563}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_51b.cs", "start": {"col": 111, "line": 41, "offset": 1559}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "c15f7933b4f6e0407c34156f66a8c4731c1df6dacd487db6308a1242dc7ebb5b6f300361f5251d78cf32dfff04db0b616dbfec3270c1ecd8e2d866cb9fc6ff38_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 41, "offset": 1482}, "start": {"col": 21, "line": 41, "offset": 1469}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 41, "offset": 1494}, "start": {"col": 35, "line": 41, "offset": 1483}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 41, "offset": 1563}, "start": {"col": 111, "line": 41, "offset": 1559}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_51b.cs", "start": {"col": 21, "line": 41, "offset": 1469}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 74, "offset": 2884}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 74, "offset": 2884}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_51b.cs", "start": {"col": 21, "line": 74, "offset": 2785}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 74, "offset": 2879}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_51b.cs", "start": {"col": 111, "line": 74, "offset": 2875}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "c15f7933b4f6e0407c34156f66a8c4731c1df6dacd487db6308a1242dc7ebb5b6f300361f5251d78cf32dfff04db0b616dbfec3270c1ecd8e2d866cb9fc6ff38_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 74, "offset": 2798}, "start": {"col": 21, "line": 74, "offset": 2785}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 74, "offset": 2810}, "start": {"col": 35, "line": 74, "offset": 2799}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 74, "offset": 2879}, "start": {"col": 111, "line": 74, "offset": 2875}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_51b.cs", "start": {"col": 21, "line": 74, "offset": 2785}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 41, "offset": 1583}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 41, "offset": 1583}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_52c.cs", "start": {"col": 21, "line": 41, "offset": 1484}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 41, "offset": 1578}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_52c.cs", "start": {"col": 111, "line": 41, "offset": 1574}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "88e083ea5837c0ae198b5bfa37624206854e4cb74617a933c0ea38124021bafd2ed3729c45bfe9e20444f693fae5c3a2b884f80dedf44445648cb573bb1f3a34_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 41, "offset": 1497}, "start": {"col": 21, "line": 41, "offset": 1484}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 41, "offset": 1509}, "start": {"col": 35, "line": 41, "offset": 1498}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 41, "offset": 1578}, "start": {"col": 111, "line": 41, "offset": 1574}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_52c.cs", "start": {"col": 21, "line": 41, "offset": 1484}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 74, "offset": 2899}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 74, "offset": 2899}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_52c.cs", "start": {"col": 21, "line": 74, "offset": 2800}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 74, "offset": 2894}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_52c.cs", "start": {"col": 111, "line": 74, "offset": 2890}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "88e083ea5837c0ae198b5bfa37624206854e4cb74617a933c0ea38124021bafd2ed3729c45bfe9e20444f693fae5c3a2b884f80dedf44445648cb573bb1f3a34_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 74, "offset": 2813}, "start": {"col": 21, "line": 74, "offset": 2800}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 74, "offset": 2825}, "start": {"col": 35, "line": 74, "offset": 2814}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 74, "offset": 2894}, "start": {"col": 111, "line": 74, "offset": 2890}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_52c.cs", "start": {"col": 21, "line": 74, "offset": 2800}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 41, "offset": 1610}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 41, "offset": 1610}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_53d.cs", "start": {"col": 21, "line": 41, "offset": 1511}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 41, "offset": 1605}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_53d.cs", "start": {"col": 111, "line": 41, "offset": 1601}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "eecbf0094400e381f35312455deb1550f6cde4be031c6df540151331e090266bfaa05c5f03561253e2fe981268bdfc3975d2ab5915e97b084e1685fbbfe9c564_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 41, "offset": 1524}, "start": {"col": 21, "line": 41, "offset": 1511}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 41, "offset": 1536}, "start": {"col": 35, "line": 41, "offset": 1525}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 41, "offset": 1605}, "start": {"col": 111, "line": 41, "offset": 1601}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_53d.cs", "start": {"col": 21, "line": 41, "offset": 1511}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 74, "offset": 2926}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 74, "offset": 2926}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_53d.cs", "start": {"col": 21, "line": 74, "offset": 2827}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 74, "offset": 2921}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_53d.cs", "start": {"col": 111, "line": 74, "offset": 2917}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "eecbf0094400e381f35312455deb1550f6cde4be031c6df540151331e090266bfaa05c5f03561253e2fe981268bdfc3975d2ab5915e97b084e1685fbbfe9c564_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 74, "offset": 2840}, "start": {"col": 21, "line": 74, "offset": 2827}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 74, "offset": 2852}, "start": {"col": 35, "line": 74, "offset": 2841}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 74, "offset": 2921}, "start": {"col": 111, "line": 74, "offset": 2917}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_53d.cs", "start": {"col": 21, "line": 74, "offset": 2827}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 41, "offset": 1611}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 41, "offset": 1611}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_54e.cs", "start": {"col": 21, "line": 41, "offset": 1512}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 41, "offset": 1606}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_54e.cs", "start": {"col": 111, "line": 41, "offset": 1602}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "ea7ba9e7cfec9e130d67f28d449784133abc70a0997cd51f4d21065e6e5503bc474dc699753d7682c431f7e56fabd30624105a4b1619f4823488a8685e538caa_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 41, "offset": 1525}, "start": {"col": 21, "line": 41, "offset": 1512}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 41, "offset": 1537}, "start": {"col": 35, "line": 41, "offset": 1526}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 41, "offset": 1606}, "start": {"col": 111, "line": 41, "offset": 1602}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_54e.cs", "start": {"col": 21, "line": 41, "offset": 1512}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 74, "offset": 2927}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 74, "offset": 2927}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_54e.cs", "start": {"col": 21, "line": 74, "offset": 2828}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 74, "offset": 2922}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_54e.cs", "start": {"col": 111, "line": 74, "offset": 2918}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "ea7ba9e7cfec9e130d67f28d449784133abc70a0997cd51f4d21065e6e5503bc474dc699753d7682c431f7e56fabd30624105a4b1619f4823488a8685e538caa_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 74, "offset": 2841}, "start": {"col": 21, "line": 74, "offset": 2828}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 74, "offset": 2853}, "start": {"col": 35, "line": 74, "offset": 2842}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 74, "offset": 2922}, "start": {"col": 111, "line": 74, "offset": 2918}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_54e.cs", "start": {"col": 21, "line": 74, "offset": 2828}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 42, "offset": 1654}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 42, "offset": 1654}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_61a.cs", "start": {"col": 21, "line": 42, "offset": 1555}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 42, "offset": 1649}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_61a.cs", "start": {"col": 111, "line": 42, "offset": 1645}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "8f4309e8ac5c41453ea401a860b9edb2bd4bba4a759f6da5a84302e2b48ed4432be09dd0190d06a6b5325d8c5698f9e1da217e8d8cc1dda10f74089886e53186_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 42, "offset": 1568}, "start": {"col": 21, "line": 42, "offset": 1555}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 42, "offset": 1580}, "start": {"col": 35, "line": 42, "offset": 1569}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 42, "offset": 1649}, "propagated_value": {"svalue_abstract_content": "CWE89_SQL_Injection__Web_File_ExecuteNonQuery_61b.BadSource(req resp)", "svalue_end": {"col": 93, "line": 32, "offset": 1106}, "svalue_start": {"col": 23, "line": 32, "offset": 1036}}, "start": {"col": 111, "line": 42, "offset": 1645}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_61a.cs", "start": {"col": 21, "line": 42, "offset": 1555}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 81, "offset": 3201}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 81, "offset": 3201}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_61a.cs", "start": {"col": 21, "line": 81, "offset": 3102}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 81, "offset": 3196}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_61a.cs", "start": {"col": 111, "line": 81, "offset": 3192}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "8f4309e8ac5c41453ea401a860b9edb2bd4bba4a759f6da5a84302e2b48ed4432be09dd0190d06a6b5325d8c5698f9e1da217e8d8cc1dda10f74089886e53186_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 81, "offset": 3115}, "start": {"col": 21, "line": 81, "offset": 3102}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 81, "offset": 3127}, "start": {"col": 35, "line": 81, "offset": 3116}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 81, "offset": 3196}, "propagated_value": {"svalue_abstract_content": "CWE89_SQL_Injection__Web_File_ExecuteNonQuery_61b.GoodG2BSource(req resp)", "svalue_end": {"col": 97, "line": 71, "offset": 2653}, "svalue_start": {"col": 23, "line": 71, "offset": 2579}}, "start": {"col": 111, "line": 81, "offset": 3192}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_61a.cs", "start": {"col": 21, "line": 81, "offset": 3102}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 42, "offset": 1612}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 42, "offset": 1612}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_66b.cs", "start": {"col": 21, "line": 42, "offset": 1513}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 42, "offset": 1607}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_66b.cs", "start": {"col": 111, "line": 42, "offset": 1603}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "2f72bf7e776d8e677d03c36f9bddf99925e835061e8795ef2730256596d2387d07d78309d0a5a4bdac693eb054bbb632af42fed2bde806ea778c12afcec5a258_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 42, "offset": 1526}, "start": {"col": 21, "line": 42, "offset": 1513}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 42, "offset": 1538}, "start": {"col": 35, "line": 42, "offset": 1527}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 42, "offset": 1607}, "start": {"col": 111, "line": 42, "offset": 1603}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_66b.cs", "start": {"col": 21, "line": 42, "offset": 1513}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 76, "offset": 2972}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 76, "offset": 2972}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_66b.cs", "start": {"col": 21, "line": 76, "offset": 2873}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 76, "offset": 2967}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_66b.cs", "start": {"col": 111, "line": 76, "offset": 2963}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "2f72bf7e776d8e677d03c36f9bddf99925e835061e8795ef2730256596d2387d07d78309d0a5a4bdac693eb054bbb632af42fed2bde806ea778c12afcec5a258_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 76, "offset": 2886}, "start": {"col": 21, "line": 76, "offset": 2873}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 76, "offset": 2898}, "start": {"col": 35, "line": 76, "offset": 2887}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 76, "offset": 2967}, "start": {"col": 111, "line": 76, "offset": 2963}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_66b.cs", "start": {"col": 21, "line": 76, "offset": 2873}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 42, "offset": 1680}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 42, "offset": 1680}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_67b.cs", "start": {"col": 21, "line": 42, "offset": 1581}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 42, "offset": 1675}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_67b.cs", "start": {"col": 111, "line": 42, "offset": 1671}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "5f00e8c2bc22b1236725f712d9e377baebf74326d503440cdb41adb51fcb8356f2543a9a47984f1750a16794ef4ade8cad6f37217533ae746f580807a763090d_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 42, "offset": 1594}, "start": {"col": 21, "line": 42, "offset": 1581}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 42, "offset": 1606}, "start": {"col": 35, "line": 42, "offset": 1595}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 42, "offset": 1675}, "propagated_value": {"svalue_abstract_content": "dataContainer.containerOne", "svalue_end": {"col": 49, "line": 32, "offset": 1132}, "svalue_start": {"col": 23, "line": 32, "offset": 1106}}, "start": {"col": 111, "line": 42, "offset": 1671}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_67b.cs", "start": {"col": 21, "line": 42, "offset": 1581}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 76, "offset": 3109}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 76, "offset": 3109}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_67b.cs", "start": {"col": 21, "line": 76, "offset": 3010}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 76, "offset": 3104}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_67b.cs", "start": {"col": 111, "line": 76, "offset": 3100}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "5f00e8c2bc22b1236725f712d9e377baebf74326d503440cdb41adb51fcb8356f2543a9a47984f1750a16794ef4ade8cad6f37217533ae746f580807a763090d_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 76, "offset": 3023}, "start": {"col": 21, "line": 76, "offset": 3010}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 76, "offset": 3035}, "start": {"col": 35, "line": 76, "offset": 3024}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 76, "offset": 3104}, "propagated_value": {"svalue_abstract_content": "dataContainer.containerOne", "svalue_end": {"col": 49, "line": 66, "offset": 2561}, "svalue_start": {"col": 23, "line": 66, "offset": 2535}}, "start": {"col": 111, "line": 76, "offset": 3100}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_67b.cs", "start": {"col": 21, "line": 76, "offset": 3010}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 42, "offset": 1650}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 42, "offset": 1650}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_68b.cs", "start": {"col": 21, "line": 42, "offset": 1551}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 42, "offset": 1645}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_68b.cs", "start": {"col": 111, "line": 42, "offset": 1641}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "ba4f8311497db04f10b3512abc908aefe0ee17a5082413acfec42e5733c2243f8a2fd0e3ac3a7335c4ea483062d88c687294ba734b8690c858486eeab7ea44f1_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 42, "offset": 1564}, "start": {"col": 21, "line": 42, "offset": 1551}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 42, "offset": 1576}, "start": {"col": 35, "line": 42, "offset": 1565}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 42, "offset": 1645}, "propagated_value": {"svalue_abstract_content": "CWE89_SQL_Injection__Web_File_ExecuteNonQuery_68a.data", "svalue_end": {"col": 77, "line": 32, "offset": 1102}, "svalue_start": {"col": 23, "line": 32, "offset": 1048}}, "start": {"col": 111, "line": 42, "offset": 1641}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_68b.cs", "start": {"col": 21, "line": 42, "offset": 1551}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 76, "offset": 3031}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 76, "offset": 3031}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_68b.cs", "start": {"col": 21, "line": 76, "offset": 2932}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 76, "offset": 3026}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_68b.cs", "start": {"col": 111, "line": 76, "offset": 3022}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "ba4f8311497db04f10b3512abc908aefe0ee17a5082413acfec42e5733c2243f8a2fd0e3ac3a7335c4ea483062d88c687294ba734b8690c858486eeab7ea44f1_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 76, "offset": 2945}, "start": {"col": 21, "line": 76, "offset": 2932}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 76, "offset": 2957}, "start": {"col": 35, "line": 76, "offset": 2946}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 76, "offset": 3026}, "propagated_value": {"svalue_abstract_content": "CWE89_SQL_Injection__Web_File_ExecuteNonQuery_68a.data", "svalue_end": {"col": 77, "line": 66, "offset": 2483}, "svalue_start": {"col": 23, "line": 66, "offset": 2429}}, "start": {"col": 111, "line": 76, "offset": 3022}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_68b.cs", "start": {"col": 21, "line": 76, "offset": 2932}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 43, "offset": 1634}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "data", "location": {"end": {"col": 20, "line": 33, "offset": 1065}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_71b.cs", "start": {"col": 16, "line": 33, "offset": 1061}}}], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 43, "offset": 1634}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_71b.cs", "start": {"col": 21, "line": 43, "offset": 1535}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 41, "line": 33, "offset": 1086}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_71b.cs", "start": {"col": 23, "line": 33, "offset": 1068}}, "(string)dataObject"]]}, "engine_kind": "OSS", "fingerprint": "3e8a274af4cf624763325d88eaf49e2a5b50fdce7e192221b1cc371e2e6a52fa2a09737cc8f97be1dd5ab743d74afe04ec61fb4713dede6335392822292c81e2_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 43, "offset": 1548}, "start": {"col": 21, "line": 43, "offset": 1535}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 43, "offset": 1560}, "start": {"col": 35, "line": 43, "offset": 1549}}, "$X": {"abstract_content": "(string dataObject", "end": {"col": 41, "line": 33, "offset": 1086}, "start": {"col": 23, "line": 33, "offset": 1068}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_71b.cs", "start": {"col": 21, "line": 43, "offset": 1535}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 77, "offset": 2999}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "data", "location": {"end": {"col": 20, "line": 67, "offset": 2430}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_71b.cs", "start": {"col": 16, "line": 67, "offset": 2426}}}], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 77, "offset": 2999}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_71b.cs", "start": {"col": 21, "line": 77, "offset": 2900}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 41, "line": 67, "offset": 2451}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_71b.cs", "start": {"col": 23, "line": 67, "offset": 2433}}, "(string)dataObject"]]}, "engine_kind": "OSS", "fingerprint": "3e8a274af4cf624763325d88eaf49e2a5b50fdce7e192221b1cc371e2e6a52fa2a09737cc8f97be1dd5ab743d74afe04ec61fb4713dede6335392822292c81e2_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 77, "offset": 2913}, "start": {"col": 21, "line": 77, "offset": 2900}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 77, "offset": 2925}, "start": {"col": 35, "line": 77, "offset": 2914}}, "$X": {"abstract_content": "(string dataObject", "end": {"col": 41, "line": 67, "offset": 2451}, "start": {"col": 23, "line": 67, "offset": 2433}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_71b.cs", "start": {"col": 21, "line": 77, "offset": 2900}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 43, "offset": 1660}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "data", "location": {"end": {"col": 20, "line": 33, "offset": 1084}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_72b.cs", "start": {"col": 16, "line": 33, "offset": 1080}}}], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 43, "offset": 1660}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_72b.cs", "start": {"col": 21, "line": 43, "offset": 1561}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 48, "line": 33, "offset": 1112}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_72b.cs", "start": {"col": 23, "line": 33, "offset": 1087}}, "(string) dataHashtable[2]"]]}, "engine_kind": "OSS", "fingerprint": "95b4f0a2ec899746426e93ebed3c25df21e255307af0799fd97ab42a9201a64db1de1ba4fcc8cbf37ab6d49a9618eece06510edb0c9c886ad3cf6fdce54ee2d7_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 43, "offset": 1574}, "start": {"col": 21, "line": 43, "offset": 1561}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 43, "offset": 1586}, "start": {"col": 35, "line": 43, "offset": 1575}}, "$X": {"abstract_content": "(string dataHashtable[[2]]", "end": {"col": 48, "line": 33, "offset": 1112}, "start": {"col": 23, "line": 33, "offset": 1087}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_72b.cs", "start": {"col": 21, "line": 43, "offset": 1561}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 77, "offset": 3038}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "data", "location": {"end": {"col": 20, "line": 67, "offset": 2462}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_72b.cs", "start": {"col": 16, "line": 67, "offset": 2458}}}], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 77, "offset": 3038}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_72b.cs", "start": {"col": 21, "line": 77, "offset": 2939}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 48, "line": 67, "offset": 2490}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_72b.cs", "start": {"col": 23, "line": 67, "offset": 2465}}, "(string) dataHashtable[2]"]]}, "engine_kind": "OSS", "fingerprint": "95b4f0a2ec899746426e93ebed3c25df21e255307af0799fd97ab42a9201a64db1de1ba4fcc8cbf37ab6d49a9618eece06510edb0c9c886ad3cf6fdce54ee2d7_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 77, "offset": 2952}, "start": {"col": 21, "line": 77, "offset": 2939}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 77, "offset": 2964}, "start": {"col": 35, "line": 77, "offset": 2953}}, "$X": {"abstract_content": "(string dataHashtable[[2]]", "end": {"col": 48, "line": 67, "offset": 2490}, "start": {"col": 23, "line": 67, "offset": 2465}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_72b.cs", "start": {"col": 21, "line": 77, "offset": 2939}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 43, "offset": 1679}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 43, "offset": 1679}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_73b.cs", "start": {"col": 21, "line": 43, "offset": 1580}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 43, "offset": 1674}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_73b.cs", "start": {"col": 111, "line": 43, "offset": 1670}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "879a050db642a92ccfa9732f499f8a8c5a3fca6d5419e7d2674d38a802f4161df43321e699720310344aa2d42b7908d61b6701c7fcf371f994fbde706d928131_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 43, "offset": 1593}, "start": {"col": 21, "line": 43, "offset": 1580}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 43, "offset": 1605}, "start": {"col": 35, "line": 43, "offset": 1594}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 43, "offset": 1674}, "propagated_value": {"svalue_abstract_content": "dataLinkedList.Last.Value", "svalue_end": {"col": 48, "line": 33, "offset": 1131}, "svalue_start": {"col": 23, "line": 33, "offset": 1106}}, "start": {"col": 111, "line": 43, "offset": 1670}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_73b.cs", "start": {"col": 21, "line": 43, "offset": 1580}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 77, "offset": 3067}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 77, "offset": 3067}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_73b.cs", "start": {"col": 21, "line": 77, "offset": 2968}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 77, "offset": 3062}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_73b.cs", "start": {"col": 111, "line": 77, "offset": 3058}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "879a050db642a92ccfa9732f499f8a8c5a3fca6d5419e7d2674d38a802f4161df43321e699720310344aa2d42b7908d61b6701c7fcf371f994fbde706d928131_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 77, "offset": 2981}, "start": {"col": 21, "line": 77, "offset": 2968}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 77, "offset": 2993}, "start": {"col": 35, "line": 77, "offset": 2982}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 77, "offset": 3062}, "propagated_value": {"svalue_abstract_content": "dataLinkedList.Last.Value", "svalue_end": {"col": 48, "line": 67, "offset": 2519}, "svalue_start": {"col": 23, "line": 67, "offset": 2494}}, "start": {"col": 111, "line": 77, "offset": 3058}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_73b.cs", "start": {"col": 21, "line": 77, "offset": 2968}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 43, "offset": 1675}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 43, "offset": 1675}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_74b.cs", "start": {"col": 21, "line": 43, "offset": 1576}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 43, "offset": 1670}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_74b.cs", "start": {"col": 111, "line": 43, "offset": 1666}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "a91ae7639f388dc39dc4a11d5f0ceb82fe2abafc09090b29130853bfc710f14036efd7c349b65aa4fa49795e27b08937c9d124e0f7d2162df7325a9d63be3dc2_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 43, "offset": 1589}, "start": {"col": 21, "line": 43, "offset": 1576}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 43, "offset": 1601}, "start": {"col": 35, "line": 43, "offset": 1590}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 43, "offset": 1670}, "start": {"col": 111, "line": 43, "offset": 1666}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_74b.cs", "start": {"col": 21, "line": 43, "offset": 1576}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 77, "offset": 3060}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 77, "offset": 3060}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_74b.cs", "start": {"col": 21, "line": 77, "offset": 2961}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 77, "offset": 3055}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_74b.cs", "start": {"col": 111, "line": 77, "offset": 3051}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "a91ae7639f388dc39dc4a11d5f0ceb82fe2abafc09090b29130853bfc710f14036efd7c349b65aa4fa49795e27b08937c9d124e0f7d2162df7325a9d63be3dc2_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 77, "offset": 2974}, "start": {"col": 21, "line": 77, "offset": 2961}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 77, "offset": 2986}, "start": {"col": 35, "line": 77, "offset": 2975}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 77, "offset": 3055}, "start": {"col": 111, "line": 77, "offset": 3051}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_74b.cs", "start": {"col": 21, "line": 77, "offset": 2961}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 55, "line": 59, "offset": 2058}, "extra": {"engine_kind": "OSS", "fingerprint": "387cba7884b58b3cf78b18b28beb819817d4972d55bdc0fbfc06e0f5d8ce6ef68a806614d83a3823d100acaa7058164584accc2c59ae7418721e7bbed891b217_0", "is_ignored": false, "lines": "            BinaryFormatter bf = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_75a.cs", "start": {"col": 13, "line": 59, "offset": 2016}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 55, "line": 106, "offset": 3743}, "extra": {"engine_kind": "OSS", "fingerprint": "387cba7884b58b3cf78b18b28beb819817d4972d55bdc0fbfc06e0f5d8ce6ef68a806614d83a3823d100acaa7058164584accc2c59ae7418721e7bbed891b217_1", "is_ignored": false, "lines": "            BinaryFormatter bf = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_75a.cs", "start": {"col": 13, "line": 106, "offset": 3701}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 55, "line": 146, "offset": 5258}, "extra": {"engine_kind": "OSS", "fingerprint": "387cba7884b58b3cf78b18b28beb819817d4972d55bdc0fbfc06e0f5d8ce6ef68a806614d83a3823d100acaa7058164584accc2c59ae7418721e7bbed891b217_2", "is_ignored": false, "lines": "            BinaryFormatter bf = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_75a.cs", "start": {"col": 13, "line": 146, "offset": 5216}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 48, "line": 38, "offset": 1251}, "extra": {"engine_kind": "OSS", "fingerprint": "8e1768340d8d943cadf08db7be42a281987ac83bb3f073a2d6f96129b56071fac7c3721377289cdfb1934cc59e15e7b6de08aa86fb4c32c7f50daa94d028e305_0", "is_ignored": false, "lines": "            var binForm = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_75b.cs", "start": {"col": 17, "line": 38, "offset": 1220}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 54, "offset": 2119}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "data", "location": {"end": {"col": 21, "line": 43, "offset": 1475}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_75b.cs", "start": {"col": 17, "line": 43, "offset": 1471}}}], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 54, "offset": 2119}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_75b.cs", "start": {"col": 25, "line": 54, "offset": 2020}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 62, "line": 43, "offset": 1516}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_75b.cs", "start": {"col": 24, "line": 43, "offset": 1478}}, "(string)binForm.Deserialize(memStream)"]]}, "engine_kind": "OSS", "fingerprint": "625e45f6501f3ab13c1ad665743c59177363e2f76ee7cc5feb66867345712f17b16865c3a6cab1f8bb48701218c84a76e4a83a38705d3b67b28617f4ae4c2684_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 54, "offset": 2033}, "start": {"col": 25, "line": 54, "offset": 2020}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 54, "offset": 2045}, "start": {"col": 39, "line": 54, "offset": 2034}}, "$X": {"abstract_content": "(string binForm.Deserialize(memStream)", "end": {"col": 62, "line": 43, "offset": 1516}, "start": {"col": 24, "line": 43, "offset": 1478}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_75b.cs", "start": {"col": 25, "line": 54, "offset": 2020}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 48, "line": 86, "offset": 3260}, "extra": {"engine_kind": "OSS", "fingerprint": "8e1768340d8d943cadf08db7be42a281987ac83bb3f073a2d6f96129b56071fac7c3721377289cdfb1934cc59e15e7b6de08aa86fb4c32c7f50daa94d028e305_1", "is_ignored": false, "lines": "            var binForm = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_75b.cs", "start": {"col": 17, "line": 86, "offset": 3229}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 102, "offset": 4128}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "data", "location": {"end": {"col": 21, "line": 91, "offset": 3484}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_75b.cs", "start": {"col": 17, "line": 91, "offset": 3480}}}], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 102, "offset": 4128}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_75b.cs", "start": {"col": 25, "line": 102, "offset": 4029}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 62, "line": 91, "offset": 3525}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_75b.cs", "start": {"col": 24, "line": 91, "offset": 3487}}, "(string)binForm.Deserialize(memStream)"]]}, "engine_kind": "OSS", "fingerprint": "625e45f6501f3ab13c1ad665743c59177363e2f76ee7cc5feb66867345712f17b16865c3a6cab1f8bb48701218c84a76e4a83a38705d3b67b28617f4ae4c2684_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 102, "offset": 4042}, "start": {"col": 25, "line": 102, "offset": 4029}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 102, "offset": 4054}, "start": {"col": 39, "line": 102, "offset": 4043}}, "$X": {"abstract_content": "(string binForm.Deserialize(memStream)", "end": {"col": 62, "line": 91, "offset": 3525}, "start": {"col": 24, "line": 91, "offset": 3487}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_75b.cs", "start": {"col": 25, "line": 102, "offset": 4029}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 48, "line": 132, "offset": 5244}, "extra": {"engine_kind": "OSS", "fingerprint": "8e1768340d8d943cadf08db7be42a281987ac83bb3f073a2d6f96129b56071fac7c3721377289cdfb1934cc59e15e7b6de08aa86fb4c32c7f50daa94d028e305_2", "is_ignored": false, "lines": "            var binForm = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_75b.cs", "start": {"col": 17, "line": 132, "offset": 5213}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 41, "offset": 1586}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 41, "offset": 1586}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_81_bad.cs", "start": {"col": 21, "line": 41, "offset": 1487}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 41, "offset": 1581}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_81_bad.cs", "start": {"col": 111, "line": 41, "offset": 1577}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "5accd8070a050e9195e613315ddcccb008c0180ca8b6bb01c6ded327922bbbabf6ae10f5152750cf8057c3e88366bc5de495c3da2f6fa5a0775fb6a5180310ba_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 41, "offset": 1500}, "start": {"col": 21, "line": 41, "offset": 1487}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 41, "offset": 1512}, "start": {"col": 35, "line": 41, "offset": 1501}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 41, "offset": 1581}, "start": {"col": 111, "line": 41, "offset": 1577}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_81_bad.cs", "start": {"col": 21, "line": 41, "offset": 1487}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 42, "offset": 1601}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 42, "offset": 1601}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_81_goodG2B.cs", "start": {"col": 21, "line": 42, "offset": 1502}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 42, "offset": 1596}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_81_goodG2B.cs", "start": {"col": 111, "line": 42, "offset": 1592}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "c5cfcaa7e1de3eb3932a155d5ba40e8433cd46db56271bd402ffff04ece17cb0d6ace962d6fd028d5f6147e2271705138eeadf8492e755d6c62f8fc85a6f0e3b_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 42, "offset": 1515}, "start": {"col": 21, "line": 42, "offset": 1502}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 42, "offset": 1527}, "start": {"col": 35, "line": 42, "offset": 1516}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 42, "offset": 1596}, "start": {"col": 111, "line": 42, "offset": 1592}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteNonQuery_81_goodG2B.cs", "start": {"col": 21, "line": 42, "offset": 1502}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 61, "offset": 2160}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 61, "offset": 2160}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_01.cs", "start": {"col": 21, "line": 61, "offset": 2087}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 61, "offset": 2155}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_01.cs", "start": {"col": 85, "line": 61, "offset": 2151}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "9eb5e3698f6169ab4b4364f4e1cb20a25e2b43583a85dfcd521e3db801a7f6164159e747359eb995ef57aba317954ba9f14f01a75e34f19a586fd33d61a46ed3_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 61, "offset": 2100}, "start": {"col": 21, "line": 61, "offset": 2087}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 61, "offset": 2112}, "start": {"col": 35, "line": 61, "offset": 2101}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 61, "offset": 2155}, "start": {"col": 85, "line": 61, "offset": 2151}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_01.cs", "start": {"col": 21, "line": 61, "offset": 2087}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 72, "offset": 2599}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 72, "offset": 2599}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_02.cs", "start": {"col": 25, "line": 72, "offset": 2526}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 72, "offset": 2594}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_02.cs", "start": {"col": 89, "line": 72, "offset": 2590}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "43f95e93fefbdca51d0df8e6d8aa852c61b208d7c5418cecf0310c6093c8e2a27069a4b6fadde221e40e55aceb726f510b57d5ee042f2c7785be7f5a1016818a_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 72, "offset": 2539}, "start": {"col": 25, "line": 72, "offset": 2526}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 72, "offset": 2551}, "start": {"col": 39, "line": 72, "offset": 2540}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 72, "offset": 2594}, "start": {"col": 89, "line": 72, "offset": 2590}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_02.cs", "start": {"col": 25, "line": 72, "offset": 2526}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 114, "offset": 4233}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 114, "offset": 4233}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_02.cs", "start": {"col": 25, "line": 114, "offset": 4160}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 114, "offset": 4228}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_02.cs", "start": {"col": 89, "line": 114, "offset": 4224}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "43f95e93fefbdca51d0df8e6d8aa852c61b208d7c5418cecf0310c6093c8e2a27069a4b6fadde221e40e55aceb726f510b57d5ee042f2c7785be7f5a1016818a_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 114, "offset": 4173}, "start": {"col": 25, "line": 114, "offset": 4160}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 114, "offset": 4185}, "start": {"col": 39, "line": 114, "offset": 4174}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 114, "offset": 4228}, "start": {"col": 89, "line": 114, "offset": 4224}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_02.cs", "start": {"col": 25, "line": 114, "offset": 4160}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 155, "offset": 5837}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 155, "offset": 5837}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_02.cs", "start": {"col": 25, "line": 155, "offset": 5764}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 155, "offset": 5832}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_02.cs", "start": {"col": 89, "line": 155, "offset": 5828}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "43f95e93fefbdca51d0df8e6d8aa852c61b208d7c5418cecf0310c6093c8e2a27069a4b6fadde221e40e55aceb726f510b57d5ee042f2c7785be7f5a1016818a_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 155, "offset": 5777}, "start": {"col": 25, "line": 155, "offset": 5764}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 155, "offset": 5789}, "start": {"col": 39, "line": 155, "offset": 5778}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 155, "offset": 5832}, "start": {"col": 89, "line": 155, "offset": 5828}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_02.cs", "start": {"col": 25, "line": 155, "offset": 5764}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 72, "offset": 2598}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 72, "offset": 2598}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_03.cs", "start": {"col": 25, "line": 72, "offset": 2525}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 72, "offset": 2593}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_03.cs", "start": {"col": 89, "line": 72, "offset": 2589}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "e6f80ef40e96f99995bf2138cb7e5b1d77733868e790fa907905595c50848ebf84319bbe5ae0c89c485074e16071e87a26dfdf03be2f2d1bc31cde9ca280280d_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 72, "offset": 2538}, "start": {"col": 25, "line": 72, "offset": 2525}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 72, "offset": 2550}, "start": {"col": 39, "line": 72, "offset": 2539}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 72, "offset": 2593}, "start": {"col": 89, "line": 72, "offset": 2589}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_03.cs", "start": {"col": 25, "line": 72, "offset": 2525}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 114, "offset": 4230}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 114, "offset": 4230}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_03.cs", "start": {"col": 25, "line": 114, "offset": 4157}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 114, "offset": 4225}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_03.cs", "start": {"col": 89, "line": 114, "offset": 4221}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "e6f80ef40e96f99995bf2138cb7e5b1d77733868e790fa907905595c50848ebf84319bbe5ae0c89c485074e16071e87a26dfdf03be2f2d1bc31cde9ca280280d_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 114, "offset": 4170}, "start": {"col": 25, "line": 114, "offset": 4157}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 114, "offset": 4182}, "start": {"col": 39, "line": 114, "offset": 4171}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 114, "offset": 4225}, "start": {"col": 89, "line": 114, "offset": 4221}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_03.cs", "start": {"col": 25, "line": 114, "offset": 4157}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 155, "offset": 5834}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 155, "offset": 5834}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_03.cs", "start": {"col": 25, "line": 155, "offset": 5761}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 155, "offset": 5829}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_03.cs", "start": {"col": 89, "line": 155, "offset": 5825}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "e6f80ef40e96f99995bf2138cb7e5b1d77733868e790fa907905595c50848ebf84319bbe5ae0c89c485074e16071e87a26dfdf03be2f2d1bc31cde9ca280280d_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 155, "offset": 5774}, "start": {"col": 25, "line": 155, "offset": 5761}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 155, "offset": 5786}, "start": {"col": 39, "line": 155, "offset": 5775}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 155, "offset": 5829}, "start": {"col": 89, "line": 155, "offset": 5825}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_03.cs", "start": {"col": 25, "line": 155, "offset": 5761}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 79, "offset": 2942}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 79, "offset": 2942}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_04.cs", "start": {"col": 25, "line": 79, "offset": 2869}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 79, "offset": 2937}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_04.cs", "start": {"col": 89, "line": 79, "offset": 2933}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "9d61b291f416a7c101f192bc25be962fd2346bc75286cf203b07413ded3de63b8d5b7e3b78c74e060960b2be30e244ccd3439a3e7812a3641fa9cad2f90be761_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 79, "offset": 2882}, "start": {"col": 25, "line": 79, "offset": 2869}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 79, "offset": 2894}, "start": {"col": 39, "line": 79, "offset": 2883}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 79, "offset": 2937}, "start": {"col": 89, "line": 79, "offset": 2933}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_04.cs", "start": {"col": 25, "line": 79, "offset": 2869}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 121, "offset": 4632}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 121, "offset": 4632}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_04.cs", "start": {"col": 25, "line": 121, "offset": 4559}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 121, "offset": 4627}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_04.cs", "start": {"col": 89, "line": 121, "offset": 4623}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "9d61b291f416a7c101f192bc25be962fd2346bc75286cf203b07413ded3de63b8d5b7e3b78c74e060960b2be30e244ccd3439a3e7812a3641fa9cad2f90be761_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 121, "offset": 4572}, "start": {"col": 25, "line": 121, "offset": 4559}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 121, "offset": 4584}, "start": {"col": 39, "line": 121, "offset": 4573}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 121, "offset": 4627}, "start": {"col": 89, "line": 121, "offset": 4623}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_04.cs", "start": {"col": 25, "line": 121, "offset": 4559}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 162, "offset": 6264}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 162, "offset": 6264}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_04.cs", "start": {"col": 25, "line": 162, "offset": 6191}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 162, "offset": 6259}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_04.cs", "start": {"col": 89, "line": 162, "offset": 6255}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "9d61b291f416a7c101f192bc25be962fd2346bc75286cf203b07413ded3de63b8d5b7e3b78c74e060960b2be30e244ccd3439a3e7812a3641fa9cad2f90be761_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 162, "offset": 6204}, "start": {"col": 25, "line": 162, "offset": 6191}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 162, "offset": 6216}, "start": {"col": 39, "line": 162, "offset": 6205}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 162, "offset": 6259}, "start": {"col": 89, "line": 162, "offset": 6255}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_04.cs", "start": {"col": 25, "line": 162, "offset": 6191}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 78, "offset": 2935}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 78, "offset": 2935}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_05.cs", "start": {"col": 25, "line": 78, "offset": 2862}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 78, "offset": 2930}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_05.cs", "start": {"col": 89, "line": 78, "offset": 2926}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "0842ae9fb7fb5d64984b016a44ecbe1767792a5506c8a20ec82b7b744e47e2b53daad4a8421e607f65374a97916df26e4945e7acbf168ebfe94f090c146b5953_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 78, "offset": 2875}, "start": {"col": 25, "line": 78, "offset": 2862}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 78, "offset": 2887}, "start": {"col": 39, "line": 78, "offset": 2876}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 78, "offset": 2930}, "start": {"col": 89, "line": 78, "offset": 2926}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_05.cs", "start": {"col": 25, "line": 78, "offset": 2862}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 120, "offset": 4597}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 120, "offset": 4597}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_05.cs", "start": {"col": 25, "line": 120, "offset": 4524}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 120, "offset": 4592}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_05.cs", "start": {"col": 89, "line": 120, "offset": 4588}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "0842ae9fb7fb5d64984b016a44ecbe1767792a5506c8a20ec82b7b744e47e2b53daad4a8421e607f65374a97916df26e4945e7acbf168ebfe94f090c146b5953_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 120, "offset": 4537}, "start": {"col": 25, "line": 120, "offset": 4524}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 120, "offset": 4549}, "start": {"col": 39, "line": 120, "offset": 4538}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 120, "offset": 4592}, "start": {"col": 89, "line": 120, "offset": 4588}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_05.cs", "start": {"col": 25, "line": 120, "offset": 4524}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 161, "offset": 6215}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 161, "offset": 6215}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_05.cs", "start": {"col": 25, "line": 161, "offset": 6142}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 161, "offset": 6210}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_05.cs", "start": {"col": 89, "line": 161, "offset": 6206}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "0842ae9fb7fb5d64984b016a44ecbe1767792a5506c8a20ec82b7b744e47e2b53daad4a8421e607f65374a97916df26e4945e7acbf168ebfe94f090c146b5953_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 161, "offset": 6155}, "start": {"col": 25, "line": 161, "offset": 6142}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 161, "offset": 6167}, "start": {"col": 39, "line": 161, "offset": 6156}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 161, "offset": 6210}, "start": {"col": 89, "line": 161, "offset": 6206}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_05.cs", "start": {"col": 25, "line": 161, "offset": 6142}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 77, "offset": 2878}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 77, "offset": 2878}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_06.cs", "start": {"col": 25, "line": 77, "offset": 2805}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 77, "offset": 2873}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_06.cs", "start": {"col": 89, "line": 77, "offset": 2869}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "d3569ebcdcb65438984c06fce5d97fc21b678acb8a2975596d5580a8d5ff85c0683b97943be2367abf44e0571a5f10d2bf107100d6776905a2c9ca1aa2ba22eb_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 77, "offset": 2818}, "start": {"col": 25, "line": 77, "offset": 2805}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 77, "offset": 2830}, "start": {"col": 39, "line": 77, "offset": 2819}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 77, "offset": 2873}, "start": {"col": 89, "line": 77, "offset": 2869}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_06.cs", "start": {"col": 25, "line": 77, "offset": 2805}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 119, "offset": 4578}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 119, "offset": 4578}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_06.cs", "start": {"col": 25, "line": 119, "offset": 4505}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 119, "offset": 4573}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_06.cs", "start": {"col": 89, "line": 119, "offset": 4569}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "d3569ebcdcb65438984c06fce5d97fc21b678acb8a2975596d5580a8d5ff85c0683b97943be2367abf44e0571a5f10d2bf107100d6776905a2c9ca1aa2ba22eb_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 119, "offset": 4518}, "start": {"col": 25, "line": 119, "offset": 4505}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 119, "offset": 4530}, "start": {"col": 39, "line": 119, "offset": 4519}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 119, "offset": 4573}, "start": {"col": 89, "line": 119, "offset": 4569}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_06.cs", "start": {"col": 25, "line": 119, "offset": 4505}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 160, "offset": 6216}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 160, "offset": 6216}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_06.cs", "start": {"col": 25, "line": 160, "offset": 6143}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 160, "offset": 6211}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_06.cs", "start": {"col": 89, "line": 160, "offset": 6207}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "d3569ebcdcb65438984c06fce5d97fc21b678acb8a2975596d5580a8d5ff85c0683b97943be2367abf44e0571a5f10d2bf107100d6776905a2c9ca1aa2ba22eb_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 160, "offset": 6156}, "start": {"col": 25, "line": 160, "offset": 6143}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 160, "offset": 6168}, "start": {"col": 39, "line": 160, "offset": 6157}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 160, "offset": 6211}, "start": {"col": 89, "line": 160, "offset": 6207}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_06.cs", "start": {"col": 25, "line": 160, "offset": 6143}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 77, "offset": 2882}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 77, "offset": 2882}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_07.cs", "start": {"col": 25, "line": 77, "offset": 2809}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 77, "offset": 2877}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_07.cs", "start": {"col": 89, "line": 77, "offset": 2873}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "ebb4b3de46db92a8518a825d1f5e928b4365f77a03b1bccf4751b036db9c212ee4c69302e3167263be341dab907b2b843ed9147856d5f9178707e380b360f5e4_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 77, "offset": 2822}, "start": {"col": 25, "line": 77, "offset": 2809}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 77, "offset": 2834}, "start": {"col": 39, "line": 77, "offset": 2823}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 77, "offset": 2877}, "start": {"col": 89, "line": 77, "offset": 2873}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_07.cs", "start": {"col": 25, "line": 77, "offset": 2809}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 119, "offset": 4554}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 119, "offset": 4554}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_07.cs", "start": {"col": 25, "line": 119, "offset": 4481}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 119, "offset": 4549}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_07.cs", "start": {"col": 89, "line": 119, "offset": 4545}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "ebb4b3de46db92a8518a825d1f5e928b4365f77a03b1bccf4751b036db9c212ee4c69302e3167263be341dab907b2b843ed9147856d5f9178707e380b360f5e4_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 119, "offset": 4494}, "start": {"col": 25, "line": 119, "offset": 4481}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 119, "offset": 4506}, "start": {"col": 39, "line": 119, "offset": 4495}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 119, "offset": 4549}, "start": {"col": 89, "line": 119, "offset": 4545}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_07.cs", "start": {"col": 25, "line": 119, "offset": 4481}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 160, "offset": 6178}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 160, "offset": 6178}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_07.cs", "start": {"col": 25, "line": 160, "offset": 6105}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 160, "offset": 6173}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_07.cs", "start": {"col": 89, "line": 160, "offset": 6169}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "ebb4b3de46db92a8518a825d1f5e928b4365f77a03b1bccf4751b036db9c212ee4c69302e3167263be341dab907b2b843ed9147856d5f9178707e380b360f5e4_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 160, "offset": 6118}, "start": {"col": 25, "line": 160, "offset": 6105}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 160, "offset": 6130}, "start": {"col": 39, "line": 160, "offset": 6119}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 160, "offset": 6173}, "start": {"col": 89, "line": 160, "offset": 6169}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_07.cs", "start": {"col": 25, "line": 160, "offset": 6105}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 85, "offset": 3014}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 85, "offset": 3014}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_08.cs", "start": {"col": 25, "line": 85, "offset": 2941}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 85, "offset": 3009}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_08.cs", "start": {"col": 89, "line": 85, "offset": 3005}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "9f1736c093d46665b1ddff5e5970f04dc3a474ff71cf8d92569df09c6b1b398da5c50f6996f569d001c89a78428a5bdb67a8e5a2cc6ec63d787fe6f2bfa03e7e_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 85, "offset": 2954}, "start": {"col": 25, "line": 85, "offset": 2941}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 85, "offset": 2966}, "start": {"col": 39, "line": 85, "offset": 2955}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 85, "offset": 3009}, "start": {"col": 89, "line": 85, "offset": 3005}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_08.cs", "start": {"col": 25, "line": 85, "offset": 2941}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 127, "offset": 4712}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 127, "offset": 4712}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_08.cs", "start": {"col": 25, "line": 127, "offset": 4639}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 127, "offset": 4707}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_08.cs", "start": {"col": 89, "line": 127, "offset": 4703}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "9f1736c093d46665b1ddff5e5970f04dc3a474ff71cf8d92569df09c6b1b398da5c50f6996f569d001c89a78428a5bdb67a8e5a2cc6ec63d787fe6f2bfa03e7e_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 127, "offset": 4652}, "start": {"col": 25, "line": 127, "offset": 4639}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 127, "offset": 4664}, "start": {"col": 39, "line": 127, "offset": 4653}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 127, "offset": 4707}, "start": {"col": 89, "line": 127, "offset": 4703}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_08.cs", "start": {"col": 25, "line": 127, "offset": 4639}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 168, "offset": 6348}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 168, "offset": 6348}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_08.cs", "start": {"col": 25, "line": 168, "offset": 6275}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 168, "offset": 6343}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_08.cs", "start": {"col": 89, "line": 168, "offset": 6339}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "9f1736c093d46665b1ddff5e5970f04dc3a474ff71cf8d92569df09c6b1b398da5c50f6996f569d001c89a78428a5bdb67a8e5a2cc6ec63d787fe6f2bfa03e7e_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 168, "offset": 6288}, "start": {"col": 25, "line": 168, "offset": 6275}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 168, "offset": 6300}, "start": {"col": 39, "line": 168, "offset": 6289}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 168, "offset": 6343}, "start": {"col": 89, "line": 168, "offset": 6339}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_08.cs", "start": {"col": 25, "line": 168, "offset": 6275}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 72, "offset": 2675}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 72, "offset": 2675}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_09.cs", "start": {"col": 25, "line": 72, "offset": 2602}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 72, "offset": 2670}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_09.cs", "start": {"col": 89, "line": 72, "offset": 2666}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "2e8b9d578ee33d2063632018d552547c13d4bfe3705f278e30ec4df9cb0b3245f832f4c13237b17f53f56f132d26672a67b95cfa9899b678ba6640bec2297420_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 72, "offset": 2615}, "start": {"col": 25, "line": 72, "offset": 2602}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 72, "offset": 2627}, "start": {"col": 39, "line": 72, "offset": 2616}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 72, "offset": 2670}, "start": {"col": 89, "line": 72, "offset": 2666}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_09.cs", "start": {"col": 25, "line": 72, "offset": 2602}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 114, "offset": 4385}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 114, "offset": 4385}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_09.cs", "start": {"col": 25, "line": 114, "offset": 4312}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 114, "offset": 4380}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_09.cs", "start": {"col": 89, "line": 114, "offset": 4376}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "2e8b9d578ee33d2063632018d552547c13d4bfe3705f278e30ec4df9cb0b3245f832f4c13237b17f53f56f132d26672a67b95cfa9899b678ba6640bec2297420_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 114, "offset": 4325}, "start": {"col": 25, "line": 114, "offset": 4312}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 114, "offset": 4337}, "start": {"col": 39, "line": 114, "offset": 4326}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 114, "offset": 4380}, "start": {"col": 89, "line": 114, "offset": 4376}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_09.cs", "start": {"col": 25, "line": 114, "offset": 4312}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 155, "offset": 6027}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 155, "offset": 6027}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_09.cs", "start": {"col": 25, "line": 155, "offset": 5954}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 155, "offset": 6022}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_09.cs", "start": {"col": 89, "line": 155, "offset": 6018}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "2e8b9d578ee33d2063632018d552547c13d4bfe3705f278e30ec4df9cb0b3245f832f4c13237b17f53f56f132d26672a67b95cfa9899b678ba6640bec2297420_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 155, "offset": 5967}, "start": {"col": 25, "line": 155, "offset": 5954}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 155, "offset": 5979}, "start": {"col": 39, "line": 155, "offset": 5968}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 155, "offset": 6022}, "start": {"col": 89, "line": 155, "offset": 6018}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_09.cs", "start": {"col": 25, "line": 155, "offset": 5954}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 72, "offset": 2635}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 72, "offset": 2635}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_10.cs", "start": {"col": 25, "line": 72, "offset": 2562}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 72, "offset": 2630}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_10.cs", "start": {"col": 89, "line": 72, "offset": 2626}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "9593803575d0151911c5859f9336a08d83f4d963a81f24c892618579d26ac761cc660cb8e0741204a8865fe3034c05938d44660dbae1ac0eb02cd6c2e7db0b08_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 72, "offset": 2575}, "start": {"col": 25, "line": 72, "offset": 2562}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 72, "offset": 2587}, "start": {"col": 39, "line": 72, "offset": 2576}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 72, "offset": 2630}, "start": {"col": 89, "line": 72, "offset": 2626}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_10.cs", "start": {"col": 25, "line": 72, "offset": 2562}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 114, "offset": 4305}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 114, "offset": 4305}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_10.cs", "start": {"col": 25, "line": 114, "offset": 4232}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 114, "offset": 4300}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_10.cs", "start": {"col": 89, "line": 114, "offset": 4296}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "9593803575d0151911c5859f9336a08d83f4d963a81f24c892618579d26ac761cc660cb8e0741204a8865fe3034c05938d44660dbae1ac0eb02cd6c2e7db0b08_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 114, "offset": 4245}, "start": {"col": 25, "line": 114, "offset": 4232}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 114, "offset": 4257}, "start": {"col": 39, "line": 114, "offset": 4246}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 114, "offset": 4300}, "start": {"col": 89, "line": 114, "offset": 4296}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_10.cs", "start": {"col": 25, "line": 114, "offset": 4232}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 155, "offset": 5927}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 155, "offset": 5927}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_10.cs", "start": {"col": 25, "line": 155, "offset": 5854}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 155, "offset": 5922}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_10.cs", "start": {"col": 89, "line": 155, "offset": 5918}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "9593803575d0151911c5859f9336a08d83f4d963a81f24c892618579d26ac761cc660cb8e0741204a8865fe3034c05938d44660dbae1ac0eb02cd6c2e7db0b08_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 155, "offset": 5867}, "start": {"col": 25, "line": 155, "offset": 5854}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 155, "offset": 5879}, "start": {"col": 39, "line": 155, "offset": 5868}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 155, "offset": 5922}, "start": {"col": 89, "line": 155, "offset": 5918}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_10.cs", "start": {"col": 25, "line": 155, "offset": 5854}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 72, "offset": 2670}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 72, "offset": 2670}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_11.cs", "start": {"col": 25, "line": 72, "offset": 2597}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 72, "offset": 2665}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_11.cs", "start": {"col": 89, "line": 72, "offset": 2661}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "7ff8ac5acc48ce8fcb53cf03578389f46566421c0ac51d56049834f0a8da68e7997065d5c7eaa4baa3edf931f8a4ae628f57938371fe7d9aa82ce2647ec4f55e_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 72, "offset": 2610}, "start": {"col": 25, "line": 72, "offset": 2597}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 72, "offset": 2622}, "start": {"col": 39, "line": 72, "offset": 2611}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 72, "offset": 2665}, "start": {"col": 89, "line": 72, "offset": 2661}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_11.cs", "start": {"col": 25, "line": 72, "offset": 2597}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 114, "offset": 4376}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 114, "offset": 4376}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_11.cs", "start": {"col": 25, "line": 114, "offset": 4303}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 114, "offset": 4371}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_11.cs", "start": {"col": 89, "line": 114, "offset": 4367}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "7ff8ac5acc48ce8fcb53cf03578389f46566421c0ac51d56049834f0a8da68e7997065d5c7eaa4baa3edf931f8a4ae628f57938371fe7d9aa82ce2647ec4f55e_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 114, "offset": 4316}, "start": {"col": 25, "line": 114, "offset": 4303}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 114, "offset": 4328}, "start": {"col": 39, "line": 114, "offset": 4317}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 114, "offset": 4371}, "start": {"col": 89, "line": 114, "offset": 4367}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_11.cs", "start": {"col": 25, "line": 114, "offset": 4303}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 155, "offset": 6016}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 155, "offset": 6016}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_11.cs", "start": {"col": 25, "line": 155, "offset": 5943}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 155, "offset": 6011}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_11.cs", "start": {"col": 89, "line": 155, "offset": 6007}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "7ff8ac5acc48ce8fcb53cf03578389f46566421c0ac51d56049834f0a8da68e7997065d5c7eaa4baa3edf931f8a4ae628f57938371fe7d9aa82ce2647ec4f55e_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 155, "offset": 5956}, "start": {"col": 25, "line": 155, "offset": 5943}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 155, "offset": 5968}, "start": {"col": 39, "line": 155, "offset": 5957}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 155, "offset": 6011}, "start": {"col": 89, "line": 155, "offset": 6007}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_11.cs", "start": {"col": 25, "line": 155, "offset": 5943}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 71, "offset": 2536}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 71, "offset": 2536}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_12.cs", "start": {"col": 25, "line": 71, "offset": 2463}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 71, "offset": 2531}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_12.cs", "start": {"col": 89, "line": 71, "offset": 2527}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "86ec5f239cf1f883e76ebc9b7535a065af5e7b8847540ec0ee3df36ef0da7f0db0a8952ae477b36a3389f5f0137176b2a08824fef54c34af27d983b163c9fc41_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 71, "offset": 2476}, "start": {"col": 25, "line": 71, "offset": 2463}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 71, "offset": 2488}, "start": {"col": 39, "line": 71, "offset": 2477}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 71, "offset": 2531}, "start": {"col": 89, "line": 71, "offset": 2527}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_12.cs", "start": {"col": 25, "line": 71, "offset": 2463}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 72, "offset": 2686}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 72, "offset": 2686}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_13.cs", "start": {"col": 25, "line": 72, "offset": 2613}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 72, "offset": 2681}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_13.cs", "start": {"col": 89, "line": 72, "offset": 2677}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "482fe7ffde9c7bfdc0847a188b0c84cdf54016fb9b91f82b705a41a7ba11b51a92942975aca85b714ec54ca8ed124784a71f84d64d634b93364e94d9390e8dd6_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 72, "offset": 2626}, "start": {"col": 25, "line": 72, "offset": 2613}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 72, "offset": 2638}, "start": {"col": 39, "line": 72, "offset": 2627}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 72, "offset": 2681}, "start": {"col": 89, "line": 72, "offset": 2677}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_13.cs", "start": {"col": 25, "line": 72, "offset": 2613}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 114, "offset": 4406}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 114, "offset": 4406}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_13.cs", "start": {"col": 25, "line": 114, "offset": 4333}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 114, "offset": 4401}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_13.cs", "start": {"col": 89, "line": 114, "offset": 4397}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "482fe7ffde9c7bfdc0847a188b0c84cdf54016fb9b91f82b705a41a7ba11b51a92942975aca85b714ec54ca8ed124784a71f84d64d634b93364e94d9390e8dd6_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 114, "offset": 4346}, "start": {"col": 25, "line": 114, "offset": 4333}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 114, "offset": 4358}, "start": {"col": 39, "line": 114, "offset": 4347}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 114, "offset": 4401}, "start": {"col": 89, "line": 114, "offset": 4397}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_13.cs", "start": {"col": 25, "line": 114, "offset": 4333}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 155, "offset": 6054}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 155, "offset": 6054}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_13.cs", "start": {"col": 25, "line": 155, "offset": 5981}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 155, "offset": 6049}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_13.cs", "start": {"col": 89, "line": 155, "offset": 6045}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "482fe7ffde9c7bfdc0847a188b0c84cdf54016fb9b91f82b705a41a7ba11b51a92942975aca85b714ec54ca8ed124784a71f84d64d634b93364e94d9390e8dd6_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 155, "offset": 5994}, "start": {"col": 25, "line": 155, "offset": 5981}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 155, "offset": 6006}, "start": {"col": 39, "line": 155, "offset": 5995}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 155, "offset": 6049}, "start": {"col": 89, "line": 155, "offset": 6045}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_13.cs", "start": {"col": 25, "line": 155, "offset": 5981}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 72, "offset": 2646}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 72, "offset": 2646}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_14.cs", "start": {"col": 25, "line": 72, "offset": 2573}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 72, "offset": 2641}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_14.cs", "start": {"col": 89, "line": 72, "offset": 2637}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "aa7b5b462e205e46c7b1ab0e1a2a647053cb5ac1437ac1bfd24901110e28ee57a45f1403bf455d28c42996f4165b84812c870e14d7c50d547e0ca40c7648ee77_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 72, "offset": 2586}, "start": {"col": 25, "line": 72, "offset": 2573}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 72, "offset": 2598}, "start": {"col": 39, "line": 72, "offset": 2587}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 72, "offset": 2641}, "start": {"col": 89, "line": 72, "offset": 2637}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_14.cs", "start": {"col": 25, "line": 72, "offset": 2573}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 114, "offset": 4326}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 114, "offset": 4326}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_14.cs", "start": {"col": 25, "line": 114, "offset": 4253}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 114, "offset": 4321}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_14.cs", "start": {"col": 89, "line": 114, "offset": 4317}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "aa7b5b462e205e46c7b1ab0e1a2a647053cb5ac1437ac1bfd24901110e28ee57a45f1403bf455d28c42996f4165b84812c870e14d7c50d547e0ca40c7648ee77_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 114, "offset": 4266}, "start": {"col": 25, "line": 114, "offset": 4253}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 114, "offset": 4278}, "start": {"col": 39, "line": 114, "offset": 4267}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 114, "offset": 4321}, "start": {"col": 89, "line": 114, "offset": 4317}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_14.cs", "start": {"col": 25, "line": 114, "offset": 4253}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 155, "offset": 5954}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 155, "offset": 5954}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_14.cs", "start": {"col": 25, "line": 155, "offset": 5881}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 155, "offset": 5949}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_14.cs", "start": {"col": 89, "line": 155, "offset": 5945}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "aa7b5b462e205e46c7b1ab0e1a2a647053cb5ac1437ac1bfd24901110e28ee57a45f1403bf455d28c42996f4165b84812c870e14d7c50d547e0ca40c7648ee77_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 155, "offset": 5894}, "start": {"col": 25, "line": 155, "offset": 5881}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 155, "offset": 5906}, "start": {"col": 39, "line": 155, "offset": 5895}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 155, "offset": 5949}, "start": {"col": 89, "line": 155, "offset": 5945}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_14.cs", "start": {"col": 25, "line": 155, "offset": 5881}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 74, "offset": 2658}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 74, "offset": 2658}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_15.cs", "start": {"col": 25, "line": 74, "offset": 2585}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 74, "offset": 2653}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_15.cs", "start": {"col": 89, "line": 74, "offset": 2649}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "13e6f1dc3f1f389074349f97fe0fe08f3235b0da8e3326809ea0e832b654db839be4b8b534623cecf19655c57969dd978261c247a53f8fe83250557933bdd64f_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 74, "offset": 2598}, "start": {"col": 25, "line": 74, "offset": 2585}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 74, "offset": 2610}, "start": {"col": 39, "line": 74, "offset": 2599}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 74, "offset": 2653}, "start": {"col": 89, "line": 74, "offset": 2649}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_15.cs", "start": {"col": 25, "line": 74, "offset": 2585}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 123, "offset": 4548}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 123, "offset": 4548}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_15.cs", "start": {"col": 25, "line": 123, "offset": 4475}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 123, "offset": 4543}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_15.cs", "start": {"col": 89, "line": 123, "offset": 4539}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "13e6f1dc3f1f389074349f97fe0fe08f3235b0da8e3326809ea0e832b654db839be4b8b534623cecf19655c57969dd978261c247a53f8fe83250557933bdd64f_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 123, "offset": 4488}, "start": {"col": 25, "line": 123, "offset": 4475}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 123, "offset": 4500}, "start": {"col": 39, "line": 123, "offset": 4489}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 123, "offset": 4543}, "start": {"col": 89, "line": 123, "offset": 4539}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_15.cs", "start": {"col": 25, "line": 123, "offset": 4475}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 171, "offset": 6408}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 171, "offset": 6408}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_15.cs", "start": {"col": 25, "line": 171, "offset": 6335}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 171, "offset": 6403}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_15.cs", "start": {"col": 89, "line": 171, "offset": 6399}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "13e6f1dc3f1f389074349f97fe0fe08f3235b0da8e3326809ea0e832b654db839be4b8b534623cecf19655c57969dd978261c247a53f8fe83250557933bdd64f_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 171, "offset": 6348}, "start": {"col": 25, "line": 171, "offset": 6335}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 171, "offset": 6360}, "start": {"col": 39, "line": 171, "offset": 6349}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 171, "offset": 6403}, "start": {"col": 89, "line": 171, "offset": 6399}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_15.cs", "start": {"col": 25, "line": 171, "offset": 6335}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 67, "offset": 2382}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 67, "offset": 2382}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_16.cs", "start": {"col": 25, "line": 67, "offset": 2309}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 67, "offset": 2377}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_16.cs", "start": {"col": 89, "line": 67, "offset": 2373}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "8044d9dab66dfba0b8a971eb8885d65d72f995182d8f448297fc3fff4da6f896ef49b9c43153597253ae6d5d6b5b5f3255b4769686ba8b184db6963590591a35_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 67, "offset": 2322}, "start": {"col": 25, "line": 67, "offset": 2309}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 67, "offset": 2334}, "start": {"col": 39, "line": 67, "offset": 2323}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 67, "offset": 2377}, "start": {"col": 89, "line": 67, "offset": 2373}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_16.cs", "start": {"col": 25, "line": 67, "offset": 2309}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 105, "offset": 3795}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 105, "offset": 3795}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_16.cs", "start": {"col": 25, "line": 105, "offset": 3722}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 105, "offset": 3790}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_16.cs", "start": {"col": 89, "line": 105, "offset": 3786}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "8044d9dab66dfba0b8a971eb8885d65d72f995182d8f448297fc3fff4da6f896ef49b9c43153597253ae6d5d6b5b5f3255b4769686ba8b184db6963590591a35_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 105, "offset": 3735}, "start": {"col": 25, "line": 105, "offset": 3722}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 105, "offset": 3747}, "start": {"col": 39, "line": 105, "offset": 3736}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 105, "offset": 3790}, "start": {"col": 89, "line": 105, "offset": 3786}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_16.cs", "start": {"col": 25, "line": 105, "offset": 3722}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 67, "offset": 2445}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 67, "offset": 2445}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_17.cs", "start": {"col": 25, "line": 67, "offset": 2372}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 67, "offset": 2440}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_17.cs", "start": {"col": 89, "line": 67, "offset": 2436}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "cec29bdb977f52c60cc5b7c315ad2f2f77f4cdb6565964a07431bee2c43acb011156328a20cb967ff6af129c1ce14c62a4b8d10b26359d4c5223046c518624bc_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 67, "offset": 2385}, "start": {"col": 25, "line": 67, "offset": 2372}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 67, "offset": 2397}, "start": {"col": 39, "line": 67, "offset": 2386}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 67, "offset": 2440}, "start": {"col": 89, "line": 67, "offset": 2436}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_17.cs", "start": {"col": 25, "line": 67, "offset": 2372}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 100, "offset": 3781}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 100, "offset": 3781}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_17.cs", "start": {"col": 25, "line": 100, "offset": 3708}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 100, "offset": 3776}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_17.cs", "start": {"col": 89, "line": 100, "offset": 3772}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "cec29bdb977f52c60cc5b7c315ad2f2f77f4cdb6565964a07431bee2c43acb011156328a20cb967ff6af129c1ce14c62a4b8d10b26359d4c5223046c518624bc_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 100, "offset": 3721}, "start": {"col": 25, "line": 100, "offset": 3708}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 100, "offset": 3733}, "start": {"col": 39, "line": 100, "offset": 3722}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 100, "offset": 3776}, "start": {"col": 89, "line": 100, "offset": 3772}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_17.cs", "start": {"col": 25, "line": 100, "offset": 3708}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 72, "offset": 2609}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 72, "offset": 2609}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_21.cs", "start": {"col": 25, "line": 72, "offset": 2536}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 72, "offset": 2604}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_21.cs", "start": {"col": 89, "line": 72, "offset": 2600}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "74352f16e40cfd5f52b951918e6cf96be96beb7fb05732a0229f5d8075e2fcd24776db7b67b30c7a0028a3c8f2ef1573b84127cfab2ffc8ab70b8d3e65204a98_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 72, "offset": 2549}, "start": {"col": 25, "line": 72, "offset": 2536}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 72, "offset": 2561}, "start": {"col": 39, "line": 72, "offset": 2550}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 72, "offset": 2604}, "start": {"col": 89, "line": 72, "offset": 2600}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_21.cs", "start": {"col": 25, "line": 72, "offset": 2536}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 241, "offset": 9322}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 241, "offset": 9322}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_21.cs", "start": {"col": 25, "line": 241, "offset": 9249}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 241, "offset": 9317}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_21.cs", "start": {"col": 89, "line": 241, "offset": 9313}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "74352f16e40cfd5f52b951918e6cf96be96beb7fb05732a0229f5d8075e2fcd24776db7b67b30c7a0028a3c8f2ef1573b84127cfab2ffc8ab70b8d3e65204a98_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 241, "offset": 9262}, "start": {"col": 25, "line": 241, "offset": 9249}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 241, "offset": 9274}, "start": {"col": 39, "line": 241, "offset": 9263}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 241, "offset": 9317}, "start": {"col": 89, "line": 241, "offset": 9313}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_21.cs", "start": {"col": 25, "line": 241, "offset": 9249}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 42, "offset": 1640}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 42, "offset": 1640}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_22b.cs", "start": {"col": 25, "line": 42, "offset": 1567}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 42, "offset": 1635}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_22b.cs", "start": {"col": 89, "line": 42, "offset": 1631}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "9e341318b787b86218a5a192cf3eafafdeede6ffb6b480a0cc42081c357bcea7cda93c04e6a301b4a5a048859bf64175ec59eadfd39e5257cb25f887c45575f4_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 42, "offset": 1580}, "start": {"col": 25, "line": 42, "offset": 1567}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 42, "offset": 1592}, "start": {"col": 39, "line": 42, "offset": 1581}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 42, "offset": 1635}, "start": {"col": 89, "line": 42, "offset": 1631}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_22b.cs", "start": {"col": 25, "line": 42, "offset": 1567}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 155, "offset": 6642}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 155, "offset": 6642}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_22b.cs", "start": {"col": 25, "line": 155, "offset": 6569}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 155, "offset": 6637}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_22b.cs", "start": {"col": 89, "line": 155, "offset": 6633}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "9e341318b787b86218a5a192cf3eafafdeede6ffb6b480a0cc42081c357bcea7cda93c04e6a301b4a5a048859bf64175ec59eadfd39e5257cb25f887c45575f4_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 155, "offset": 6582}, "start": {"col": 25, "line": 155, "offset": 6569}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 155, "offset": 6594}, "start": {"col": 39, "line": 155, "offset": 6583}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 155, "offset": 6637}, "start": {"col": 89, "line": 155, "offset": 6633}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_22b.cs", "start": {"col": 25, "line": 155, "offset": 6569}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 67, "offset": 2453}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "dataCopy", "location": {"end": {"col": 21, "line": 55, "offset": 1860}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_31.cs", "start": {"col": 13, "line": 55, "offset": 1852}}}, {"content": "data", "location": {"end": {"col": 24, "line": 58, "offset": 1915}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_31.cs", "start": {"col": 20, "line": 58, "offset": 1911}}}], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 67, "offset": 2453}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_31.cs", "start": {"col": 25, "line": 67, "offset": 2380}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 28, "line": 55, "offset": 1867}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_31.cs", "start": {"col": 24, "line": 55, "offset": 1863}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "18d9e67c339c728c67caaef8e48cb47843ab1f261530a7cd68ca288a1f4c9cae5260cfaca21f09fbd34617aa2fe8077a950db1a693779af8d17148a0544fb3ac_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 67, "offset": 2393}, "start": {"col": 25, "line": 67, "offset": 2380}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 67, "offset": 2405}, "start": {"col": 39, "line": 67, "offset": 2394}}, "$X": {"abstract_content": "data", "end": {"col": 28, "line": 55, "offset": 1867}, "start": {"col": 24, "line": 55, "offset": 1863}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_31.cs", "start": {"col": 25, "line": 67, "offset": 2380}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 42, "offset": 1518}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 42, "offset": 1518}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_41.cs", "start": {"col": 21, "line": 42, "offset": 1445}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 42, "offset": 1513}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_41.cs", "start": {"col": 85, "line": 42, "offset": 1509}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "a36360ebdef0c6ec6ff509458bd183f940da1d71e58211cc99ca50767b90d579375843a24e7ec3601edefb987e1c2b4cae3a469c96b03665c8250427d0749064_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 42, "offset": 1458}, "start": {"col": 21, "line": 42, "offset": 1445}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 42, "offset": 1470}, "start": {"col": 35, "line": 42, "offset": 1459}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 42, "offset": 1513}, "start": {"col": 85, "line": 42, "offset": 1509}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_41.cs", "start": {"col": 21, "line": 42, "offset": 1445}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 98, "offset": 3601}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 98, "offset": 3601}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_41.cs", "start": {"col": 21, "line": 98, "offset": 3528}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 98, "offset": 3596}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_41.cs", "start": {"col": 85, "line": 98, "offset": 3592}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "a36360ebdef0c6ec6ff509458bd183f940da1d71e58211cc99ca50767b90d579375843a24e7ec3601edefb987e1c2b4cae3a469c96b03665c8250427d0749064_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 98, "offset": 3541}, "start": {"col": 21, "line": 98, "offset": 3528}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 98, "offset": 3553}, "start": {"col": 35, "line": 98, "offset": 3542}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 98, "offset": 3596}, "start": {"col": 85, "line": 98, "offset": 3592}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_41.cs", "start": {"col": 21, "line": 98, "offset": 3528}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 67, "offset": 2387}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 67, "offset": 2387}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_42.cs", "start": {"col": 21, "line": 67, "offset": 2314}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 67, "offset": 2382}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_42.cs", "start": {"col": 85, "line": 67, "offset": 2378}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "6a2761f3176403f6fbafa99d0e17fcf7be6247d479e1079a3bf78b4988f6534d99b9bb447ffaf04811f9ad65b85d08c842eed5f6d486c0711a15ff218030bd08_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 67, "offset": 2327}, "start": {"col": 21, "line": 67, "offset": 2314}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 67, "offset": 2339}, "start": {"col": 35, "line": 67, "offset": 2328}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 67, "offset": 2382}, "propagated_value": {"svalue_abstract_content": "BadSource(req resp)", "svalue_end": {"col": 43, "line": 58, "offset": 1896}, "svalue_start": {"col": 23, "line": 58, "offset": 1876}}, "start": {"col": 85, "line": 67, "offset": 2378}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_42.cs", "start": {"col": 21, "line": 67, "offset": 2314}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 103, "offset": 3751}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 103, "offset": 3751}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_42.cs", "start": {"col": 21, "line": 103, "offset": 3678}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 103, "offset": 3746}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_42.cs", "start": {"col": 85, "line": 103, "offset": 3742}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "6a2761f3176403f6fbafa99d0e17fcf7be6247d479e1079a3bf78b4988f6534d99b9bb447ffaf04811f9ad65b85d08c842eed5f6d486c0711a15ff218030bd08_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 103, "offset": 3691}, "start": {"col": 21, "line": 103, "offset": 3678}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 103, "offset": 3703}, "start": {"col": 35, "line": 103, "offset": 3692}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 103, "offset": 3746}, "propagated_value": {"svalue_abstract_content": "GoodG2BSource(req resp)", "svalue_end": {"col": 47, "line": 94, "offset": 3260}, "svalue_start": {"col": 23, "line": 94, "offset": 3236}}, "start": {"col": 85, "line": 103, "offset": 3742}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_42.cs", "start": {"col": 21, "line": 103, "offset": 3678}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 47, "offset": 1648}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "data", "location": {"end": {"col": 20, "line": 38, "offset": 1147}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_45.cs", "start": {"col": 16, "line": 38, "offset": 1143}}}], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 47, "offset": 1648}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_45.cs", "start": {"col": 21, "line": 47, "offset": 1575}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 30, "line": 38, "offset": 1157}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_45.cs", "start": {"col": 23, "line": 38, "offset": 1150}}, "dataBad"]]}, "engine_kind": "OSS", "fingerprint": "eceb1d68001cbced32ea2a93277e934ce1ffbb6a290f065dcbf169ef9926d2219a87329fd32d0dffc6209ec585f7b3e1445dfef638702e7ed0d95af69f7a4881_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 47, "offset": 1588}, "start": {"col": 21, "line": 47, "offset": 1575}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 47, "offset": 1600}, "start": {"col": 35, "line": 47, "offset": 1589}}, "$X": {"abstract_content": "dataBad", "end": {"col": 30, "line": 38, "offset": 1157}, "start": {"col": 23, "line": 38, "offset": 1150}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_45.cs", "start": {"col": 21, "line": 47, "offset": 1575}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 105, "offset": 3763}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "data", "location": {"end": {"col": 20, "line": 96, "offset": 3258}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_45.cs", "start": {"col": 16, "line": 96, "offset": 3254}}}], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 105, "offset": 3763}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_45.cs", "start": {"col": 21, "line": 105, "offset": 3690}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 34, "line": 96, "offset": 3272}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_45.cs", "start": {"col": 23, "line": 96, "offset": 3261}}, "dataGoodG2B"]]}, "engine_kind": "OSS", "fingerprint": "7dce5adae1bdec5b8cf30a47c8a3da93bb05eb598cb692b0027f53c7c4b226b894f86e3d1739f1952ed6c03605e42446c4b19180715313e745a05f41b220e65a_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 105, "offset": 3703}, "start": {"col": 21, "line": 105, "offset": 3690}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 105, "offset": 3715}, "start": {"col": 35, "line": 105, "offset": 3704}}, "$X": {"abstract_content": "dataGoodG2B", "end": {"col": 34, "line": 96, "offset": 3272}, "start": {"col": 23, "line": 96, "offset": 3261}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_45.cs", "start": {"col": 21, "line": 105, "offset": 3690}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 40, "offset": 1503}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 40, "offset": 1503}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_51b.cs", "start": {"col": 21, "line": 40, "offset": 1430}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 40, "offset": 1498}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_51b.cs", "start": {"col": 85, "line": 40, "offset": 1494}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "d3993946afe44dffde32e457e5e51df804128ddde2a6517f1e640fba78de64d9d461c2d80467d1779a6db0374ef2777dc4c0fa46000e6f946c18385fa00491a8_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 40, "offset": 1443}, "start": {"col": 21, "line": 40, "offset": 1430}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 40, "offset": 1455}, "start": {"col": 35, "line": 40, "offset": 1444}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 40, "offset": 1498}, "start": {"col": 85, "line": 40, "offset": 1494}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_51b.cs", "start": {"col": 21, "line": 40, "offset": 1430}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 68, "offset": 2624}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 68, "offset": 2624}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_51b.cs", "start": {"col": 21, "line": 68, "offset": 2551}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 68, "offset": 2619}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_51b.cs", "start": {"col": 85, "line": 68, "offset": 2615}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "d3993946afe44dffde32e457e5e51df804128ddde2a6517f1e640fba78de64d9d461c2d80467d1779a6db0374ef2777dc4c0fa46000e6f946c18385fa00491a8_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 68, "offset": 2564}, "start": {"col": 21, "line": 68, "offset": 2551}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 68, "offset": 2576}, "start": {"col": 35, "line": 68, "offset": 2565}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 68, "offset": 2619}, "start": {"col": 85, "line": 68, "offset": 2615}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_51b.cs", "start": {"col": 21, "line": 68, "offset": 2551}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 40, "offset": 1518}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 40, "offset": 1518}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_52c.cs", "start": {"col": 21, "line": 40, "offset": 1445}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 40, "offset": 1513}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_52c.cs", "start": {"col": 85, "line": 40, "offset": 1509}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "1549a184b076bf6fae0cb5f78ef4f4d3fbfa498fe01e0975868aac5da1b19691325503ab66b831c01d7aece50ad59d9e89f672aa3e0cdd6a8cde744969eae09f_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 40, "offset": 1458}, "start": {"col": 21, "line": 40, "offset": 1445}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 40, "offset": 1470}, "start": {"col": 35, "line": 40, "offset": 1459}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 40, "offset": 1513}, "start": {"col": 85, "line": 40, "offset": 1509}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_52c.cs", "start": {"col": 21, "line": 40, "offset": 1445}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 68, "offset": 2639}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 68, "offset": 2639}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_52c.cs", "start": {"col": 21, "line": 68, "offset": 2566}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 68, "offset": 2634}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_52c.cs", "start": {"col": 85, "line": 68, "offset": 2630}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "1549a184b076bf6fae0cb5f78ef4f4d3fbfa498fe01e0975868aac5da1b19691325503ab66b831c01d7aece50ad59d9e89f672aa3e0cdd6a8cde744969eae09f_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 68, "offset": 2579}, "start": {"col": 21, "line": 68, "offset": 2566}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 68, "offset": 2591}, "start": {"col": 35, "line": 68, "offset": 2580}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 68, "offset": 2634}, "start": {"col": 85, "line": 68, "offset": 2630}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_52c.cs", "start": {"col": 21, "line": 68, "offset": 2566}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 40, "offset": 1545}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 40, "offset": 1545}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_53d.cs", "start": {"col": 21, "line": 40, "offset": 1472}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 40, "offset": 1540}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_53d.cs", "start": {"col": 85, "line": 40, "offset": 1536}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "c1fa30f599dfce3777737f8eef7c781175dcba01f0c0fca2d16fea8ff17ff437c086a2bb1f7e031a5ce3e0c23739793d85197f4e358facc3ddc5a55f52662508_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 40, "offset": 1485}, "start": {"col": 21, "line": 40, "offset": 1472}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 40, "offset": 1497}, "start": {"col": 35, "line": 40, "offset": 1486}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 40, "offset": 1540}, "start": {"col": 85, "line": 40, "offset": 1536}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_53d.cs", "start": {"col": 21, "line": 40, "offset": 1472}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 68, "offset": 2666}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 68, "offset": 2666}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_53d.cs", "start": {"col": 21, "line": 68, "offset": 2593}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 68, "offset": 2661}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_53d.cs", "start": {"col": 85, "line": 68, "offset": 2657}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "c1fa30f599dfce3777737f8eef7c781175dcba01f0c0fca2d16fea8ff17ff437c086a2bb1f7e031a5ce3e0c23739793d85197f4e358facc3ddc5a55f52662508_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 68, "offset": 2606}, "start": {"col": 21, "line": 68, "offset": 2593}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 68, "offset": 2618}, "start": {"col": 35, "line": 68, "offset": 2607}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 68, "offset": 2661}, "start": {"col": 85, "line": 68, "offset": 2657}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_53d.cs", "start": {"col": 21, "line": 68, "offset": 2593}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 40, "offset": 1546}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 40, "offset": 1546}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_54e.cs", "start": {"col": 21, "line": 40, "offset": 1473}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 40, "offset": 1541}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_54e.cs", "start": {"col": 85, "line": 40, "offset": 1537}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "b235bb4eb609a71501acb6b3c2646f02a232193258c4b8e07ddb95124e4031721794ecd6734c3672f4f097ed49075ca4c6ba5562e5a46082c56f656adacae51b_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 40, "offset": 1486}, "start": {"col": 21, "line": 40, "offset": 1473}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 40, "offset": 1498}, "start": {"col": 35, "line": 40, "offset": 1487}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 40, "offset": 1541}, "start": {"col": 85, "line": 40, "offset": 1537}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_54e.cs", "start": {"col": 21, "line": 40, "offset": 1473}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 68, "offset": 2667}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 68, "offset": 2667}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_54e.cs", "start": {"col": 21, "line": 68, "offset": 2594}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 68, "offset": 2662}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_54e.cs", "start": {"col": 85, "line": 68, "offset": 2658}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "b235bb4eb609a71501acb6b3c2646f02a232193258c4b8e07ddb95124e4031721794ecd6734c3672f4f097ed49075ca4c6ba5562e5a46082c56f656adacae51b_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 68, "offset": 2607}, "start": {"col": 21, "line": 68, "offset": 2594}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 68, "offset": 2619}, "start": {"col": 35, "line": 68, "offset": 2608}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 68, "offset": 2662}, "start": {"col": 85, "line": 68, "offset": 2658}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_54e.cs", "start": {"col": 21, "line": 68, "offset": 2594}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 41, "offset": 1587}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 41, "offset": 1587}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_61a.cs", "start": {"col": 21, "line": 41, "offset": 1514}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 41, "offset": 1582}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_61a.cs", "start": {"col": 85, "line": 41, "offset": 1578}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "f05d773d988073a26c9a146716ffc1a8b4968123e6ca5bccabb678d55817ac24c7123323ece00c0a6f71bd42c6a89d506febfdf53e1c2f42fc44a73dd1ee06af_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 41, "offset": 1527}, "start": {"col": 21, "line": 41, "offset": 1514}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 41, "offset": 1539}, "start": {"col": 35, "line": 41, "offset": 1528}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 41, "offset": 1582}, "propagated_value": {"svalue_abstract_content": "CWE89_SQL_Injection__Web_File_ExecuteScalar_61b.BadSource(req resp)", "svalue_end": {"col": 91, "line": 32, "offset": 1096}, "svalue_start": {"col": 23, "line": 32, "offset": 1028}}, "start": {"col": 85, "line": 41, "offset": 1578}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_61a.cs", "start": {"col": 21, "line": 41, "offset": 1514}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 75, "offset": 2937}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 75, "offset": 2937}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_61a.cs", "start": {"col": 21, "line": 75, "offset": 2864}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 75, "offset": 2932}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_61a.cs", "start": {"col": 85, "line": 75, "offset": 2928}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "f05d773d988073a26c9a146716ffc1a8b4968123e6ca5bccabb678d55817ac24c7123323ece00c0a6f71bd42c6a89d506febfdf53e1c2f42fc44a73dd1ee06af_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 75, "offset": 2877}, "start": {"col": 21, "line": 75, "offset": 2864}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 75, "offset": 2889}, "start": {"col": 35, "line": 75, "offset": 2878}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 75, "offset": 2932}, "propagated_value": {"svalue_abstract_content": "CWE89_SQL_Injection__Web_File_ExecuteScalar_61b.GoodG2BSource(req resp)", "svalue_end": {"col": 95, "line": 66, "offset": 2446}, "svalue_start": {"col": 23, "line": 66, "offset": 2374}}, "start": {"col": 85, "line": 75, "offset": 2928}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_61a.cs", "start": {"col": 21, "line": 75, "offset": 2864}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 41, "offset": 1547}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 41, "offset": 1547}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_66b.cs", "start": {"col": 21, "line": 41, "offset": 1474}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 41, "offset": 1542}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_66b.cs", "start": {"col": 85, "line": 41, "offset": 1538}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "82eeee035bb25a36ce79dca6c4cfbeb2ebe07fe4f3e7c861c902eca800a75aa3e84d5fa1ab5aeb787f45161e52b7306652713b83d06c24398b10b9b8021377fc_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 41, "offset": 1487}, "start": {"col": 21, "line": 41, "offset": 1474}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 41, "offset": 1499}, "start": {"col": 35, "line": 41, "offset": 1488}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 41, "offset": 1542}, "start": {"col": 85, "line": 41, "offset": 1538}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_66b.cs", "start": {"col": 21, "line": 41, "offset": 1474}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 70, "offset": 2712}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 70, "offset": 2712}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_66b.cs", "start": {"col": 21, "line": 70, "offset": 2639}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 70, "offset": 2707}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_66b.cs", "start": {"col": 85, "line": 70, "offset": 2703}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "82eeee035bb25a36ce79dca6c4cfbeb2ebe07fe4f3e7c861c902eca800a75aa3e84d5fa1ab5aeb787f45161e52b7306652713b83d06c24398b10b9b8021377fc_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 70, "offset": 2652}, "start": {"col": 21, "line": 70, "offset": 2639}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 70, "offset": 2664}, "start": {"col": 35, "line": 70, "offset": 2653}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 70, "offset": 2707}, "start": {"col": 85, "line": 70, "offset": 2703}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_66b.cs", "start": {"col": 21, "line": 70, "offset": 2639}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 41, "offset": 1613}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 41, "offset": 1613}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_67b.cs", "start": {"col": 21, "line": 41, "offset": 1540}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 41, "offset": 1608}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_67b.cs", "start": {"col": 85, "line": 41, "offset": 1604}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "e97b1d78d420ad38025034fce24cdac162a64fa9df5448b5d07411255a45ace02f2367d7ef8ba31e7bb2e911723f2a150993da902b8d344978a368eb9300eb7f_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 41, "offset": 1553}, "start": {"col": 21, "line": 41, "offset": 1540}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 41, "offset": 1565}, "start": {"col": 35, "line": 41, "offset": 1554}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 41, "offset": 1608}, "propagated_value": {"svalue_abstract_content": "dataContainer.containerOne", "svalue_end": {"col": 49, "line": 32, "offset": 1122}, "svalue_start": {"col": 23, "line": 32, "offset": 1096}}, "start": {"col": 85, "line": 41, "offset": 1604}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_67b.cs", "start": {"col": 21, "line": 41, "offset": 1540}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 70, "offset": 2845}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 70, "offset": 2845}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_67b.cs", "start": {"col": 21, "line": 70, "offset": 2772}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 70, "offset": 2840}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_67b.cs", "start": {"col": 85, "line": 70, "offset": 2836}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "e97b1d78d420ad38025034fce24cdac162a64fa9df5448b5d07411255a45ace02f2367d7ef8ba31e7bb2e911723f2a150993da902b8d344978a368eb9300eb7f_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 70, "offset": 2785}, "start": {"col": 21, "line": 70, "offset": 2772}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 70, "offset": 2797}, "start": {"col": 35, "line": 70, "offset": 2786}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 70, "offset": 2840}, "propagated_value": {"svalue_abstract_content": "dataContainer.containerOne", "svalue_end": {"col": 49, "line": 61, "offset": 2354}, "svalue_start": {"col": 23, "line": 61, "offset": 2328}}, "start": {"col": 85, "line": 70, "offset": 2836}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_67b.cs", "start": {"col": 21, "line": 70, "offset": 2772}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 41, "offset": 1583}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 41, "offset": 1583}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_68b.cs", "start": {"col": 21, "line": 41, "offset": 1510}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 41, "offset": 1578}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_68b.cs", "start": {"col": 85, "line": 41, "offset": 1574}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "a60c7bafcbce2c3340f1d613a18d96f61822bd7c5d96d9c208a7aed9422f0a8f788986f13ecf1f20a61749391594ee047811ae71adbf999f5a5e93860cb9965b_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 41, "offset": 1523}, "start": {"col": 21, "line": 41, "offset": 1510}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 41, "offset": 1535}, "start": {"col": 35, "line": 41, "offset": 1524}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 41, "offset": 1578}, "propagated_value": {"svalue_abstract_content": "CWE89_SQL_Injection__Web_File_ExecuteScalar_68a.data", "svalue_end": {"col": 75, "line": 32, "offset": 1092}, "svalue_start": {"col": 23, "line": 32, "offset": 1040}}, "start": {"col": 85, "line": 41, "offset": 1574}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_68b.cs", "start": {"col": 21, "line": 41, "offset": 1510}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 70, "offset": 2767}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 70, "offset": 2767}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_68b.cs", "start": {"col": 21, "line": 70, "offset": 2694}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 70, "offset": 2762}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_68b.cs", "start": {"col": 85, "line": 70, "offset": 2758}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "a60c7bafcbce2c3340f1d613a18d96f61822bd7c5d96d9c208a7aed9422f0a8f788986f13ecf1f20a61749391594ee047811ae71adbf999f5a5e93860cb9965b_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 70, "offset": 2707}, "start": {"col": 21, "line": 70, "offset": 2694}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 70, "offset": 2719}, "start": {"col": 35, "line": 70, "offset": 2708}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 70, "offset": 2762}, "propagated_value": {"svalue_abstract_content": "CWE89_SQL_Injection__Web_File_ExecuteScalar_68a.data", "svalue_end": {"col": 75, "line": 61, "offset": 2276}, "svalue_start": {"col": 23, "line": 61, "offset": 2224}}, "start": {"col": 85, "line": 70, "offset": 2758}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_68b.cs", "start": {"col": 21, "line": 70, "offset": 2694}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 42, "offset": 1569}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "data", "location": {"end": {"col": 20, "line": 33, "offset": 1057}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_71b.cs", "start": {"col": 16, "line": 33, "offset": 1053}}}], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 42, "offset": 1569}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_71b.cs", "start": {"col": 21, "line": 42, "offset": 1496}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 41, "line": 33, "offset": 1078}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_71b.cs", "start": {"col": 23, "line": 33, "offset": 1060}}, "(string)dataObject"]]}, "engine_kind": "OSS", "fingerprint": "393644671f85629e9cebdafcb95c5d343f574af0949cbf4cbd5745351ecfa538a3cb78235d1131611f83236259c1b96b8388f7ece15d3241b05b86e084e40b8c_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 42, "offset": 1509}, "start": {"col": 21, "line": 42, "offset": 1496}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 42, "offset": 1521}, "start": {"col": 35, "line": 42, "offset": 1510}}, "$X": {"abstract_content": "(string dataObject", "end": {"col": 41, "line": 33, "offset": 1078}, "start": {"col": 23, "line": 33, "offset": 1060}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_71b.cs", "start": {"col": 21, "line": 42, "offset": 1496}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 71, "offset": 2739}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "data", "location": {"end": {"col": 20, "line": 62, "offset": 2227}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_71b.cs", "start": {"col": 16, "line": 62, "offset": 2223}}}], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 71, "offset": 2739}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_71b.cs", "start": {"col": 21, "line": 71, "offset": 2666}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 41, "line": 62, "offset": 2248}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_71b.cs", "start": {"col": 23, "line": 62, "offset": 2230}}, "(string)dataObject"]]}, "engine_kind": "OSS", "fingerprint": "393644671f85629e9cebdafcb95c5d343f574af0949cbf4cbd5745351ecfa538a3cb78235d1131611f83236259c1b96b8388f7ece15d3241b05b86e084e40b8c_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 71, "offset": 2679}, "start": {"col": 21, "line": 71, "offset": 2666}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 71, "offset": 2691}, "start": {"col": 35, "line": 71, "offset": 2680}}, "$X": {"abstract_content": "(string dataObject", "end": {"col": 41, "line": 62, "offset": 2248}, "start": {"col": 23, "line": 62, "offset": 2230}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_71b.cs", "start": {"col": 21, "line": 71, "offset": 2666}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 42, "offset": 1595}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "data", "location": {"end": {"col": 20, "line": 33, "offset": 1076}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_72b.cs", "start": {"col": 16, "line": 33, "offset": 1072}}}], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 42, "offset": 1595}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_72b.cs", "start": {"col": 21, "line": 42, "offset": 1522}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 48, "line": 33, "offset": 1104}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_72b.cs", "start": {"col": 23, "line": 33, "offset": 1079}}, "(string) dataHashtable[2]"]]}, "engine_kind": "OSS", "fingerprint": "0935484bb7b455b3aff45f911ae30b33dccbcae535b4d798f842b97c912f54df85d2a31136607b9dbb413d13d06efc7834d86cbf27b79992e6b24c39717df412_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 42, "offset": 1535}, "start": {"col": 21, "line": 42, "offset": 1522}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 42, "offset": 1547}, "start": {"col": 35, "line": 42, "offset": 1536}}, "$X": {"abstract_content": "(string dataHashtable[[2]]", "end": {"col": 48, "line": 33, "offset": 1104}, "start": {"col": 23, "line": 33, "offset": 1079}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_72b.cs", "start": {"col": 21, "line": 42, "offset": 1522}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 71, "offset": 2778}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "data", "location": {"end": {"col": 20, "line": 62, "offset": 2259}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_72b.cs", "start": {"col": 16, "line": 62, "offset": 2255}}}], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 71, "offset": 2778}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_72b.cs", "start": {"col": 21, "line": 71, "offset": 2705}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 48, "line": 62, "offset": 2287}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_72b.cs", "start": {"col": 23, "line": 62, "offset": 2262}}, "(string) dataHashtable[2]"]]}, "engine_kind": "OSS", "fingerprint": "0935484bb7b455b3aff45f911ae30b33dccbcae535b4d798f842b97c912f54df85d2a31136607b9dbb413d13d06efc7834d86cbf27b79992e6b24c39717df412_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 71, "offset": 2718}, "start": {"col": 21, "line": 71, "offset": 2705}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 71, "offset": 2730}, "start": {"col": 35, "line": 71, "offset": 2719}}, "$X": {"abstract_content": "(string dataHashtable[[2]]", "end": {"col": 48, "line": 62, "offset": 2287}, "start": {"col": 23, "line": 62, "offset": 2262}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_72b.cs", "start": {"col": 21, "line": 71, "offset": 2705}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 42, "offset": 1614}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 42, "offset": 1614}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_73b.cs", "start": {"col": 21, "line": 42, "offset": 1541}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 42, "offset": 1609}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_73b.cs", "start": {"col": 85, "line": 42, "offset": 1605}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "9a87f405ba7f74c64eb504c7056e5b080e505f209717b3157d41dc7f157290ebd81155eabb5c89d634d0942d6c13b901b8e8093e2675e5fe2bc9ce3e45930bcd_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 42, "offset": 1554}, "start": {"col": 21, "line": 42, "offset": 1541}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 42, "offset": 1566}, "start": {"col": 35, "line": 42, "offset": 1555}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 42, "offset": 1609}, "propagated_value": {"svalue_abstract_content": "dataLinkedList.Last.Value", "svalue_end": {"col": 48, "line": 33, "offset": 1123}, "svalue_start": {"col": 23, "line": 33, "offset": 1098}}, "start": {"col": 85, "line": 42, "offset": 1605}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_73b.cs", "start": {"col": 21, "line": 42, "offset": 1541}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 71, "offset": 2807}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 71, "offset": 2807}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_73b.cs", "start": {"col": 21, "line": 71, "offset": 2734}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 71, "offset": 2802}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_73b.cs", "start": {"col": 85, "line": 71, "offset": 2798}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "9a87f405ba7f74c64eb504c7056e5b080e505f209717b3157d41dc7f157290ebd81155eabb5c89d634d0942d6c13b901b8e8093e2675e5fe2bc9ce3e45930bcd_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 71, "offset": 2747}, "start": {"col": 21, "line": 71, "offset": 2734}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 71, "offset": 2759}, "start": {"col": 35, "line": 71, "offset": 2748}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 71, "offset": 2802}, "propagated_value": {"svalue_abstract_content": "dataLinkedList.Last.Value", "svalue_end": {"col": 48, "line": 62, "offset": 2316}, "svalue_start": {"col": 23, "line": 62, "offset": 2291}}, "start": {"col": 85, "line": 71, "offset": 2798}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_73b.cs", "start": {"col": 21, "line": 71, "offset": 2734}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 42, "offset": 1610}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 42, "offset": 1610}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_74b.cs", "start": {"col": 21, "line": 42, "offset": 1537}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 42, "offset": 1605}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_74b.cs", "start": {"col": 85, "line": 42, "offset": 1601}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "419a7c4ed05ec5d107f9f19a128f299865e9f68e982064866e4d5e49642b1adbac3533777446ce4d00267fa1e069a2053b4da4bb2b5cb247b22b4c04bf18a04d_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 42, "offset": 1550}, "start": {"col": 21, "line": 42, "offset": 1537}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 42, "offset": 1562}, "start": {"col": 35, "line": 42, "offset": 1551}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 42, "offset": 1605}, "start": {"col": 85, "line": 42, "offset": 1601}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_74b.cs", "start": {"col": 21, "line": 42, "offset": 1537}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 71, "offset": 2800}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 71, "offset": 2800}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_74b.cs", "start": {"col": 21, "line": 71, "offset": 2727}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 71, "offset": 2795}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_74b.cs", "start": {"col": 85, "line": 71, "offset": 2791}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "419a7c4ed05ec5d107f9f19a128f299865e9f68e982064866e4d5e49642b1adbac3533777446ce4d00267fa1e069a2053b4da4bb2b5cb247b22b4c04bf18a04d_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 71, "offset": 2740}, "start": {"col": 21, "line": 71, "offset": 2727}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 71, "offset": 2752}, "start": {"col": 35, "line": 71, "offset": 2741}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 71, "offset": 2795}, "start": {"col": 85, "line": 71, "offset": 2791}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_74b.cs", "start": {"col": 21, "line": 71, "offset": 2727}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 55, "line": 59, "offset": 2050}, "extra": {"engine_kind": "OSS", "fingerprint": "1cfcc47a6ba0864aff487ffa6e2d4909195917a57e6c6d2bf2fb263cd7ade38386da16fdf90f01012b8139950cfbb122dcec8ee0dfd6f99eea15f2da7de649f6_0", "is_ignored": false, "lines": "            BinaryFormatter bf = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_75a.cs", "start": {"col": 13, "line": 59, "offset": 2008}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 55, "line": 106, "offset": 3733}, "extra": {"engine_kind": "OSS", "fingerprint": "1cfcc47a6ba0864aff487ffa6e2d4909195917a57e6c6d2bf2fb263cd7ade38386da16fdf90f01012b8139950cfbb122dcec8ee0dfd6f99eea15f2da7de649f6_1", "is_ignored": false, "lines": "            BinaryFormatter bf = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_75a.cs", "start": {"col": 13, "line": 106, "offset": 3691}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 55, "line": 146, "offset": 5246}, "extra": {"engine_kind": "OSS", "fingerprint": "1cfcc47a6ba0864aff487ffa6e2d4909195917a57e6c6d2bf2fb263cd7ade38386da16fdf90f01012b8139950cfbb122dcec8ee0dfd6f99eea15f2da7de649f6_2", "is_ignored": false, "lines": "            BinaryFormatter bf = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_75a.cs", "start": {"col": 13, "line": 146, "offset": 5204}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 48, "line": 38, "offset": 1243}, "extra": {"engine_kind": "OSS", "fingerprint": "9fcb6ba8f3bb51a44ebf8bd8a846af605629a5ad2508c5e929e4c1df0bf897a4c63e76f52c5cf0b31fd7441d1d27bd3c2c3ee0cecddc2951db53c2f07c6722ca_0", "is_ignored": false, "lines": "            var binForm = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_75b.cs", "start": {"col": 17, "line": 38, "offset": 1212}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 53, "offset": 2050}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "data", "location": {"end": {"col": 21, "line": 43, "offset": 1467}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_75b.cs", "start": {"col": 17, "line": 43, "offset": 1463}}}], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 53, "offset": 2050}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_75b.cs", "start": {"col": 25, "line": 53, "offset": 1977}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 62, "line": 43, "offset": 1508}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_75b.cs", "start": {"col": 24, "line": 43, "offset": 1470}}, "(string)binForm.Deserialize(memStream)"]]}, "engine_kind": "OSS", "fingerprint": "21111ab799d48c5e7c84f217bd16b0fb76942bdebd85419cbe789ea25e4d5cc80602811bdd34f0566fecc3b1e81c467808404759ac838c5abe7fb2ca38f0510d_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 53, "offset": 1990}, "start": {"col": 25, "line": 53, "offset": 1977}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 53, "offset": 2002}, "start": {"col": 39, "line": 53, "offset": 1991}}, "$X": {"abstract_content": "(string binForm.Deserialize(memStream)", "end": {"col": 62, "line": 43, "offset": 1508}, "start": {"col": 24, "line": 43, "offset": 1470}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_75b.cs", "start": {"col": 25, "line": 53, "offset": 1977}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 48, "line": 81, "offset": 3037}, "extra": {"engine_kind": "OSS", "fingerprint": "9fcb6ba8f3bb51a44ebf8bd8a846af605629a5ad2508c5e929e4c1df0bf897a4c63e76f52c5cf0b31fd7441d1d27bd3c2c3ee0cecddc2951db53c2f07c6722ca_1", "is_ignored": false, "lines": "            var binForm = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_75b.cs", "start": {"col": 17, "line": 81, "offset": 3006}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 96, "offset": 3844}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "data", "location": {"end": {"col": 21, "line": 86, "offset": 3261}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_75b.cs", "start": {"col": 17, "line": 86, "offset": 3257}}}], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 96, "offset": 3844}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_75b.cs", "start": {"col": 25, "line": 96, "offset": 3771}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 62, "line": 86, "offset": 3302}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_75b.cs", "start": {"col": 24, "line": 86, "offset": 3264}}, "(string)binForm.Deserialize(memStream)"]]}, "engine_kind": "OSS", "fingerprint": "21111ab799d48c5e7c84f217bd16b0fb76942bdebd85419cbe789ea25e4d5cc80602811bdd34f0566fecc3b1e81c467808404759ac838c5abe7fb2ca38f0510d_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 96, "offset": 3784}, "start": {"col": 25, "line": 96, "offset": 3771}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 96, "offset": 3796}, "start": {"col": 39, "line": 96, "offset": 3785}}, "$X": {"abstract_content": "(string binForm.Deserialize(memStream)", "end": {"col": 62, "line": 86, "offset": 3302}, "start": {"col": 24, "line": 86, "offset": 3264}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_75b.cs", "start": {"col": 25, "line": 96, "offset": 3771}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 48, "line": 122, "offset": 4806}, "extra": {"engine_kind": "OSS", "fingerprint": "9fcb6ba8f3bb51a44ebf8bd8a846af605629a5ad2508c5e929e4c1df0bf897a4c63e76f52c5cf0b31fd7441d1d27bd3c2c3ee0cecddc2951db53c2f07c6722ca_2", "is_ignored": false, "lines": "            var binForm = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_75b.cs", "start": {"col": 17, "line": 122, "offset": 4775}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 40, "offset": 1519}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 40, "offset": 1519}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_81_bad.cs", "start": {"col": 21, "line": 40, "offset": 1446}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 40, "offset": 1514}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_81_bad.cs", "start": {"col": 85, "line": 40, "offset": 1510}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "c1e8b68b0b732c1ca161e546891f224dc8e7cfafc8c0880d8d809b9c456aaeaabed84e535012d13a4834c8a511b038229c30ce017a27cfd9d17f9b916fb50d53_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 40, "offset": 1459}, "start": {"col": 21, "line": 40, "offset": 1446}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 40, "offset": 1471}, "start": {"col": 35, "line": 40, "offset": 1460}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 40, "offset": 1514}, "start": {"col": 85, "line": 40, "offset": 1510}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_81_bad.cs", "start": {"col": 21, "line": 40, "offset": 1446}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 41, "offset": 1534}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 41, "offset": 1534}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_81_goodG2B.cs", "start": {"col": 21, "line": 41, "offset": 1461}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 41, "offset": 1529}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_81_goodG2B.cs", "start": {"col": 85, "line": 41, "offset": 1525}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "3b74690a49ff31b759b3c2b58a3ca3a847d76b9efcfb780d074ba4138e887d8d897899045cea8cf90103c7db55d564747ee5510b132ae1077d9b7a57425d7e90_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 41, "offset": 1474}, "start": {"col": 21, "line": 41, "offset": 1461}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 41, "offset": 1486}, "start": {"col": 35, "line": 41, "offset": 1475}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 41, "offset": 1529}, "start": {"col": 85, "line": 41, "offset": 1525}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_File_ExecuteScalar_81_goodG2B.cs", "start": {"col": 21, "line": 41, "offset": 1461}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 55, "line": 51, "offset": 1758}, "extra": {"engine_kind": "OSS", "fingerprint": "327fec1608df93eb2e83a8115a85cb94369a69a52ff8e197326e161a1e5406dbc5c53d2713503ae3ce33b1f6db46884a58d6904754889937acc606351dcae3dd_0", "is_ignored": false, "lines": "            BinaryFormatter bf = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_CommandText_75a.cs", "start": {"col": 13, "line": 51, "offset": 1716}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 55, "line": 90, "offset": 3118}, "extra": {"engine_kind": "OSS", "fingerprint": "327fec1608df93eb2e83a8115a85cb94369a69a52ff8e197326e161a1e5406dbc5c53d2713503ae3ce33b1f6db46884a58d6904754889937acc606351dcae3dd_1", "is_ignored": false, "lines": "            BinaryFormatter bf = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_CommandText_75a.cs", "start": {"col": 13, "line": 90, "offset": 3076}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 55, "line": 122, "offset": 4308}, "extra": {"engine_kind": "OSS", "fingerprint": "327fec1608df93eb2e83a8115a85cb94369a69a52ff8e197326e161a1e5406dbc5c53d2713503ae3ce33b1f6db46884a58d6904754889937acc606351dcae3dd_2", "is_ignored": false, "lines": "            BinaryFormatter bf = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_CommandText_75a.cs", "start": {"col": 13, "line": 122, "offset": 4266}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 48, "line": 38, "offset": 1283}, "extra": {"engine_kind": "OSS", "fingerprint": "9055aec7d3eda9bf2ee9a5137e7b88c24e612a297f71f439da976d25747b42950149a22e518f21b0d25df450c4a6bd85ef3fa5d860b42b2e3d4328c324dc822a_0", "is_ignored": false, "lines": "            var binForm = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_CommandText_75b.cs", "start": {"col": 17, "line": 38, "offset": 1252}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 48, "line": 100, "offset": 3866}, "extra": {"engine_kind": "OSS", "fingerprint": "9055aec7d3eda9bf2ee9a5137e7b88c24e612a297f71f439da976d25747b42950149a22e518f21b0d25df450c4a6bd85ef3fa5d860b42b2e3d4328c324dc822a_1", "is_ignored": false, "lines": "            var binForm = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_CommandText_75b.cs", "start": {"col": 17, "line": 100, "offset": 3835}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 48, "line": 160, "offset": 6424}, "extra": {"engine_kind": "OSS", "fingerprint": "9055aec7d3eda9bf2ee9a5137e7b88c24e612a297f71f439da976d25747b42950149a22e518f21b0d25df450c4a6bd85ef3fa5d860b42b2e3d4328c324dc822a_2", "is_ignored": false, "lines": "            var binForm = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_CommandText_75b.cs", "start": {"col": 17, "line": 160, "offset": 6393}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 53, "offset": 1917}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 53, "offset": 1917}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_01.cs", "start": {"col": 21, "line": 53, "offset": 1818}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 53, "offset": 1912}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_01.cs", "start": {"col": 111, "line": 53, "offset": 1908}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "5d61bd7f7b879024786c724492ddc57e9c8ef09e8afe50e24868810769df5606b73ef945a7c77847cd9512800d7255e96fa06e80113c19984cfb140f67cbe4c3_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 53, "offset": 1831}, "start": {"col": 21, "line": 53, "offset": 1818}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 53, "offset": 1843}, "start": {"col": 35, "line": 53, "offset": 1832}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 53, "offset": 1912}, "start": {"col": 111, "line": 53, "offset": 1908}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_01.cs", "start": {"col": 21, "line": 53, "offset": 1818}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 64, "offset": 2328}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 64, "offset": 2328}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_02.cs", "start": {"col": 25, "line": 64, "offset": 2229}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 64, "offset": 2323}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_02.cs", "start": {"col": 115, "line": 64, "offset": 2319}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "80002def2365328c93b561c014f51b32743843a4160717c256a0505ce97763e54369190f4cf36b56817a4c81b00a13ee6ab8db830edef966df51d390f7b20b39_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 64, "offset": 2242}, "start": {"col": 25, "line": 64, "offset": 2229}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 64, "offset": 2254}, "start": {"col": 39, "line": 64, "offset": 2243}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 64, "offset": 2323}, "start": {"col": 115, "line": 64, "offset": 2319}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_02.cs", "start": {"col": 25, "line": 64, "offset": 2229}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 111, "offset": 4177}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 111, "offset": 4177}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_02.cs", "start": {"col": 25, "line": 111, "offset": 4078}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 111, "offset": 4172}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_02.cs", "start": {"col": 115, "line": 111, "offset": 4168}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "80002def2365328c93b561c014f51b32743843a4160717c256a0505ce97763e54369190f4cf36b56817a4c81b00a13ee6ab8db830edef966df51d390f7b20b39_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 111, "offset": 4091}, "start": {"col": 25, "line": 111, "offset": 4078}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 111, "offset": 4103}, "start": {"col": 39, "line": 111, "offset": 4092}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 111, "offset": 4172}, "start": {"col": 115, "line": 111, "offset": 4168}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_02.cs", "start": {"col": 25, "line": 111, "offset": 4078}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 157, "offset": 5996}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 157, "offset": 5996}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_02.cs", "start": {"col": 25, "line": 157, "offset": 5897}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 157, "offset": 5991}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_02.cs", "start": {"col": 115, "line": 157, "offset": 5987}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "80002def2365328c93b561c014f51b32743843a4160717c256a0505ce97763e54369190f4cf36b56817a4c81b00a13ee6ab8db830edef966df51d390f7b20b39_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 157, "offset": 5910}, "start": {"col": 25, "line": 157, "offset": 5897}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 157, "offset": 5922}, "start": {"col": 39, "line": 157, "offset": 5911}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 157, "offset": 5991}, "start": {"col": 115, "line": 157, "offset": 5987}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_02.cs", "start": {"col": 25, "line": 157, "offset": 5897}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 64, "offset": 2327}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 64, "offset": 2327}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_03.cs", "start": {"col": 25, "line": 64, "offset": 2228}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 64, "offset": 2322}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_03.cs", "start": {"col": 115, "line": 64, "offset": 2318}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "2e9ccb1cd55e135f3ed3b1b4e13e73bc5726b15dbf813f691b103f3c0a156b0482df4298ae0de9bfa5c2f6abcb332e0f7235b30ce84590ac1f67f7a9877b41cc_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 64, "offset": 2241}, "start": {"col": 25, "line": 64, "offset": 2228}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 64, "offset": 2253}, "start": {"col": 39, "line": 64, "offset": 2242}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 64, "offset": 2322}, "start": {"col": 115, "line": 64, "offset": 2318}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_03.cs", "start": {"col": 25, "line": 64, "offset": 2228}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 111, "offset": 4174}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 111, "offset": 4174}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_03.cs", "start": {"col": 25, "line": 111, "offset": 4075}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 111, "offset": 4169}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_03.cs", "start": {"col": 115, "line": 111, "offset": 4165}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "2e9ccb1cd55e135f3ed3b1b4e13e73bc5726b15dbf813f691b103f3c0a156b0482df4298ae0de9bfa5c2f6abcb332e0f7235b30ce84590ac1f67f7a9877b41cc_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 111, "offset": 4088}, "start": {"col": 25, "line": 111, "offset": 4075}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 111, "offset": 4100}, "start": {"col": 39, "line": 111, "offset": 4089}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 111, "offset": 4169}, "start": {"col": 115, "line": 111, "offset": 4165}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_03.cs", "start": {"col": 25, "line": 111, "offset": 4075}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 157, "offset": 5993}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 157, "offset": 5993}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_03.cs", "start": {"col": 25, "line": 157, "offset": 5894}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 157, "offset": 5988}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_03.cs", "start": {"col": 115, "line": 157, "offset": 5984}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "2e9ccb1cd55e135f3ed3b1b4e13e73bc5726b15dbf813f691b103f3c0a156b0482df4298ae0de9bfa5c2f6abcb332e0f7235b30ce84590ac1f67f7a9877b41cc_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 157, "offset": 5907}, "start": {"col": 25, "line": 157, "offset": 5894}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 157, "offset": 5919}, "start": {"col": 39, "line": 157, "offset": 5908}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 157, "offset": 5988}, "start": {"col": 115, "line": 157, "offset": 5984}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_03.cs", "start": {"col": 25, "line": 157, "offset": 5894}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 71, "offset": 2671}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 71, "offset": 2671}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_04.cs", "start": {"col": 25, "line": 71, "offset": 2572}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 71, "offset": 2666}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_04.cs", "start": {"col": 115, "line": 71, "offset": 2662}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "775f16d1b98ff26716e4d7aa7278305e33ee6cb9ac6f9be9e1db134b62e54ef73b4e8792e87665e9ad27aad8347fe92358d331c743d5c713fcbf45a188ba171d_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 71, "offset": 2585}, "start": {"col": 25, "line": 71, "offset": 2572}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 71, "offset": 2597}, "start": {"col": 39, "line": 71, "offset": 2586}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 71, "offset": 2666}, "start": {"col": 115, "line": 71, "offset": 2662}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_04.cs", "start": {"col": 25, "line": 71, "offset": 2572}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 118, "offset": 4576}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 118, "offset": 4576}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_04.cs", "start": {"col": 25, "line": 118, "offset": 4477}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 118, "offset": 4571}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_04.cs", "start": {"col": 115, "line": 118, "offset": 4567}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "775f16d1b98ff26716e4d7aa7278305e33ee6cb9ac6f9be9e1db134b62e54ef73b4e8792e87665e9ad27aad8347fe92358d331c743d5c713fcbf45a188ba171d_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 118, "offset": 4490}, "start": {"col": 25, "line": 118, "offset": 4477}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 118, "offset": 4502}, "start": {"col": 39, "line": 118, "offset": 4491}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 118, "offset": 4571}, "start": {"col": 115, "line": 118, "offset": 4567}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_04.cs", "start": {"col": 25, "line": 118, "offset": 4477}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 164, "offset": 6423}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 164, "offset": 6423}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_04.cs", "start": {"col": 25, "line": 164, "offset": 6324}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 164, "offset": 6418}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_04.cs", "start": {"col": 115, "line": 164, "offset": 6414}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "775f16d1b98ff26716e4d7aa7278305e33ee6cb9ac6f9be9e1db134b62e54ef73b4e8792e87665e9ad27aad8347fe92358d331c743d5c713fcbf45a188ba171d_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 164, "offset": 6337}, "start": {"col": 25, "line": 164, "offset": 6324}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 164, "offset": 6349}, "start": {"col": 39, "line": 164, "offset": 6338}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 164, "offset": 6418}, "start": {"col": 115, "line": 164, "offset": 6414}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_04.cs", "start": {"col": 25, "line": 164, "offset": 6324}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 70, "offset": 2664}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 70, "offset": 2664}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_05.cs", "start": {"col": 25, "line": 70, "offset": 2565}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 70, "offset": 2659}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_05.cs", "start": {"col": 115, "line": 70, "offset": 2655}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "75f1254fc650065f6a1660799cb7f31787de62d1f5fe8f6ebcb3a949c250dd291b3ade9eab4fc62582f1f4fc12480a98e2266baf5465865f9b2b670b247d0996_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 70, "offset": 2578}, "start": {"col": 25, "line": 70, "offset": 2565}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 70, "offset": 2590}, "start": {"col": 39, "line": 70, "offset": 2579}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 70, "offset": 2659}, "start": {"col": 115, "line": 70, "offset": 2655}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_05.cs", "start": {"col": 25, "line": 70, "offset": 2565}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 117, "offset": 4541}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 117, "offset": 4541}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_05.cs", "start": {"col": 25, "line": 117, "offset": 4442}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 117, "offset": 4536}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_05.cs", "start": {"col": 115, "line": 117, "offset": 4532}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "75f1254fc650065f6a1660799cb7f31787de62d1f5fe8f6ebcb3a949c250dd291b3ade9eab4fc62582f1f4fc12480a98e2266baf5465865f9b2b670b247d0996_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 117, "offset": 4455}, "start": {"col": 25, "line": 117, "offset": 4442}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 117, "offset": 4467}, "start": {"col": 39, "line": 117, "offset": 4456}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 117, "offset": 4536}, "start": {"col": 115, "line": 117, "offset": 4532}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_05.cs", "start": {"col": 25, "line": 117, "offset": 4442}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 163, "offset": 6374}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 163, "offset": 6374}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_05.cs", "start": {"col": 25, "line": 163, "offset": 6275}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 163, "offset": 6369}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_05.cs", "start": {"col": 115, "line": 163, "offset": 6365}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "75f1254fc650065f6a1660799cb7f31787de62d1f5fe8f6ebcb3a949c250dd291b3ade9eab4fc62582f1f4fc12480a98e2266baf5465865f9b2b670b247d0996_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 163, "offset": 6288}, "start": {"col": 25, "line": 163, "offset": 6275}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 163, "offset": 6300}, "start": {"col": 39, "line": 163, "offset": 6289}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 163, "offset": 6369}, "start": {"col": 115, "line": 163, "offset": 6365}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_05.cs", "start": {"col": 25, "line": 163, "offset": 6275}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 69, "offset": 2607}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 69, "offset": 2607}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_06.cs", "start": {"col": 25, "line": 69, "offset": 2508}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 69, "offset": 2602}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_06.cs", "start": {"col": 115, "line": 69, "offset": 2598}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "0f6f4ca0da626df79a57771a0313df3ef685cd5b59297435e005953b12147ddd83201ee0f5c4fa7dbd41903c0a70e367d424f63e0a94501792109bd05f3b48ff_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 69, "offset": 2521}, "start": {"col": 25, "line": 69, "offset": 2508}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 69, "offset": 2533}, "start": {"col": 39, "line": 69, "offset": 2522}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 69, "offset": 2602}, "start": {"col": 115, "line": 69, "offset": 2598}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_06.cs", "start": {"col": 25, "line": 69, "offset": 2508}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 116, "offset": 4522}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 116, "offset": 4522}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_06.cs", "start": {"col": 25, "line": 116, "offset": 4423}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 116, "offset": 4517}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_06.cs", "start": {"col": 115, "line": 116, "offset": 4513}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "0f6f4ca0da626df79a57771a0313df3ef685cd5b59297435e005953b12147ddd83201ee0f5c4fa7dbd41903c0a70e367d424f63e0a94501792109bd05f3b48ff_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 116, "offset": 4436}, "start": {"col": 25, "line": 116, "offset": 4423}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 116, "offset": 4448}, "start": {"col": 39, "line": 116, "offset": 4437}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 116, "offset": 4517}, "start": {"col": 115, "line": 116, "offset": 4513}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_06.cs", "start": {"col": 25, "line": 116, "offset": 4423}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 162, "offset": 6375}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 162, "offset": 6375}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_06.cs", "start": {"col": 25, "line": 162, "offset": 6276}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 162, "offset": 6370}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_06.cs", "start": {"col": 115, "line": 162, "offset": 6366}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "0f6f4ca0da626df79a57771a0313df3ef685cd5b59297435e005953b12147ddd83201ee0f5c4fa7dbd41903c0a70e367d424f63e0a94501792109bd05f3b48ff_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 162, "offset": 6289}, "start": {"col": 25, "line": 162, "offset": 6276}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 162, "offset": 6301}, "start": {"col": 39, "line": 162, "offset": 6290}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 162, "offset": 6370}, "start": {"col": 115, "line": 162, "offset": 6366}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_06.cs", "start": {"col": 25, "line": 162, "offset": 6276}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 69, "offset": 2611}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 69, "offset": 2611}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_07.cs", "start": {"col": 25, "line": 69, "offset": 2512}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 69, "offset": 2606}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_07.cs", "start": {"col": 115, "line": 69, "offset": 2602}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "30b3b9abb8be0e6b582449f111dd0013ce0ccd4e1a7e04f350534e147dd0b637c0d4e49ab8b61892ac75dbea17b18c676df252248e8dd69a3e3bebc7a6ba49b1_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 69, "offset": 2525}, "start": {"col": 25, "line": 69, "offset": 2512}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 69, "offset": 2537}, "start": {"col": 39, "line": 69, "offset": 2526}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 69, "offset": 2606}, "start": {"col": 115, "line": 69, "offset": 2602}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_07.cs", "start": {"col": 25, "line": 69, "offset": 2512}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 116, "offset": 4498}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 116, "offset": 4498}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_07.cs", "start": {"col": 25, "line": 116, "offset": 4399}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 116, "offset": 4493}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_07.cs", "start": {"col": 115, "line": 116, "offset": 4489}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "30b3b9abb8be0e6b582449f111dd0013ce0ccd4e1a7e04f350534e147dd0b637c0d4e49ab8b61892ac75dbea17b18c676df252248e8dd69a3e3bebc7a6ba49b1_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 116, "offset": 4412}, "start": {"col": 25, "line": 116, "offset": 4399}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 116, "offset": 4424}, "start": {"col": 39, "line": 116, "offset": 4413}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 116, "offset": 4493}, "start": {"col": 115, "line": 116, "offset": 4489}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_07.cs", "start": {"col": 25, "line": 116, "offset": 4399}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 162, "offset": 6337}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 162, "offset": 6337}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_07.cs", "start": {"col": 25, "line": 162, "offset": 6238}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 162, "offset": 6332}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_07.cs", "start": {"col": 115, "line": 162, "offset": 6328}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "30b3b9abb8be0e6b582449f111dd0013ce0ccd4e1a7e04f350534e147dd0b637c0d4e49ab8b61892ac75dbea17b18c676df252248e8dd69a3e3bebc7a6ba49b1_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 162, "offset": 6251}, "start": {"col": 25, "line": 162, "offset": 6238}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 162, "offset": 6263}, "start": {"col": 39, "line": 162, "offset": 6252}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 162, "offset": 6332}, "start": {"col": 115, "line": 162, "offset": 6328}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_07.cs", "start": {"col": 25, "line": 162, "offset": 6238}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 77, "offset": 2743}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 77, "offset": 2743}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_08.cs", "start": {"col": 25, "line": 77, "offset": 2644}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 77, "offset": 2738}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_08.cs", "start": {"col": 115, "line": 77, "offset": 2734}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "06cbaa5c8802a5c591c32187cd64914b69482b23b4cc48e43ec57bbd86ad03511c3f36a22057c4c73c254423d8452e1cd066e96b4399e01f8f199461e8bdb4cf_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 77, "offset": 2657}, "start": {"col": 25, "line": 77, "offset": 2644}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 77, "offset": 2669}, "start": {"col": 39, "line": 77, "offset": 2658}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 77, "offset": 2738}, "start": {"col": 115, "line": 77, "offset": 2734}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_08.cs", "start": {"col": 25, "line": 77, "offset": 2644}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 124, "offset": 4656}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 124, "offset": 4656}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_08.cs", "start": {"col": 25, "line": 124, "offset": 4557}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 124, "offset": 4651}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_08.cs", "start": {"col": 115, "line": 124, "offset": 4647}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "06cbaa5c8802a5c591c32187cd64914b69482b23b4cc48e43ec57bbd86ad03511c3f36a22057c4c73c254423d8452e1cd066e96b4399e01f8f199461e8bdb4cf_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 124, "offset": 4570}, "start": {"col": 25, "line": 124, "offset": 4557}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 124, "offset": 4582}, "start": {"col": 39, "line": 124, "offset": 4571}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 124, "offset": 4651}, "start": {"col": 115, "line": 124, "offset": 4647}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_08.cs", "start": {"col": 25, "line": 124, "offset": 4557}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 170, "offset": 6507}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 170, "offset": 6507}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_08.cs", "start": {"col": 25, "line": 170, "offset": 6408}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 170, "offset": 6502}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_08.cs", "start": {"col": 115, "line": 170, "offset": 6498}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "06cbaa5c8802a5c591c32187cd64914b69482b23b4cc48e43ec57bbd86ad03511c3f36a22057c4c73c254423d8452e1cd066e96b4399e01f8f199461e8bdb4cf_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 170, "offset": 6421}, "start": {"col": 25, "line": 170, "offset": 6408}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 170, "offset": 6433}, "start": {"col": 39, "line": 170, "offset": 6422}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 170, "offset": 6502}, "start": {"col": 115, "line": 170, "offset": 6498}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_08.cs", "start": {"col": 25, "line": 170, "offset": 6408}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 64, "offset": 2404}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 64, "offset": 2404}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_09.cs", "start": {"col": 25, "line": 64, "offset": 2305}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 64, "offset": 2399}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_09.cs", "start": {"col": 115, "line": 64, "offset": 2395}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "19ea42e8cbe837a9f1d2d0b4946b660ceba82de30a3da4d9bf0fe4be509cdfc3747cfdd18a932bc36c5b60d62f88f35c9a6164d1352d9c11bcfbff6996541408_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 64, "offset": 2318}, "start": {"col": 25, "line": 64, "offset": 2305}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 64, "offset": 2330}, "start": {"col": 39, "line": 64, "offset": 2319}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 64, "offset": 2399}, "start": {"col": 115, "line": 64, "offset": 2395}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_09.cs", "start": {"col": 25, "line": 64, "offset": 2305}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 111, "offset": 4329}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 111, "offset": 4329}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_09.cs", "start": {"col": 25, "line": 111, "offset": 4230}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 111, "offset": 4324}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_09.cs", "start": {"col": 115, "line": 111, "offset": 4320}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "19ea42e8cbe837a9f1d2d0b4946b660ceba82de30a3da4d9bf0fe4be509cdfc3747cfdd18a932bc36c5b60d62f88f35c9a6164d1352d9c11bcfbff6996541408_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 111, "offset": 4243}, "start": {"col": 25, "line": 111, "offset": 4230}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 111, "offset": 4255}, "start": {"col": 39, "line": 111, "offset": 4244}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 111, "offset": 4324}, "start": {"col": 115, "line": 111, "offset": 4320}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_09.cs", "start": {"col": 25, "line": 111, "offset": 4230}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 157, "offset": 6186}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 157, "offset": 6186}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_09.cs", "start": {"col": 25, "line": 157, "offset": 6087}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 157, "offset": 6181}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_09.cs", "start": {"col": 115, "line": 157, "offset": 6177}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "19ea42e8cbe837a9f1d2d0b4946b660ceba82de30a3da4d9bf0fe4be509cdfc3747cfdd18a932bc36c5b60d62f88f35c9a6164d1352d9c11bcfbff6996541408_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 157, "offset": 6100}, "start": {"col": 25, "line": 157, "offset": 6087}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 157, "offset": 6112}, "start": {"col": 39, "line": 157, "offset": 6101}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 157, "offset": 6181}, "start": {"col": 115, "line": 157, "offset": 6177}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_09.cs", "start": {"col": 25, "line": 157, "offset": 6087}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 64, "offset": 2364}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 64, "offset": 2364}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_10.cs", "start": {"col": 25, "line": 64, "offset": 2265}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 64, "offset": 2359}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_10.cs", "start": {"col": 115, "line": 64, "offset": 2355}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "f02c8d4fbb1513ad92e690bbf6fd1b1fb8ca2e492e58fe6f417f75aba26fea0c8a1c803246a29019b3af2c9277be4597cbcda1d1f93ef1228cb1f27c3c624fc8_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 64, "offset": 2278}, "start": {"col": 25, "line": 64, "offset": 2265}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 64, "offset": 2290}, "start": {"col": 39, "line": 64, "offset": 2279}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 64, "offset": 2359}, "start": {"col": 115, "line": 64, "offset": 2355}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_10.cs", "start": {"col": 25, "line": 64, "offset": 2265}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 111, "offset": 4249}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 111, "offset": 4249}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_10.cs", "start": {"col": 25, "line": 111, "offset": 4150}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 111, "offset": 4244}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_10.cs", "start": {"col": 115, "line": 111, "offset": 4240}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "f02c8d4fbb1513ad92e690bbf6fd1b1fb8ca2e492e58fe6f417f75aba26fea0c8a1c803246a29019b3af2c9277be4597cbcda1d1f93ef1228cb1f27c3c624fc8_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 111, "offset": 4163}, "start": {"col": 25, "line": 111, "offset": 4150}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 111, "offset": 4175}, "start": {"col": 39, "line": 111, "offset": 4164}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 111, "offset": 4244}, "start": {"col": 115, "line": 111, "offset": 4240}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_10.cs", "start": {"col": 25, "line": 111, "offset": 4150}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 157, "offset": 6086}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 157, "offset": 6086}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_10.cs", "start": {"col": 25, "line": 157, "offset": 5987}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 157, "offset": 6081}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_10.cs", "start": {"col": 115, "line": 157, "offset": 6077}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "f02c8d4fbb1513ad92e690bbf6fd1b1fb8ca2e492e58fe6f417f75aba26fea0c8a1c803246a29019b3af2c9277be4597cbcda1d1f93ef1228cb1f27c3c624fc8_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 157, "offset": 6000}, "start": {"col": 25, "line": 157, "offset": 5987}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 157, "offset": 6012}, "start": {"col": 39, "line": 157, "offset": 6001}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 157, "offset": 6081}, "start": {"col": 115, "line": 157, "offset": 6077}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_10.cs", "start": {"col": 25, "line": 157, "offset": 5987}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 64, "offset": 2399}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 64, "offset": 2399}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_11.cs", "start": {"col": 25, "line": 64, "offset": 2300}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 64, "offset": 2394}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_11.cs", "start": {"col": 115, "line": 64, "offset": 2390}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "2eed935f77740d4f0a9ad47c76675bfe46e600b3d1538de7f00519289b55bd5a381f3de9e7e55a5f5044dcd58374e1f8e270be40b258797c5b5d0310dceabc70_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 64, "offset": 2313}, "start": {"col": 25, "line": 64, "offset": 2300}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 64, "offset": 2325}, "start": {"col": 39, "line": 64, "offset": 2314}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 64, "offset": 2394}, "start": {"col": 115, "line": 64, "offset": 2390}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_11.cs", "start": {"col": 25, "line": 64, "offset": 2300}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 111, "offset": 4320}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 111, "offset": 4320}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_11.cs", "start": {"col": 25, "line": 111, "offset": 4221}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 111, "offset": 4315}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_11.cs", "start": {"col": 115, "line": 111, "offset": 4311}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "2eed935f77740d4f0a9ad47c76675bfe46e600b3d1538de7f00519289b55bd5a381f3de9e7e55a5f5044dcd58374e1f8e270be40b258797c5b5d0310dceabc70_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 111, "offset": 4234}, "start": {"col": 25, "line": 111, "offset": 4221}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 111, "offset": 4246}, "start": {"col": 39, "line": 111, "offset": 4235}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 111, "offset": 4315}, "start": {"col": 115, "line": 111, "offset": 4311}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_11.cs", "start": {"col": 25, "line": 111, "offset": 4221}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 157, "offset": 6175}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 157, "offset": 6175}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_11.cs", "start": {"col": 25, "line": 157, "offset": 6076}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 157, "offset": 6170}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_11.cs", "start": {"col": 115, "line": 157, "offset": 6166}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "2eed935f77740d4f0a9ad47c76675bfe46e600b3d1538de7f00519289b55bd5a381f3de9e7e55a5f5044dcd58374e1f8e270be40b258797c5b5d0310dceabc70_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 157, "offset": 6089}, "start": {"col": 25, "line": 157, "offset": 6076}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 157, "offset": 6101}, "start": {"col": 39, "line": 157, "offset": 6090}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 157, "offset": 6170}, "start": {"col": 115, "line": 157, "offset": 6166}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_11.cs", "start": {"col": 25, "line": 157, "offset": 6076}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 63, "offset": 2265}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 63, "offset": 2265}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_12.cs", "start": {"col": 25, "line": 63, "offset": 2166}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 63, "offset": 2260}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_12.cs", "start": {"col": 115, "line": 63, "offset": 2256}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "6fead7778f0b5fd6566f19ba0f62476edc3736f8423c35ee4144824cdcdbb98c6ec1b6a633e99c13a81a1430b6c9938c253b2a5130bc777720e14d70e419e8fc_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 63, "offset": 2179}, "start": {"col": 25, "line": 63, "offset": 2166}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 63, "offset": 2191}, "start": {"col": 39, "line": 63, "offset": 2180}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 63, "offset": 2260}, "start": {"col": 115, "line": 63, "offset": 2256}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_12.cs", "start": {"col": 25, "line": 63, "offset": 2166}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 64, "offset": 2415}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 64, "offset": 2415}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_13.cs", "start": {"col": 25, "line": 64, "offset": 2316}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 64, "offset": 2410}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_13.cs", "start": {"col": 115, "line": 64, "offset": 2406}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "ef2c44bab6e34c57c863ff56bf94e55be0ada6ef2d14f3939935dcdacb241f98e41f3235ef1356a155d40947092085c3ff42ef706b7413bb70b6cfc54db112aa_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 64, "offset": 2329}, "start": {"col": 25, "line": 64, "offset": 2316}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 64, "offset": 2341}, "start": {"col": 39, "line": 64, "offset": 2330}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 64, "offset": 2410}, "start": {"col": 115, "line": 64, "offset": 2406}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_13.cs", "start": {"col": 25, "line": 64, "offset": 2316}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 111, "offset": 4350}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 111, "offset": 4350}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_13.cs", "start": {"col": 25, "line": 111, "offset": 4251}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 111, "offset": 4345}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_13.cs", "start": {"col": 115, "line": 111, "offset": 4341}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "ef2c44bab6e34c57c863ff56bf94e55be0ada6ef2d14f3939935dcdacb241f98e41f3235ef1356a155d40947092085c3ff42ef706b7413bb70b6cfc54db112aa_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 111, "offset": 4264}, "start": {"col": 25, "line": 111, "offset": 4251}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 111, "offset": 4276}, "start": {"col": 39, "line": 111, "offset": 4265}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 111, "offset": 4345}, "start": {"col": 115, "line": 111, "offset": 4341}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_13.cs", "start": {"col": 25, "line": 111, "offset": 4251}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 157, "offset": 6213}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 157, "offset": 6213}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_13.cs", "start": {"col": 25, "line": 157, "offset": 6114}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 157, "offset": 6208}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_13.cs", "start": {"col": 115, "line": 157, "offset": 6204}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "ef2c44bab6e34c57c863ff56bf94e55be0ada6ef2d14f3939935dcdacb241f98e41f3235ef1356a155d40947092085c3ff42ef706b7413bb70b6cfc54db112aa_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 157, "offset": 6127}, "start": {"col": 25, "line": 157, "offset": 6114}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 157, "offset": 6139}, "start": {"col": 39, "line": 157, "offset": 6128}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 157, "offset": 6208}, "start": {"col": 115, "line": 157, "offset": 6204}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_13.cs", "start": {"col": 25, "line": 157, "offset": 6114}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 64, "offset": 2375}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 64, "offset": 2375}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_14.cs", "start": {"col": 25, "line": 64, "offset": 2276}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 64, "offset": 2370}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_14.cs", "start": {"col": 115, "line": 64, "offset": 2366}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "f0eb7e0d4104638cf043f41a082d24244dacf8a88ede696ef4575b70128d0edde78cd03ab72e6e299afc31b56e65d4e092e3de7388588d561a13075f0b47588f_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 64, "offset": 2289}, "start": {"col": 25, "line": 64, "offset": 2276}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 64, "offset": 2301}, "start": {"col": 39, "line": 64, "offset": 2290}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 64, "offset": 2370}, "start": {"col": 115, "line": 64, "offset": 2366}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_14.cs", "start": {"col": 25, "line": 64, "offset": 2276}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 111, "offset": 4270}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 111, "offset": 4270}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_14.cs", "start": {"col": 25, "line": 111, "offset": 4171}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 111, "offset": 4265}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_14.cs", "start": {"col": 115, "line": 111, "offset": 4261}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "f0eb7e0d4104638cf043f41a082d24244dacf8a88ede696ef4575b70128d0edde78cd03ab72e6e299afc31b56e65d4e092e3de7388588d561a13075f0b47588f_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 111, "offset": 4184}, "start": {"col": 25, "line": 111, "offset": 4171}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 111, "offset": 4196}, "start": {"col": 39, "line": 111, "offset": 4185}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 111, "offset": 4265}, "start": {"col": 115, "line": 111, "offset": 4261}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_14.cs", "start": {"col": 25, "line": 111, "offset": 4171}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 157, "offset": 6113}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 157, "offset": 6113}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_14.cs", "start": {"col": 25, "line": 157, "offset": 6014}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 157, "offset": 6108}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_14.cs", "start": {"col": 115, "line": 157, "offset": 6104}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "f0eb7e0d4104638cf043f41a082d24244dacf8a88ede696ef4575b70128d0edde78cd03ab72e6e299afc31b56e65d4e092e3de7388588d561a13075f0b47588f_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 157, "offset": 6027}, "start": {"col": 25, "line": 157, "offset": 6014}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 157, "offset": 6039}, "start": {"col": 39, "line": 157, "offset": 6028}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 157, "offset": 6108}, "start": {"col": 115, "line": 157, "offset": 6104}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_14.cs", "start": {"col": 25, "line": 157, "offset": 6014}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 66, "offset": 2387}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 66, "offset": 2387}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_15.cs", "start": {"col": 25, "line": 66, "offset": 2288}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 66, "offset": 2382}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_15.cs", "start": {"col": 115, "line": 66, "offset": 2378}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "aeda1392413b6bb1ccd0a341bd27025649ce151f4154728f73a4f77abd6109efd4ffafc5849cdffb66778b5f7dc7234de8b7c340fce2d2d70c58e6f13b1c05ad_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 66, "offset": 2301}, "start": {"col": 25, "line": 66, "offset": 2288}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 66, "offset": 2313}, "start": {"col": 39, "line": 66, "offset": 2302}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 66, "offset": 2382}, "start": {"col": 115, "line": 66, "offset": 2378}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_15.cs", "start": {"col": 25, "line": 66, "offset": 2288}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 120, "offset": 4492}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 120, "offset": 4492}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_15.cs", "start": {"col": 25, "line": 120, "offset": 4393}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 120, "offset": 4487}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_15.cs", "start": {"col": 115, "line": 120, "offset": 4483}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "aeda1392413b6bb1ccd0a341bd27025649ce151f4154728f73a4f77abd6109efd4ffafc5849cdffb66778b5f7dc7234de8b7c340fce2d2d70c58e6f13b1c05ad_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 120, "offset": 4406}, "start": {"col": 25, "line": 120, "offset": 4393}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 120, "offset": 4418}, "start": {"col": 39, "line": 120, "offset": 4407}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 120, "offset": 4487}, "start": {"col": 115, "line": 120, "offset": 4483}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_15.cs", "start": {"col": 25, "line": 120, "offset": 4393}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 173, "offset": 6567}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 173, "offset": 6567}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_15.cs", "start": {"col": 25, "line": 173, "offset": 6468}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 173, "offset": 6562}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_15.cs", "start": {"col": 115, "line": 173, "offset": 6558}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "aeda1392413b6bb1ccd0a341bd27025649ce151f4154728f73a4f77abd6109efd4ffafc5849cdffb66778b5f7dc7234de8b7c340fce2d2d70c58e6f13b1c05ad_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 173, "offset": 6481}, "start": {"col": 25, "line": 173, "offset": 6468}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 173, "offset": 6493}, "start": {"col": 39, "line": 173, "offset": 6482}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 173, "offset": 6562}, "start": {"col": 115, "line": 173, "offset": 6558}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_15.cs", "start": {"col": 25, "line": 173, "offset": 6468}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 59, "offset": 2111}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 59, "offset": 2111}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_16.cs", "start": {"col": 25, "line": 59, "offset": 2012}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 59, "offset": 2106}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_16.cs", "start": {"col": 115, "line": 59, "offset": 2102}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "575ffa324db7927e002f3c27c575d726c6a049ce70b669bb70c31196ef586bf0f970676e8debdd73ea7b745b5d3658230bcc1bf61bbd6d4488d185d058815c56_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 59, "offset": 2025}, "start": {"col": 25, "line": 59, "offset": 2012}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 59, "offset": 2037}, "start": {"col": 39, "line": 59, "offset": 2026}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 59, "offset": 2106}, "start": {"col": 115, "line": 59, "offset": 2102}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_16.cs", "start": {"col": 25, "line": 59, "offset": 2012}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 102, "offset": 3739}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 102, "offset": 3739}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_16.cs", "start": {"col": 25, "line": 102, "offset": 3640}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 102, "offset": 3734}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_16.cs", "start": {"col": 115, "line": 102, "offset": 3730}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "575ffa324db7927e002f3c27c575d726c6a049ce70b669bb70c31196ef586bf0f970676e8debdd73ea7b745b5d3658230bcc1bf61bbd6d4488d185d058815c56_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 102, "offset": 3653}, "start": {"col": 25, "line": 102, "offset": 3640}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 102, "offset": 3665}, "start": {"col": 39, "line": 102, "offset": 3654}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 102, "offset": 3734}, "start": {"col": 115, "line": 102, "offset": 3730}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_16.cs", "start": {"col": 25, "line": 102, "offset": 3640}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 59, "offset": 2206}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 59, "offset": 2206}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_17.cs", "start": {"col": 25, "line": 59, "offset": 2107}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 59, "offset": 2201}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_17.cs", "start": {"col": 115, "line": 59, "offset": 2197}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "129a7886f11280deb8b4db6f7f5acefeab06383ad1583c7a2622e31b68a3af8b8b1f9ccdcfbb70c57469aafb58040d64eeb324aee8b9fb308ed17672396adbe0_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 59, "offset": 2120}, "start": {"col": 25, "line": 59, "offset": 2107}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 59, "offset": 2132}, "start": {"col": 39, "line": 59, "offset": 2121}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 59, "offset": 2201}, "start": {"col": 115, "line": 59, "offset": 2197}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_17.cs", "start": {"col": 25, "line": 59, "offset": 2107}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 97, "offset": 3757}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 97, "offset": 3757}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_17.cs", "start": {"col": 25, "line": 97, "offset": 3658}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 97, "offset": 3752}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_17.cs", "start": {"col": 115, "line": 97, "offset": 3748}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "129a7886f11280deb8b4db6f7f5acefeab06383ad1583c7a2622e31b68a3af8b8b1f9ccdcfbb70c57469aafb58040d64eeb324aee8b9fb308ed17672396adbe0_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 97, "offset": 3671}, "start": {"col": 25, "line": 97, "offset": 3658}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 97, "offset": 3683}, "start": {"col": 39, "line": 97, "offset": 3672}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 97, "offset": 3752}, "start": {"col": 115, "line": 97, "offset": 3748}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_17.cs", "start": {"col": 25, "line": 97, "offset": 3658}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 64, "offset": 2370}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 64, "offset": 2370}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_21.cs", "start": {"col": 25, "line": 64, "offset": 2271}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 64, "offset": 2365}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_21.cs", "start": {"col": 115, "line": 64, "offset": 2361}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "87ff7b3e92d6f2a395749276d809b8b40760113d0a19c3f19315a2caa2d5c12eeb1641cde39bd03cbe3aa906ade8844b1f2f02f805449ca0e04e62d103bfad34_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 64, "offset": 2284}, "start": {"col": 25, "line": 64, "offset": 2271}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 64, "offset": 2296}, "start": {"col": 39, "line": 64, "offset": 2285}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 64, "offset": 2365}, "start": {"col": 115, "line": 64, "offset": 2361}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_21.cs", "start": {"col": 25, "line": 64, "offset": 2271}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 234, "offset": 9164}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 234, "offset": 9164}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_21.cs", "start": {"col": 25, "line": 234, "offset": 9065}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 234, "offset": 9159}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_21.cs", "start": {"col": 115, "line": 234, "offset": 9155}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "87ff7b3e92d6f2a395749276d809b8b40760113d0a19c3f19315a2caa2d5c12eeb1641cde39bd03cbe3aa906ade8844b1f2f02f805449ca0e04e62d103bfad34_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 234, "offset": 9078}, "start": {"col": 25, "line": 234, "offset": 9065}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 234, "offset": 9090}, "start": {"col": 39, "line": 234, "offset": 9079}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 234, "offset": 9159}, "start": {"col": 115, "line": 234, "offset": 9155}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_21.cs", "start": {"col": 25, "line": 234, "offset": 9065}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 43, "offset": 1764}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 43, "offset": 1764}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_22b.cs", "start": {"col": 25, "line": 43, "offset": 1665}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 43, "offset": 1759}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_22b.cs", "start": {"col": 115, "line": 43, "offset": 1755}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "4db4655faa597783fbe23a80197cb75809770ba243e86e2952ec2b664b6b200853fe5df363d5f59eda13ee5f0beb7ce1c643b4e6fff99decaacaa2875b3370c0_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 43, "offset": 1678}, "start": {"col": 25, "line": 43, "offset": 1665}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 43, "offset": 1690}, "start": {"col": 39, "line": 43, "offset": 1679}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 43, "offset": 1759}, "start": {"col": 115, "line": 43, "offset": 1755}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_22b.cs", "start": {"col": 25, "line": 43, "offset": 1665}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 173, "offset": 7550}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 173, "offset": 7550}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_22b.cs", "start": {"col": 25, "line": 173, "offset": 7451}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 173, "offset": 7545}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_22b.cs", "start": {"col": 115, "line": 173, "offset": 7541}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "4db4655faa597783fbe23a80197cb75809770ba243e86e2952ec2b664b6b200853fe5df363d5f59eda13ee5f0beb7ce1c643b4e6fff99decaacaa2875b3370c0_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 173, "offset": 7464}, "start": {"col": 25, "line": 173, "offset": 7451}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 173, "offset": 7476}, "start": {"col": 39, "line": 173, "offset": 7465}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 173, "offset": 7545}, "start": {"col": 115, "line": 173, "offset": 7541}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_22b.cs", "start": {"col": 25, "line": 173, "offset": 7451}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 59, "offset": 2182}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "dataCopy", "location": {"end": {"col": 21, "line": 46, "offset": 1528}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_31.cs", "start": {"col": 13, "line": 46, "offset": 1520}}}, {"content": "data", "location": {"end": {"col": 24, "line": 49, "offset": 1583}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_31.cs", "start": {"col": 20, "line": 49, "offset": 1579}}}], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 59, "offset": 2182}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_31.cs", "start": {"col": 25, "line": 59, "offset": 2083}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 28, "line": 46, "offset": 1535}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_31.cs", "start": {"col": 24, "line": 46, "offset": 1531}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "5936ebfb943e62dfc8f45d16c918edfcd930155b5548bcfe7d18850225294a386cf3ba2690284548e401b30b523f35285a9135c3a527037194b3b7d5912568f3_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 59, "offset": 2096}, "start": {"col": 25, "line": 59, "offset": 2083}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 59, "offset": 2108}, "start": {"col": 39, "line": 59, "offset": 2097}}, "$X": {"abstract_content": "data", "end": {"col": 28, "line": 46, "offset": 1535}, "start": {"col": 24, "line": 46, "offset": 1531}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_31.cs", "start": {"col": 25, "line": 59, "offset": 2083}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 42, "offset": 1607}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 42, "offset": 1607}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_41.cs", "start": {"col": 21, "line": 42, "offset": 1508}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 42, "offset": 1602}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_41.cs", "start": {"col": 111, "line": 42, "offset": 1598}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "462befa1fa54680d84d78f14f026a2dbd2782581ae36bfb907e20d29059d58146478ae2e741181fc2ad89c24bfc2bd71f53f0e3bad3f0e2a085399c4cc403cd1_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 42, "offset": 1521}, "start": {"col": 21, "line": 42, "offset": 1508}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 42, "offset": 1533}, "start": {"col": 35, "line": 42, "offset": 1522}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 42, "offset": 1602}, "start": {"col": 111, "line": 42, "offset": 1598}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_41.cs", "start": {"col": 21, "line": 42, "offset": 1508}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 95, "offset": 3553}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 95, "offset": 3553}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_41.cs", "start": {"col": 21, "line": 95, "offset": 3454}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 95, "offset": 3548}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_41.cs", "start": {"col": 111, "line": 95, "offset": 3544}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "462befa1fa54680d84d78f14f026a2dbd2782581ae36bfb907e20d29059d58146478ae2e741181fc2ad89c24bfc2bd71f53f0e3bad3f0e2a085399c4cc403cd1_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 95, "offset": 3467}, "start": {"col": 21, "line": 95, "offset": 3454}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 95, "offset": 3479}, "start": {"col": 35, "line": 95, "offset": 3468}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 95, "offset": 3548}, "start": {"col": 111, "line": 95, "offset": 3544}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_41.cs", "start": {"col": 21, "line": 95, "offset": 3454}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 59, "offset": 2144}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 59, "offset": 2144}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_42.cs", "start": {"col": 21, "line": 59, "offset": 2045}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 59, "offset": 2139}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_42.cs", "start": {"col": 111, "line": 59, "offset": 2135}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "62ad4ef199297c766d20e661a3241bdd281863b4d5d2e78fc12deff0cd7fcc0955063c829a7420616dc605ba7159385d7ce9b2f21902acb01d2e25f8feaee1b6_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 59, "offset": 2058}, "start": {"col": 21, "line": 59, "offset": 2045}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 59, "offset": 2070}, "start": {"col": 35, "line": 59, "offset": 2059}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 59, "offset": 2139}, "propagated_value": {"svalue_abstract_content": "BadSource(req resp)", "svalue_end": {"col": 43, "line": 49, "offset": 1596}, "svalue_start": {"col": 23, "line": 49, "offset": 1576}}, "start": {"col": 111, "line": 59, "offset": 2135}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_42.cs", "start": {"col": 21, "line": 59, "offset": 2045}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 100, "offset": 3703}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 100, "offset": 3703}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_42.cs", "start": {"col": 21, "line": 100, "offset": 3604}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 100, "offset": 3698}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_42.cs", "start": {"col": 111, "line": 100, "offset": 3694}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "62ad4ef199297c766d20e661a3241bdd281863b4d5d2e78fc12deff0cd7fcc0955063c829a7420616dc605ba7159385d7ce9b2f21902acb01d2e25f8feaee1b6_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 100, "offset": 3617}, "start": {"col": 21, "line": 100, "offset": 3604}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 100, "offset": 3629}, "start": {"col": 35, "line": 100, "offset": 3618}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 100, "offset": 3698}, "propagated_value": {"svalue_abstract_content": "GoodG2BSource(req resp)", "svalue_end": {"col": 47, "line": 90, "offset": 3155}, "svalue_start": {"col": 23, "line": 90, "offset": 3131}}, "start": {"col": 111, "line": 100, "offset": 3694}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_42.cs", "start": {"col": 21, "line": 100, "offset": 3604}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 47, "offset": 1737}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "data", "location": {"end": {"col": 20, "line": 37, "offset": 1179}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_45.cs", "start": {"col": 16, "line": 37, "offset": 1175}}}], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 47, "offset": 1737}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_45.cs", "start": {"col": 21, "line": 47, "offset": 1638}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 30, "line": 37, "offset": 1189}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_45.cs", "start": {"col": 23, "line": 37, "offset": 1182}}, "dataBad"]]}, "engine_kind": "OSS", "fingerprint": "51514fc53609e6a062d42f10439fe80f693dc8f8efe21e59b0fbf7d5b12f94d3990d3769d0a285ee12ddc7a1fb2fb1153512eb8587c08a6dab0cba0250482253_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 47, "offset": 1651}, "start": {"col": 21, "line": 47, "offset": 1638}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 47, "offset": 1663}, "start": {"col": 35, "line": 47, "offset": 1652}}, "$X": {"abstract_content": "dataBad", "end": {"col": 30, "line": 37, "offset": 1189}, "start": {"col": 23, "line": 37, "offset": 1182}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_45.cs", "start": {"col": 21, "line": 47, "offset": 1638}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 102, "offset": 3715}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "data", "location": {"end": {"col": 20, "line": 92, "offset": 3153}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_45.cs", "start": {"col": 16, "line": 92, "offset": 3149}}}], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 102, "offset": 3715}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_45.cs", "start": {"col": 21, "line": 102, "offset": 3616}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 34, "line": 92, "offset": 3167}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_45.cs", "start": {"col": 23, "line": 92, "offset": 3156}}, "dataGoodG2B"]]}, "engine_kind": "OSS", "fingerprint": "e172877c7aba9226955094adf34c8df68d15554877dc8f1056d8b6980ee80fb68c32e5d16639e77e689b6524f352bddc02bcb9b3db51014966454b0ad421d30d_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 102, "offset": 3629}, "start": {"col": 21, "line": 102, "offset": 3616}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 102, "offset": 3641}, "start": {"col": 35, "line": 102, "offset": 3630}}, "$X": {"abstract_content": "dataGoodG2B", "end": {"col": 34, "line": 92, "offset": 3167}, "start": {"col": 23, "line": 92, "offset": 3156}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_45.cs", "start": {"col": 21, "line": 102, "offset": 3616}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 41, "offset": 1610}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 41, "offset": 1610}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_51b.cs", "start": {"col": 21, "line": 41, "offset": 1511}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 41, "offset": 1605}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_51b.cs", "start": {"col": 111, "line": 41, "offset": 1601}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "6413efde223a075e4978cb78e1cce2c2e6d8c4d6063cb072fd22ae6d6929e14e3f87b9781600fde97159570e46d9f197bd3669453cf9c13970cb6f0fa1dfc57b_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 41, "offset": 1524}, "start": {"col": 21, "line": 41, "offset": 1511}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 41, "offset": 1536}, "start": {"col": 35, "line": 41, "offset": 1525}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 41, "offset": 1605}, "start": {"col": 111, "line": 41, "offset": 1601}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_51b.cs", "start": {"col": 21, "line": 41, "offset": 1511}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 74, "offset": 2926}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 74, "offset": 2926}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_51b.cs", "start": {"col": 21, "line": 74, "offset": 2827}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 74, "offset": 2921}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_51b.cs", "start": {"col": 111, "line": 74, "offset": 2917}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "6413efde223a075e4978cb78e1cce2c2e6d8c4d6063cb072fd22ae6d6929e14e3f87b9781600fde97159570e46d9f197bd3669453cf9c13970cb6f0fa1dfc57b_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 74, "offset": 2840}, "start": {"col": 21, "line": 74, "offset": 2827}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 74, "offset": 2852}, "start": {"col": 35, "line": 74, "offset": 2841}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 74, "offset": 2921}, "start": {"col": 111, "line": 74, "offset": 2917}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_51b.cs", "start": {"col": 21, "line": 74, "offset": 2827}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 41, "offset": 1625}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 41, "offset": 1625}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_52c.cs", "start": {"col": 21, "line": 41, "offset": 1526}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 41, "offset": 1620}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_52c.cs", "start": {"col": 111, "line": 41, "offset": 1616}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "5c17a92f2ac7ff79235d7e1b6c3fea5316a8a523157add429429784f26b314b57c25d95cc1dd04f2b8ea5eed538a7fa7596e26b4c82d764b2c2ca7b43dbd61bd_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 41, "offset": 1539}, "start": {"col": 21, "line": 41, "offset": 1526}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 41, "offset": 1551}, "start": {"col": 35, "line": 41, "offset": 1540}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 41, "offset": 1620}, "start": {"col": 111, "line": 41, "offset": 1616}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_52c.cs", "start": {"col": 21, "line": 41, "offset": 1526}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 74, "offset": 2941}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 74, "offset": 2941}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_52c.cs", "start": {"col": 21, "line": 74, "offset": 2842}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 74, "offset": 2936}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_52c.cs", "start": {"col": 111, "line": 74, "offset": 2932}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "5c17a92f2ac7ff79235d7e1b6c3fea5316a8a523157add429429784f26b314b57c25d95cc1dd04f2b8ea5eed538a7fa7596e26b4c82d764b2c2ca7b43dbd61bd_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 74, "offset": 2855}, "start": {"col": 21, "line": 74, "offset": 2842}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 74, "offset": 2867}, "start": {"col": 35, "line": 74, "offset": 2856}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 74, "offset": 2936}, "start": {"col": 111, "line": 74, "offset": 2932}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_52c.cs", "start": {"col": 21, "line": 74, "offset": 2842}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 41, "offset": 1652}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 41, "offset": 1652}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_53d.cs", "start": {"col": 21, "line": 41, "offset": 1553}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 41, "offset": 1647}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_53d.cs", "start": {"col": 111, "line": 41, "offset": 1643}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "da061c94a27029084f3d341af41fa3443da119efef2ec5e703be052a364cfae862f47205968926c305b37b59fc4af2d72d20b9167491ce4c742849d4c98f5767_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 41, "offset": 1566}, "start": {"col": 21, "line": 41, "offset": 1553}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 41, "offset": 1578}, "start": {"col": 35, "line": 41, "offset": 1567}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 41, "offset": 1647}, "start": {"col": 111, "line": 41, "offset": 1643}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_53d.cs", "start": {"col": 21, "line": 41, "offset": 1553}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 74, "offset": 2968}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 74, "offset": 2968}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_53d.cs", "start": {"col": 21, "line": 74, "offset": 2869}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 74, "offset": 2963}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_53d.cs", "start": {"col": 111, "line": 74, "offset": 2959}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "da061c94a27029084f3d341af41fa3443da119efef2ec5e703be052a364cfae862f47205968926c305b37b59fc4af2d72d20b9167491ce4c742849d4c98f5767_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 74, "offset": 2882}, "start": {"col": 21, "line": 74, "offset": 2869}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 74, "offset": 2894}, "start": {"col": 35, "line": 74, "offset": 2883}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 74, "offset": 2963}, "start": {"col": 111, "line": 74, "offset": 2959}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_53d.cs", "start": {"col": 21, "line": 74, "offset": 2869}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 41, "offset": 1653}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 41, "offset": 1653}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_54e.cs", "start": {"col": 21, "line": 41, "offset": 1554}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 41, "offset": 1648}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_54e.cs", "start": {"col": 111, "line": 41, "offset": 1644}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "a8fc9922850aff9d163d0d4129f8c593e8d96b49cea7559057b3ddbb0252b3a096ca61be3b82ecb4262f0462be305de15a3cdda98fbdd3792158513b3cce0244_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 41, "offset": 1567}, "start": {"col": 21, "line": 41, "offset": 1554}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 41, "offset": 1579}, "start": {"col": 35, "line": 41, "offset": 1568}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 41, "offset": 1648}, "start": {"col": 111, "line": 41, "offset": 1644}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_54e.cs", "start": {"col": 21, "line": 41, "offset": 1554}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 74, "offset": 2969}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 74, "offset": 2969}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_54e.cs", "start": {"col": 21, "line": 74, "offset": 2870}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 74, "offset": 2964}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_54e.cs", "start": {"col": 111, "line": 74, "offset": 2960}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "a8fc9922850aff9d163d0d4129f8c593e8d96b49cea7559057b3ddbb0252b3a096ca61be3b82ecb4262f0462be305de15a3cdda98fbdd3792158513b3cce0244_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 74, "offset": 2883}, "start": {"col": 21, "line": 74, "offset": 2870}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 74, "offset": 2895}, "start": {"col": 35, "line": 74, "offset": 2884}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 74, "offset": 2964}, "start": {"col": 111, "line": 74, "offset": 2960}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_54e.cs", "start": {"col": 21, "line": 74, "offset": 2870}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 42, "offset": 1707}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 42, "offset": 1707}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_61a.cs", "start": {"col": 21, "line": 42, "offset": 1608}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 42, "offset": 1702}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_61a.cs", "start": {"col": 111, "line": 42, "offset": 1698}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "0ed3aa8406512f6a788eb91ac6830397eae8ecbb4b7f549204dc64e058e378d23fd69228e21dda3ef304765cb4e2298ae35fd73e01d3dbd7f9d38eecfa6a6c8f_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 42, "offset": 1621}, "start": {"col": 21, "line": 42, "offset": 1608}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 42, "offset": 1633}, "start": {"col": 35, "line": 42, "offset": 1622}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 42, "offset": 1702}, "propagated_value": {"svalue_abstract_content": "CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_61b.BadSource(req resp)", "svalue_end": {"col": 104, "line": 32, "offset": 1159}, "svalue_start": {"col": 23, "line": 32, "offset": 1078}}, "start": {"col": 111, "line": 42, "offset": 1698}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_61a.cs", "start": {"col": 21, "line": 42, "offset": 1608}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 81, "offset": 3265}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 81, "offset": 3265}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_61a.cs", "start": {"col": 21, "line": 81, "offset": 3166}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 81, "offset": 3260}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_61a.cs", "start": {"col": 111, "line": 81, "offset": 3256}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "0ed3aa8406512f6a788eb91ac6830397eae8ecbb4b7f549204dc64e058e378d23fd69228e21dda3ef304765cb4e2298ae35fd73e01d3dbd7f9d38eecfa6a6c8f_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 81, "offset": 3179}, "start": {"col": 21, "line": 81, "offset": 3166}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 81, "offset": 3191}, "start": {"col": 35, "line": 81, "offset": 3180}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 81, "offset": 3260}, "propagated_value": {"svalue_abstract_content": "CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_61b.GoodG2BSource(req resp)", "svalue_end": {"col": 108, "line": 71, "offset": 2717}, "svalue_start": {"col": 23, "line": 71, "offset": 2632}}, "start": {"col": 111, "line": 81, "offset": 3256}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_61a.cs", "start": {"col": 21, "line": 81, "offset": 3166}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 42, "offset": 1654}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 42, "offset": 1654}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_66b.cs", "start": {"col": 21, "line": 42, "offset": 1555}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 42, "offset": 1649}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_66b.cs", "start": {"col": 111, "line": 42, "offset": 1645}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "fab7dff9021e149482575a9294c204f6c4fc4a3bd168a5f4e20f0e464aad8db5fceb42c72eeffd96636ce58382cce71894f4df7095683fada0560204155a1364_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 42, "offset": 1568}, "start": {"col": 21, "line": 42, "offset": 1555}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 42, "offset": 1580}, "start": {"col": 35, "line": 42, "offset": 1569}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 42, "offset": 1649}, "start": {"col": 111, "line": 42, "offset": 1645}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_66b.cs", "start": {"col": 21, "line": 42, "offset": 1555}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 76, "offset": 3014}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 76, "offset": 3014}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_66b.cs", "start": {"col": 21, "line": 76, "offset": 2915}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 76, "offset": 3009}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_66b.cs", "start": {"col": 111, "line": 76, "offset": 3005}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "fab7dff9021e149482575a9294c204f6c4fc4a3bd168a5f4e20f0e464aad8db5fceb42c72eeffd96636ce58382cce71894f4df7095683fada0560204155a1364_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 76, "offset": 2928}, "start": {"col": 21, "line": 76, "offset": 2915}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 76, "offset": 2940}, "start": {"col": 35, "line": 76, "offset": 2929}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 76, "offset": 3009}, "start": {"col": 111, "line": 76, "offset": 3005}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_66b.cs", "start": {"col": 21, "line": 76, "offset": 2915}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 42, "offset": 1733}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 42, "offset": 1733}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_67b.cs", "start": {"col": 21, "line": 42, "offset": 1634}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 42, "offset": 1728}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_67b.cs", "start": {"col": 111, "line": 42, "offset": 1724}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "9aeda63c6c835cac5e76b456ec17490faafdb99e21143134839a686ad8642f9da14dd4e06a90c0d9c582e61fafecaa1aaee9636b933e99176c18aa564afa3ceb_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 42, "offset": 1647}, "start": {"col": 21, "line": 42, "offset": 1634}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 42, "offset": 1659}, "start": {"col": 35, "line": 42, "offset": 1648}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 42, "offset": 1728}, "propagated_value": {"svalue_abstract_content": "dataContainer.containerOne", "svalue_end": {"col": 49, "line": 32, "offset": 1185}, "svalue_start": {"col": 23, "line": 32, "offset": 1159}}, "start": {"col": 111, "line": 42, "offset": 1724}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_67b.cs", "start": {"col": 21, "line": 42, "offset": 1634}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 76, "offset": 3173}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 76, "offset": 3173}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_67b.cs", "start": {"col": 21, "line": 76, "offset": 3074}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 76, "offset": 3168}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_67b.cs", "start": {"col": 111, "line": 76, "offset": 3164}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "9aeda63c6c835cac5e76b456ec17490faafdb99e21143134839a686ad8642f9da14dd4e06a90c0d9c582e61fafecaa1aaee9636b933e99176c18aa564afa3ceb_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 76, "offset": 3087}, "start": {"col": 21, "line": 76, "offset": 3074}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 76, "offset": 3099}, "start": {"col": 35, "line": 76, "offset": 3088}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 76, "offset": 3168}, "propagated_value": {"svalue_abstract_content": "dataContainer.containerOne", "svalue_end": {"col": 49, "line": 66, "offset": 2625}, "svalue_start": {"col": 23, "line": 66, "offset": 2599}}, "start": {"col": 111, "line": 76, "offset": 3164}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_67b.cs", "start": {"col": 21, "line": 76, "offset": 3074}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 42, "offset": 1703}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 42, "offset": 1703}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_68b.cs", "start": {"col": 21, "line": 42, "offset": 1604}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 42, "offset": 1698}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_68b.cs", "start": {"col": 111, "line": 42, "offset": 1694}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "4a3141670212de7e1364983ee2fbf2d41d6782dcdcfee856b241498cfe76fead489485c3ddf6d4cba73978e42709148cfdf13cc1c07a497d1f16a20641fc3795_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 42, "offset": 1617}, "start": {"col": 21, "line": 42, "offset": 1604}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 42, "offset": 1629}, "start": {"col": 35, "line": 42, "offset": 1618}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 42, "offset": 1698}, "propagated_value": {"svalue_abstract_content": "CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_68a.data", "svalue_end": {"col": 88, "line": 32, "offset": 1155}, "svalue_start": {"col": 23, "line": 32, "offset": 1090}}, "start": {"col": 111, "line": 42, "offset": 1694}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_68b.cs", "start": {"col": 21, "line": 42, "offset": 1604}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 76, "offset": 3095}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 76, "offset": 3095}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_68b.cs", "start": {"col": 21, "line": 76, "offset": 2996}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 76, "offset": 3090}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_68b.cs", "start": {"col": 111, "line": 76, "offset": 3086}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "4a3141670212de7e1364983ee2fbf2d41d6782dcdcfee856b241498cfe76fead489485c3ddf6d4cba73978e42709148cfdf13cc1c07a497d1f16a20641fc3795_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 76, "offset": 3009}, "start": {"col": 21, "line": 76, "offset": 2996}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 76, "offset": 3021}, "start": {"col": 35, "line": 76, "offset": 3010}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 76, "offset": 3090}, "propagated_value": {"svalue_abstract_content": "CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_68a.data", "svalue_end": {"col": 88, "line": 66, "offset": 2547}, "svalue_start": {"col": 23, "line": 66, "offset": 2482}}, "start": {"col": 111, "line": 76, "offset": 3086}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_68b.cs", "start": {"col": 21, "line": 76, "offset": 2996}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 43, "offset": 1676}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "data", "location": {"end": {"col": 20, "line": 33, "offset": 1107}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_71b.cs", "start": {"col": 16, "line": 33, "offset": 1103}}}], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 43, "offset": 1676}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_71b.cs", "start": {"col": 21, "line": 43, "offset": 1577}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 41, "line": 33, "offset": 1128}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_71b.cs", "start": {"col": 23, "line": 33, "offset": 1110}}, "(string)dataObject"]]}, "engine_kind": "OSS", "fingerprint": "4252cae8857ef9e4a03e8c8a61ed7a476232a7563b963cc33f8dde7f43aa867bbbf5fd806d0b41e5eac2a2e6e89b5f7d923cf749080e9ccabd25f9c7cb69d966_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 43, "offset": 1590}, "start": {"col": 21, "line": 43, "offset": 1577}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 43, "offset": 1602}, "start": {"col": 35, "line": 43, "offset": 1591}}, "$X": {"abstract_content": "(string dataObject", "end": {"col": 41, "line": 33, "offset": 1128}, "start": {"col": 23, "line": 33, "offset": 1110}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_71b.cs", "start": {"col": 21, "line": 43, "offset": 1577}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 77, "offset": 3041}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "data", "location": {"end": {"col": 20, "line": 67, "offset": 2472}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_71b.cs", "start": {"col": 16, "line": 67, "offset": 2468}}}], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 77, "offset": 3041}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_71b.cs", "start": {"col": 21, "line": 77, "offset": 2942}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 41, "line": 67, "offset": 2493}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_71b.cs", "start": {"col": 23, "line": 67, "offset": 2475}}, "(string)dataObject"]]}, "engine_kind": "OSS", "fingerprint": "4252cae8857ef9e4a03e8c8a61ed7a476232a7563b963cc33f8dde7f43aa867bbbf5fd806d0b41e5eac2a2e6e89b5f7d923cf749080e9ccabd25f9c7cb69d966_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 77, "offset": 2955}, "start": {"col": 21, "line": 77, "offset": 2942}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 77, "offset": 2967}, "start": {"col": 35, "line": 77, "offset": 2956}}, "$X": {"abstract_content": "(string dataObject", "end": {"col": 41, "line": 67, "offset": 2493}, "start": {"col": 23, "line": 67, "offset": 2475}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_71b.cs", "start": {"col": 21, "line": 77, "offset": 2942}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 43, "offset": 1702}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "data", "location": {"end": {"col": 20, "line": 33, "offset": 1126}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_72b.cs", "start": {"col": 16, "line": 33, "offset": 1122}}}], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 43, "offset": 1702}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_72b.cs", "start": {"col": 21, "line": 43, "offset": 1603}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 48, "line": 33, "offset": 1154}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_72b.cs", "start": {"col": 23, "line": 33, "offset": 1129}}, "(string) dataHashtable[2]"]]}, "engine_kind": "OSS", "fingerprint": "dcb5368c010881deae46490fff989ad9d0ce00bb0977aac9710c6e2e1692c5fb7c0ff7105025ec266fe7e2e2b353a8f83d3d26abebb131ef2444a011aa9750fb_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 43, "offset": 1616}, "start": {"col": 21, "line": 43, "offset": 1603}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 43, "offset": 1628}, "start": {"col": 35, "line": 43, "offset": 1617}}, "$X": {"abstract_content": "(string dataHashtable[[2]]", "end": {"col": 48, "line": 33, "offset": 1154}, "start": {"col": 23, "line": 33, "offset": 1129}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_72b.cs", "start": {"col": 21, "line": 43, "offset": 1603}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 77, "offset": 3080}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "data", "location": {"end": {"col": 20, "line": 67, "offset": 2504}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_72b.cs", "start": {"col": 16, "line": 67, "offset": 2500}}}], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 77, "offset": 3080}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_72b.cs", "start": {"col": 21, "line": 77, "offset": 2981}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 48, "line": 67, "offset": 2532}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_72b.cs", "start": {"col": 23, "line": 67, "offset": 2507}}, "(string) dataHashtable[2]"]]}, "engine_kind": "OSS", "fingerprint": "dcb5368c010881deae46490fff989ad9d0ce00bb0977aac9710c6e2e1692c5fb7c0ff7105025ec266fe7e2e2b353a8f83d3d26abebb131ef2444a011aa9750fb_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 77, "offset": 2994}, "start": {"col": 21, "line": 77, "offset": 2981}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 77, "offset": 3006}, "start": {"col": 35, "line": 77, "offset": 2995}}, "$X": {"abstract_content": "(string dataHashtable[[2]]", "end": {"col": 48, "line": 67, "offset": 2532}, "start": {"col": 23, "line": 67, "offset": 2507}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_72b.cs", "start": {"col": 21, "line": 77, "offset": 2981}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 43, "offset": 1721}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 43, "offset": 1721}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_73b.cs", "start": {"col": 21, "line": 43, "offset": 1622}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 43, "offset": 1716}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_73b.cs", "start": {"col": 111, "line": 43, "offset": 1712}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "a3b920a939652b88e8779f622e8b0158ebe0772aefd8bf8b9458637384c16dddc8f3f84f8f28ccb614a100fb28b7780eb02bb96d0bb366fa4d1de3cebfce85e9_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 43, "offset": 1635}, "start": {"col": 21, "line": 43, "offset": 1622}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 43, "offset": 1647}, "start": {"col": 35, "line": 43, "offset": 1636}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 43, "offset": 1716}, "propagated_value": {"svalue_abstract_content": "dataLinkedList.Last.Value", "svalue_end": {"col": 48, "line": 33, "offset": 1173}, "svalue_start": {"col": 23, "line": 33, "offset": 1148}}, "start": {"col": 111, "line": 43, "offset": 1712}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_73b.cs", "start": {"col": 21, "line": 43, "offset": 1622}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 77, "offset": 3109}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 77, "offset": 3109}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_73b.cs", "start": {"col": 21, "line": 77, "offset": 3010}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 77, "offset": 3104}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_73b.cs", "start": {"col": 111, "line": 77, "offset": 3100}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "a3b920a939652b88e8779f622e8b0158ebe0772aefd8bf8b9458637384c16dddc8f3f84f8f28ccb614a100fb28b7780eb02bb96d0bb366fa4d1de3cebfce85e9_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 77, "offset": 3023}, "start": {"col": 21, "line": 77, "offset": 3010}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 77, "offset": 3035}, "start": {"col": 35, "line": 77, "offset": 3024}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 77, "offset": 3104}, "propagated_value": {"svalue_abstract_content": "dataLinkedList.Last.Value", "svalue_end": {"col": 48, "line": 67, "offset": 2561}, "svalue_start": {"col": 23, "line": 67, "offset": 2536}}, "start": {"col": 111, "line": 77, "offset": 3100}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_73b.cs", "start": {"col": 21, "line": 77, "offset": 3010}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 43, "offset": 1717}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 43, "offset": 1717}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_74b.cs", "start": {"col": 21, "line": 43, "offset": 1618}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 43, "offset": 1712}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_74b.cs", "start": {"col": 111, "line": 43, "offset": 1708}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "bee8dd1fbc4bf6daab4dac62c995d990bab195aec16547dc14a12ab7e55529d61ce74dafd730476fc7ee891bfe1a7924062befdc46f56fabcf79bb8476e58165_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 43, "offset": 1631}, "start": {"col": 21, "line": 43, "offset": 1618}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 43, "offset": 1643}, "start": {"col": 35, "line": 43, "offset": 1632}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 43, "offset": 1712}, "start": {"col": 111, "line": 43, "offset": 1708}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_74b.cs", "start": {"col": 21, "line": 43, "offset": 1618}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 77, "offset": 3102}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 77, "offset": 3102}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_74b.cs", "start": {"col": 21, "line": 77, "offset": 3003}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 77, "offset": 3097}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_74b.cs", "start": {"col": 111, "line": 77, "offset": 3093}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "bee8dd1fbc4bf6daab4dac62c995d990bab195aec16547dc14a12ab7e55529d61ce74dafd730476fc7ee891bfe1a7924062befdc46f56fabcf79bb8476e58165_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 77, "offset": 3016}, "start": {"col": 21, "line": 77, "offset": 3003}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 77, "offset": 3028}, "start": {"col": 35, "line": 77, "offset": 3017}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 77, "offset": 3097}, "start": {"col": 111, "line": 77, "offset": 3093}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_74b.cs", "start": {"col": 21, "line": 77, "offset": 3003}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 55, "line": 51, "offset": 1768}, "extra": {"engine_kind": "OSS", "fingerprint": "e82746e6216c179110e8358706dcf9986405c0a67fe2369850dd128fdcaae97ed1524873311e72b8abd2742cbf91d8ec80ddf273bdafefae2e7cb03c9e8f9109_0", "is_ignored": false, "lines": "            BinaryFormatter bf = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_75a.cs", "start": {"col": 13, "line": 51, "offset": 1726}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 55, "line": 90, "offset": 3132}, "extra": {"engine_kind": "OSS", "fingerprint": "e82746e6216c179110e8358706dcf9986405c0a67fe2369850dd128fdcaae97ed1524873311e72b8abd2742cbf91d8ec80ddf273bdafefae2e7cb03c9e8f9109_1", "is_ignored": false, "lines": "            BinaryFormatter bf = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_75a.cs", "start": {"col": 13, "line": 90, "offset": 3090}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 55, "line": 122, "offset": 4326}, "extra": {"engine_kind": "OSS", "fingerprint": "e82746e6216c179110e8358706dcf9986405c0a67fe2369850dd128fdcaae97ed1524873311e72b8abd2742cbf91d8ec80ddf273bdafefae2e7cb03c9e8f9109_2", "is_ignored": false, "lines": "            BinaryFormatter bf = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_75a.cs", "start": {"col": 13, "line": 122, "offset": 4284}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 48, "line": 38, "offset": 1293}, "extra": {"engine_kind": "OSS", "fingerprint": "b8f48abf4f93cafec125e4bafbcc898a3e0b92e93f800e988bae75667e414a19ccc64a9ef46d4a4d01e676b0a61743ed9a6f18b1362bc368d7899d299c46ba56_0", "is_ignored": false, "lines": "            var binForm = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_75b.cs", "start": {"col": 17, "line": 38, "offset": 1262}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 54, "offset": 2161}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "data", "location": {"end": {"col": 21, "line": 43, "offset": 1517}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_75b.cs", "start": {"col": 17, "line": 43, "offset": 1513}}}], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 54, "offset": 2161}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_75b.cs", "start": {"col": 25, "line": 54, "offset": 2062}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 62, "line": 43, "offset": 1558}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_75b.cs", "start": {"col": 24, "line": 43, "offset": 1520}}, "(string)binForm.Deserialize(memStream)"]]}, "engine_kind": "OSS", "fingerprint": "87def724271508224529cc017bb8ea1dc5da4008f7b8d0c98d5c1252cedc6699bf5d6ef04c08392880edd2b9fb48f0224e113b4c4a9f9332bd137e7692f4548c_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 54, "offset": 2075}, "start": {"col": 25, "line": 54, "offset": 2062}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 54, "offset": 2087}, "start": {"col": 39, "line": 54, "offset": 2076}}, "$X": {"abstract_content": "(string binForm.Deserialize(memStream)", "end": {"col": 62, "line": 43, "offset": 1558}, "start": {"col": 24, "line": 43, "offset": 1520}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_75b.cs", "start": {"col": 25, "line": 54, "offset": 2062}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 48, "line": 86, "offset": 3302}, "extra": {"engine_kind": "OSS", "fingerprint": "b8f48abf4f93cafec125e4bafbcc898a3e0b92e93f800e988bae75667e414a19ccc64a9ef46d4a4d01e676b0a61743ed9a6f18b1362bc368d7899d299c46ba56_1", "is_ignored": false, "lines": "            var binForm = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_75b.cs", "start": {"col": 17, "line": 86, "offset": 3271}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 102, "offset": 4170}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "data", "location": {"end": {"col": 21, "line": 91, "offset": 3526}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_75b.cs", "start": {"col": 17, "line": 91, "offset": 3522}}}], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 102, "offset": 4170}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_75b.cs", "start": {"col": 25, "line": 102, "offset": 4071}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 62, "line": 91, "offset": 3567}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_75b.cs", "start": {"col": 24, "line": 91, "offset": 3529}}, "(string)binForm.Deserialize(memStream)"]]}, "engine_kind": "OSS", "fingerprint": "87def724271508224529cc017bb8ea1dc5da4008f7b8d0c98d5c1252cedc6699bf5d6ef04c08392880edd2b9fb48f0224e113b4c4a9f9332bd137e7692f4548c_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 102, "offset": 4084}, "start": {"col": 25, "line": 102, "offset": 4071}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 102, "offset": 4096}, "start": {"col": 39, "line": 102, "offset": 4085}}, "$X": {"abstract_content": "(string binForm.Deserialize(memStream)", "end": {"col": 62, "line": 91, "offset": 3567}, "start": {"col": 24, "line": 91, "offset": 3529}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_75b.cs", "start": {"col": 25, "line": 102, "offset": 4071}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 48, "line": 132, "offset": 5286}, "extra": {"engine_kind": "OSS", "fingerprint": "b8f48abf4f93cafec125e4bafbcc898a3e0b92e93f800e988bae75667e414a19ccc64a9ef46d4a4d01e676b0a61743ed9a6f18b1362bc368d7899d299c46ba56_2", "is_ignored": false, "lines": "            var binForm = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_75b.cs", "start": {"col": 17, "line": 132, "offset": 5255}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 41, "offset": 1639}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 41, "offset": 1639}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_81_bad.cs", "start": {"col": 21, "line": 41, "offset": 1540}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 41, "offset": 1634}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_81_bad.cs", "start": {"col": 111, "line": 41, "offset": 1630}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "9092d36bcdf06c1618f42b272f79795c997f3dade61833303a7e3a5cdda3d5f7a89cd540333783300a29bd4224808062a69feda88807c15b81eaea0eead27a7c_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 41, "offset": 1553}, "start": {"col": 21, "line": 41, "offset": 1540}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 41, "offset": 1565}, "start": {"col": 35, "line": 41, "offset": 1554}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 41, "offset": 1634}, "start": {"col": 111, "line": 41, "offset": 1630}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_81_bad.cs", "start": {"col": 21, "line": 41, "offset": 1540}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 42, "offset": 1654}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 42, "offset": 1654}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_81_goodG2B.cs", "start": {"col": 21, "line": 42, "offset": 1555}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 42, "offset": 1649}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_81_goodG2B.cs", "start": {"col": 111, "line": 42, "offset": 1645}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "5b2ca83c8a9bdb2cee3079db8d4f4f91b734f60f972166eaaa77521361b9f18a69c72482c175bff928908a99bf7f8bb94c9cf899f2b125b8cf92f6ea1f01bc4a_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 42, "offset": 1568}, "start": {"col": 21, "line": 42, "offset": 1555}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 42, "offset": 1580}, "start": {"col": 35, "line": 42, "offset": 1569}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 42, "offset": 1649}, "start": {"col": 111, "line": 42, "offset": 1645}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteNonQuery_81_goodG2B.cs", "start": {"col": 21, "line": 42, "offset": 1555}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 52, "offset": 1852}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 52, "offset": 1852}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_01.cs", "start": {"col": 21, "line": 52, "offset": 1779}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 52, "offset": 1847}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_01.cs", "start": {"col": 85, "line": 52, "offset": 1843}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "5bfa36f58ca498a773073a0987e2b2a04090ff55188bed7185a9aa93ae1ed5fe4d29759ad4cf37388805df034e43402a65d79ae7ee45e60c7b5b0ee20a008acc_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 52, "offset": 1792}, "start": {"col": 21, "line": 52, "offset": 1779}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 52, "offset": 1804}, "start": {"col": 35, "line": 52, "offset": 1793}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 52, "offset": 1847}, "start": {"col": 85, "line": 52, "offset": 1843}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_01.cs", "start": {"col": 21, "line": 52, "offset": 1779}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 63, "offset": 2259}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 63, "offset": 2259}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_02.cs", "start": {"col": 25, "line": 63, "offset": 2186}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 63, "offset": 2254}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_02.cs", "start": {"col": 89, "line": 63, "offset": 2250}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "e9809eaca1ec2516cf29bfdf761aa2ec5f523b04ac2c2ebda4c2cae38d23c64a2f58b928f749e39bc14e0a7af95aa173cb5dfe1d3e469fc60363e7df8ffee6dd_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 63, "offset": 2199}, "start": {"col": 25, "line": 63, "offset": 2186}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 63, "offset": 2211}, "start": {"col": 39, "line": 63, "offset": 2200}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 63, "offset": 2254}, "start": {"col": 89, "line": 63, "offset": 2250}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_02.cs", "start": {"col": 25, "line": 63, "offset": 2186}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 105, "offset": 3893}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 105, "offset": 3893}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_02.cs", "start": {"col": 25, "line": 105, "offset": 3820}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 105, "offset": 3888}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_02.cs", "start": {"col": 89, "line": 105, "offset": 3884}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "e9809eaca1ec2516cf29bfdf761aa2ec5f523b04ac2c2ebda4c2cae38d23c64a2f58b928f749e39bc14e0a7af95aa173cb5dfe1d3e469fc60363e7df8ffee6dd_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 105, "offset": 3833}, "start": {"col": 25, "line": 105, "offset": 3820}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 105, "offset": 3845}, "start": {"col": 39, "line": 105, "offset": 3834}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 105, "offset": 3888}, "start": {"col": 89, "line": 105, "offset": 3884}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_02.cs", "start": {"col": 25, "line": 105, "offset": 3820}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 146, "offset": 5497}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 146, "offset": 5497}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_02.cs", "start": {"col": 25, "line": 146, "offset": 5424}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 146, "offset": 5492}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_02.cs", "start": {"col": 89, "line": 146, "offset": 5488}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "e9809eaca1ec2516cf29bfdf761aa2ec5f523b04ac2c2ebda4c2cae38d23c64a2f58b928f749e39bc14e0a7af95aa173cb5dfe1d3e469fc60363e7df8ffee6dd_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 146, "offset": 5437}, "start": {"col": 25, "line": 146, "offset": 5424}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 146, "offset": 5449}, "start": {"col": 39, "line": 146, "offset": 5438}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 146, "offset": 5492}, "start": {"col": 89, "line": 146, "offset": 5488}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_02.cs", "start": {"col": 25, "line": 146, "offset": 5424}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 63, "offset": 2258}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 63, "offset": 2258}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_03.cs", "start": {"col": 25, "line": 63, "offset": 2185}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 63, "offset": 2253}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_03.cs", "start": {"col": 89, "line": 63, "offset": 2249}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "c8217675580176fdd6e78b6748573db8cd10d1cb7ae779f455cbd5c59a6c1fc0e84946a8b6b2e68da6c827af1e20a79f411dadbdc869c212e7e45fded08b94eb_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 63, "offset": 2198}, "start": {"col": 25, "line": 63, "offset": 2185}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 63, "offset": 2210}, "start": {"col": 39, "line": 63, "offset": 2199}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 63, "offset": 2253}, "start": {"col": 89, "line": 63, "offset": 2249}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_03.cs", "start": {"col": 25, "line": 63, "offset": 2185}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 105, "offset": 3890}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 105, "offset": 3890}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_03.cs", "start": {"col": 25, "line": 105, "offset": 3817}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 105, "offset": 3885}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_03.cs", "start": {"col": 89, "line": 105, "offset": 3881}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "c8217675580176fdd6e78b6748573db8cd10d1cb7ae779f455cbd5c59a6c1fc0e84946a8b6b2e68da6c827af1e20a79f411dadbdc869c212e7e45fded08b94eb_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 105, "offset": 3830}, "start": {"col": 25, "line": 105, "offset": 3817}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 105, "offset": 3842}, "start": {"col": 39, "line": 105, "offset": 3831}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 105, "offset": 3885}, "start": {"col": 89, "line": 105, "offset": 3881}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_03.cs", "start": {"col": 25, "line": 105, "offset": 3817}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 146, "offset": 5494}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 146, "offset": 5494}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_03.cs", "start": {"col": 25, "line": 146, "offset": 5421}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 146, "offset": 5489}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_03.cs", "start": {"col": 89, "line": 146, "offset": 5485}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "c8217675580176fdd6e78b6748573db8cd10d1cb7ae779f455cbd5c59a6c1fc0e84946a8b6b2e68da6c827af1e20a79f411dadbdc869c212e7e45fded08b94eb_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 146, "offset": 5434}, "start": {"col": 25, "line": 146, "offset": 5421}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 146, "offset": 5446}, "start": {"col": 39, "line": 146, "offset": 5435}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 146, "offset": 5489}, "start": {"col": 89, "line": 146, "offset": 5485}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_03.cs", "start": {"col": 25, "line": 146, "offset": 5421}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 70, "offset": 2602}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 70, "offset": 2602}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_04.cs", "start": {"col": 25, "line": 70, "offset": 2529}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 70, "offset": 2597}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_04.cs", "start": {"col": 89, "line": 70, "offset": 2593}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "ac34329a8601094ee98e5e16fe01452d6c9027db672a13401430d69f7e03ccab155d78def4154835303b0a2263658ad1ecf081ca1f9c044a0d6e67cc2a72c1a1_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 70, "offset": 2542}, "start": {"col": 25, "line": 70, "offset": 2529}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 70, "offset": 2554}, "start": {"col": 39, "line": 70, "offset": 2543}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 70, "offset": 2597}, "start": {"col": 89, "line": 70, "offset": 2593}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_04.cs", "start": {"col": 25, "line": 70, "offset": 2529}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 112, "offset": 4292}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 112, "offset": 4292}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_04.cs", "start": {"col": 25, "line": 112, "offset": 4219}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 112, "offset": 4287}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_04.cs", "start": {"col": 89, "line": 112, "offset": 4283}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "ac34329a8601094ee98e5e16fe01452d6c9027db672a13401430d69f7e03ccab155d78def4154835303b0a2263658ad1ecf081ca1f9c044a0d6e67cc2a72c1a1_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 112, "offset": 4232}, "start": {"col": 25, "line": 112, "offset": 4219}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 112, "offset": 4244}, "start": {"col": 39, "line": 112, "offset": 4233}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 112, "offset": 4287}, "start": {"col": 89, "line": 112, "offset": 4283}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_04.cs", "start": {"col": 25, "line": 112, "offset": 4219}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 153, "offset": 5924}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 153, "offset": 5924}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_04.cs", "start": {"col": 25, "line": 153, "offset": 5851}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 153, "offset": 5919}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_04.cs", "start": {"col": 89, "line": 153, "offset": 5915}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "ac34329a8601094ee98e5e16fe01452d6c9027db672a13401430d69f7e03ccab155d78def4154835303b0a2263658ad1ecf081ca1f9c044a0d6e67cc2a72c1a1_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 153, "offset": 5864}, "start": {"col": 25, "line": 153, "offset": 5851}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 153, "offset": 5876}, "start": {"col": 39, "line": 153, "offset": 5865}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 153, "offset": 5919}, "start": {"col": 89, "line": 153, "offset": 5915}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_04.cs", "start": {"col": 25, "line": 153, "offset": 5851}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 69, "offset": 2595}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 69, "offset": 2595}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_05.cs", "start": {"col": 25, "line": 69, "offset": 2522}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 69, "offset": 2590}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_05.cs", "start": {"col": 89, "line": 69, "offset": 2586}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "7a220e188326fc959f0345d9209e6fa3deddf3de52d71d5a85f6d63daebf4b08a52987e734aed29a98c40432573e749953ccac9d597592ffca0e7169d5958a1d_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 69, "offset": 2535}, "start": {"col": 25, "line": 69, "offset": 2522}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 69, "offset": 2547}, "start": {"col": 39, "line": 69, "offset": 2536}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 69, "offset": 2590}, "start": {"col": 89, "line": 69, "offset": 2586}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_05.cs", "start": {"col": 25, "line": 69, "offset": 2522}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 111, "offset": 4257}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 111, "offset": 4257}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_05.cs", "start": {"col": 25, "line": 111, "offset": 4184}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 111, "offset": 4252}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_05.cs", "start": {"col": 89, "line": 111, "offset": 4248}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "7a220e188326fc959f0345d9209e6fa3deddf3de52d71d5a85f6d63daebf4b08a52987e734aed29a98c40432573e749953ccac9d597592ffca0e7169d5958a1d_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 111, "offset": 4197}, "start": {"col": 25, "line": 111, "offset": 4184}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 111, "offset": 4209}, "start": {"col": 39, "line": 111, "offset": 4198}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 111, "offset": 4252}, "start": {"col": 89, "line": 111, "offset": 4248}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_05.cs", "start": {"col": 25, "line": 111, "offset": 4184}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 152, "offset": 5875}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 152, "offset": 5875}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_05.cs", "start": {"col": 25, "line": 152, "offset": 5802}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 152, "offset": 5870}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_05.cs", "start": {"col": 89, "line": 152, "offset": 5866}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "7a220e188326fc959f0345d9209e6fa3deddf3de52d71d5a85f6d63daebf4b08a52987e734aed29a98c40432573e749953ccac9d597592ffca0e7169d5958a1d_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 152, "offset": 5815}, "start": {"col": 25, "line": 152, "offset": 5802}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 152, "offset": 5827}, "start": {"col": 39, "line": 152, "offset": 5816}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 152, "offset": 5870}, "start": {"col": 89, "line": 152, "offset": 5866}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_05.cs", "start": {"col": 25, "line": 152, "offset": 5802}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 68, "offset": 2538}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 68, "offset": 2538}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_06.cs", "start": {"col": 25, "line": 68, "offset": 2465}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 68, "offset": 2533}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_06.cs", "start": {"col": 89, "line": 68, "offset": 2529}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "80c63630174a606d914d4e37e751a5712e51f20800aebe23c27d3e14e81277c7f3e5fea014d4358e03061b9829c1f3a7a73d6ca6f1ab8ebcecbc90bd37531cb7_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 68, "offset": 2478}, "start": {"col": 25, "line": 68, "offset": 2465}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 68, "offset": 2490}, "start": {"col": 39, "line": 68, "offset": 2479}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 68, "offset": 2533}, "start": {"col": 89, "line": 68, "offset": 2529}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_06.cs", "start": {"col": 25, "line": 68, "offset": 2465}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 110, "offset": 4238}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 110, "offset": 4238}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_06.cs", "start": {"col": 25, "line": 110, "offset": 4165}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 110, "offset": 4233}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_06.cs", "start": {"col": 89, "line": 110, "offset": 4229}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "80c63630174a606d914d4e37e751a5712e51f20800aebe23c27d3e14e81277c7f3e5fea014d4358e03061b9829c1f3a7a73d6ca6f1ab8ebcecbc90bd37531cb7_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 110, "offset": 4178}, "start": {"col": 25, "line": 110, "offset": 4165}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 110, "offset": 4190}, "start": {"col": 39, "line": 110, "offset": 4179}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 110, "offset": 4233}, "start": {"col": 89, "line": 110, "offset": 4229}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_06.cs", "start": {"col": 25, "line": 110, "offset": 4165}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 151, "offset": 5876}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 151, "offset": 5876}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_06.cs", "start": {"col": 25, "line": 151, "offset": 5803}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 151, "offset": 5871}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_06.cs", "start": {"col": 89, "line": 151, "offset": 5867}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "80c63630174a606d914d4e37e751a5712e51f20800aebe23c27d3e14e81277c7f3e5fea014d4358e03061b9829c1f3a7a73d6ca6f1ab8ebcecbc90bd37531cb7_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 151, "offset": 5816}, "start": {"col": 25, "line": 151, "offset": 5803}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 151, "offset": 5828}, "start": {"col": 39, "line": 151, "offset": 5817}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 151, "offset": 5871}, "start": {"col": 89, "line": 151, "offset": 5867}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_06.cs", "start": {"col": 25, "line": 151, "offset": 5803}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 68, "offset": 2542}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 68, "offset": 2542}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_07.cs", "start": {"col": 25, "line": 68, "offset": 2469}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 68, "offset": 2537}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_07.cs", "start": {"col": 89, "line": 68, "offset": 2533}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "9a434d3cb81822d0c1a507982425aab17dae2ee6aaee3013f32cd86f99205840370a678ae16dd7c73b6ce77abf1b7dcf4b3abea460d98126c705c5438fa03602_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 68, "offset": 2482}, "start": {"col": 25, "line": 68, "offset": 2469}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 68, "offset": 2494}, "start": {"col": 39, "line": 68, "offset": 2483}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 68, "offset": 2537}, "start": {"col": 89, "line": 68, "offset": 2533}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_07.cs", "start": {"col": 25, "line": 68, "offset": 2469}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 110, "offset": 4214}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 110, "offset": 4214}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_07.cs", "start": {"col": 25, "line": 110, "offset": 4141}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 110, "offset": 4209}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_07.cs", "start": {"col": 89, "line": 110, "offset": 4205}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "9a434d3cb81822d0c1a507982425aab17dae2ee6aaee3013f32cd86f99205840370a678ae16dd7c73b6ce77abf1b7dcf4b3abea460d98126c705c5438fa03602_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 110, "offset": 4154}, "start": {"col": 25, "line": 110, "offset": 4141}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 110, "offset": 4166}, "start": {"col": 39, "line": 110, "offset": 4155}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 110, "offset": 4209}, "start": {"col": 89, "line": 110, "offset": 4205}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_07.cs", "start": {"col": 25, "line": 110, "offset": 4141}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 151, "offset": 5838}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 151, "offset": 5838}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_07.cs", "start": {"col": 25, "line": 151, "offset": 5765}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 151, "offset": 5833}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_07.cs", "start": {"col": 89, "line": 151, "offset": 5829}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "9a434d3cb81822d0c1a507982425aab17dae2ee6aaee3013f32cd86f99205840370a678ae16dd7c73b6ce77abf1b7dcf4b3abea460d98126c705c5438fa03602_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 151, "offset": 5778}, "start": {"col": 25, "line": 151, "offset": 5765}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 151, "offset": 5790}, "start": {"col": 39, "line": 151, "offset": 5779}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 151, "offset": 5833}, "start": {"col": 89, "line": 151, "offset": 5829}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_07.cs", "start": {"col": 25, "line": 151, "offset": 5765}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 76, "offset": 2674}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 76, "offset": 2674}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_08.cs", "start": {"col": 25, "line": 76, "offset": 2601}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 76, "offset": 2669}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_08.cs", "start": {"col": 89, "line": 76, "offset": 2665}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "a6f74b07988067ce196e466635615837ac3c9a3cf95892c9cbcbafc40e77860cc0103d2e39cd661fb4390599b9b395782408e09b9003e62b88399a27e17db9dd_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 76, "offset": 2614}, "start": {"col": 25, "line": 76, "offset": 2601}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 76, "offset": 2626}, "start": {"col": 39, "line": 76, "offset": 2615}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 76, "offset": 2669}, "start": {"col": 89, "line": 76, "offset": 2665}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_08.cs", "start": {"col": 25, "line": 76, "offset": 2601}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 118, "offset": 4372}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 118, "offset": 4372}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_08.cs", "start": {"col": 25, "line": 118, "offset": 4299}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 118, "offset": 4367}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_08.cs", "start": {"col": 89, "line": 118, "offset": 4363}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "a6f74b07988067ce196e466635615837ac3c9a3cf95892c9cbcbafc40e77860cc0103d2e39cd661fb4390599b9b395782408e09b9003e62b88399a27e17db9dd_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 118, "offset": 4312}, "start": {"col": 25, "line": 118, "offset": 4299}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 118, "offset": 4324}, "start": {"col": 39, "line": 118, "offset": 4313}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 118, "offset": 4367}, "start": {"col": 89, "line": 118, "offset": 4363}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_08.cs", "start": {"col": 25, "line": 118, "offset": 4299}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 159, "offset": 6008}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 159, "offset": 6008}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_08.cs", "start": {"col": 25, "line": 159, "offset": 5935}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 159, "offset": 6003}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_08.cs", "start": {"col": 89, "line": 159, "offset": 5999}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "a6f74b07988067ce196e466635615837ac3c9a3cf95892c9cbcbafc40e77860cc0103d2e39cd661fb4390599b9b395782408e09b9003e62b88399a27e17db9dd_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 159, "offset": 5948}, "start": {"col": 25, "line": 159, "offset": 5935}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 159, "offset": 5960}, "start": {"col": 39, "line": 159, "offset": 5949}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 159, "offset": 6003}, "start": {"col": 89, "line": 159, "offset": 5999}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_08.cs", "start": {"col": 25, "line": 159, "offset": 5935}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 63, "offset": 2335}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 63, "offset": 2335}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_09.cs", "start": {"col": 25, "line": 63, "offset": 2262}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 63, "offset": 2330}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_09.cs", "start": {"col": 89, "line": 63, "offset": 2326}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "20e13b27d36d38c13757a0076f1fed2dcd86e824d998bb4b14ef231c1d8e501b9608a678fe2d86658392c0a1e4ed865623a72e997b5cc152430ff6f534522603_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 63, "offset": 2275}, "start": {"col": 25, "line": 63, "offset": 2262}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 63, "offset": 2287}, "start": {"col": 39, "line": 63, "offset": 2276}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 63, "offset": 2330}, "start": {"col": 89, "line": 63, "offset": 2326}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_09.cs", "start": {"col": 25, "line": 63, "offset": 2262}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 105, "offset": 4045}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 105, "offset": 4045}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_09.cs", "start": {"col": 25, "line": 105, "offset": 3972}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 105, "offset": 4040}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_09.cs", "start": {"col": 89, "line": 105, "offset": 4036}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "20e13b27d36d38c13757a0076f1fed2dcd86e824d998bb4b14ef231c1d8e501b9608a678fe2d86658392c0a1e4ed865623a72e997b5cc152430ff6f534522603_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 105, "offset": 3985}, "start": {"col": 25, "line": 105, "offset": 3972}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 105, "offset": 3997}, "start": {"col": 39, "line": 105, "offset": 3986}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 105, "offset": 4040}, "start": {"col": 89, "line": 105, "offset": 4036}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_09.cs", "start": {"col": 25, "line": 105, "offset": 3972}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 146, "offset": 5687}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 146, "offset": 5687}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_09.cs", "start": {"col": 25, "line": 146, "offset": 5614}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 146, "offset": 5682}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_09.cs", "start": {"col": 89, "line": 146, "offset": 5678}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "20e13b27d36d38c13757a0076f1fed2dcd86e824d998bb4b14ef231c1d8e501b9608a678fe2d86658392c0a1e4ed865623a72e997b5cc152430ff6f534522603_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 146, "offset": 5627}, "start": {"col": 25, "line": 146, "offset": 5614}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 146, "offset": 5639}, "start": {"col": 39, "line": 146, "offset": 5628}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 146, "offset": 5682}, "start": {"col": 89, "line": 146, "offset": 5678}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_09.cs", "start": {"col": 25, "line": 146, "offset": 5614}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 63, "offset": 2295}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 63, "offset": 2295}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_10.cs", "start": {"col": 25, "line": 63, "offset": 2222}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 63, "offset": 2290}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_10.cs", "start": {"col": 89, "line": 63, "offset": 2286}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "7059a7709075bc9770c6b232be7221bf28433d40ed4f62313cb39aedaa86156e397a5792125eea693fce9cac3bc1db1615e7b028c8e0b4822fabae684cc9063c_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 63, "offset": 2235}, "start": {"col": 25, "line": 63, "offset": 2222}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 63, "offset": 2247}, "start": {"col": 39, "line": 63, "offset": 2236}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 63, "offset": 2290}, "start": {"col": 89, "line": 63, "offset": 2286}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_10.cs", "start": {"col": 25, "line": 63, "offset": 2222}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 105, "offset": 3965}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 105, "offset": 3965}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_10.cs", "start": {"col": 25, "line": 105, "offset": 3892}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 105, "offset": 3960}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_10.cs", "start": {"col": 89, "line": 105, "offset": 3956}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "7059a7709075bc9770c6b232be7221bf28433d40ed4f62313cb39aedaa86156e397a5792125eea693fce9cac3bc1db1615e7b028c8e0b4822fabae684cc9063c_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 105, "offset": 3905}, "start": {"col": 25, "line": 105, "offset": 3892}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 105, "offset": 3917}, "start": {"col": 39, "line": 105, "offset": 3906}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 105, "offset": 3960}, "start": {"col": 89, "line": 105, "offset": 3956}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_10.cs", "start": {"col": 25, "line": 105, "offset": 3892}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 146, "offset": 5587}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 146, "offset": 5587}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_10.cs", "start": {"col": 25, "line": 146, "offset": 5514}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 146, "offset": 5582}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_10.cs", "start": {"col": 89, "line": 146, "offset": 5578}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "7059a7709075bc9770c6b232be7221bf28433d40ed4f62313cb39aedaa86156e397a5792125eea693fce9cac3bc1db1615e7b028c8e0b4822fabae684cc9063c_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 146, "offset": 5527}, "start": {"col": 25, "line": 146, "offset": 5514}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 146, "offset": 5539}, "start": {"col": 39, "line": 146, "offset": 5528}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 146, "offset": 5582}, "start": {"col": 89, "line": 146, "offset": 5578}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_10.cs", "start": {"col": 25, "line": 146, "offset": 5514}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 63, "offset": 2330}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 63, "offset": 2330}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_11.cs", "start": {"col": 25, "line": 63, "offset": 2257}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 63, "offset": 2325}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_11.cs", "start": {"col": 89, "line": 63, "offset": 2321}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "8d1280470901a3540df04ac1670a49821cfa33c1c2fe66479960c35f00c7cd9c2fe8893b4ec62d491e18bb4287f5203087a158f87a8c4dd57b5e8c64a9aab3c9_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 63, "offset": 2270}, "start": {"col": 25, "line": 63, "offset": 2257}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 63, "offset": 2282}, "start": {"col": 39, "line": 63, "offset": 2271}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 63, "offset": 2325}, "start": {"col": 89, "line": 63, "offset": 2321}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_11.cs", "start": {"col": 25, "line": 63, "offset": 2257}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 105, "offset": 4036}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 105, "offset": 4036}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_11.cs", "start": {"col": 25, "line": 105, "offset": 3963}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 105, "offset": 4031}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_11.cs", "start": {"col": 89, "line": 105, "offset": 4027}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "8d1280470901a3540df04ac1670a49821cfa33c1c2fe66479960c35f00c7cd9c2fe8893b4ec62d491e18bb4287f5203087a158f87a8c4dd57b5e8c64a9aab3c9_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 105, "offset": 3976}, "start": {"col": 25, "line": 105, "offset": 3963}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 105, "offset": 3988}, "start": {"col": 39, "line": 105, "offset": 3977}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 105, "offset": 4031}, "start": {"col": 89, "line": 105, "offset": 4027}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_11.cs", "start": {"col": 25, "line": 105, "offset": 3963}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 146, "offset": 5676}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 146, "offset": 5676}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_11.cs", "start": {"col": 25, "line": 146, "offset": 5603}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 146, "offset": 5671}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_11.cs", "start": {"col": 89, "line": 146, "offset": 5667}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "8d1280470901a3540df04ac1670a49821cfa33c1c2fe66479960c35f00c7cd9c2fe8893b4ec62d491e18bb4287f5203087a158f87a8c4dd57b5e8c64a9aab3c9_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 146, "offset": 5616}, "start": {"col": 25, "line": 146, "offset": 5603}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 146, "offset": 5628}, "start": {"col": 39, "line": 146, "offset": 5617}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 146, "offset": 5671}, "start": {"col": 89, "line": 146, "offset": 5667}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_11.cs", "start": {"col": 25, "line": 146, "offset": 5603}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 62, "offset": 2196}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 62, "offset": 2196}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_12.cs", "start": {"col": 25, "line": 62, "offset": 2123}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 62, "offset": 2191}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_12.cs", "start": {"col": 89, "line": 62, "offset": 2187}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "f623206c22a1b9d1a7f5eb0b3b43ec49b23f2d410d3f3e1d563e0296ea6f97b005a9ba021f802e506b2a47f5069b1b5331336b7260d785e699e075c8ed73554d_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 62, "offset": 2136}, "start": {"col": 25, "line": 62, "offset": 2123}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 62, "offset": 2148}, "start": {"col": 39, "line": 62, "offset": 2137}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 62, "offset": 2191}, "start": {"col": 89, "line": 62, "offset": 2187}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_12.cs", "start": {"col": 25, "line": 62, "offset": 2123}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 63, "offset": 2346}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 63, "offset": 2346}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_13.cs", "start": {"col": 25, "line": 63, "offset": 2273}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 63, "offset": 2341}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_13.cs", "start": {"col": 89, "line": 63, "offset": 2337}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "2153dfc5f9389c91afa7909e484f8a359a541ec2d95a8b1aa2672220d590b40e77192561ea5147c4ef64ab0e79b945a3eb9e0300e6153ebb014e9f1407613cad_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 63, "offset": 2286}, "start": {"col": 25, "line": 63, "offset": 2273}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 63, "offset": 2298}, "start": {"col": 39, "line": 63, "offset": 2287}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 63, "offset": 2341}, "start": {"col": 89, "line": 63, "offset": 2337}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_13.cs", "start": {"col": 25, "line": 63, "offset": 2273}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 105, "offset": 4066}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 105, "offset": 4066}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_13.cs", "start": {"col": 25, "line": 105, "offset": 3993}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 105, "offset": 4061}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_13.cs", "start": {"col": 89, "line": 105, "offset": 4057}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "2153dfc5f9389c91afa7909e484f8a359a541ec2d95a8b1aa2672220d590b40e77192561ea5147c4ef64ab0e79b945a3eb9e0300e6153ebb014e9f1407613cad_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 105, "offset": 4006}, "start": {"col": 25, "line": 105, "offset": 3993}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 105, "offset": 4018}, "start": {"col": 39, "line": 105, "offset": 4007}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 105, "offset": 4061}, "start": {"col": 89, "line": 105, "offset": 4057}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_13.cs", "start": {"col": 25, "line": 105, "offset": 3993}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 146, "offset": 5714}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 146, "offset": 5714}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_13.cs", "start": {"col": 25, "line": 146, "offset": 5641}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 146, "offset": 5709}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_13.cs", "start": {"col": 89, "line": 146, "offset": 5705}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "2153dfc5f9389c91afa7909e484f8a359a541ec2d95a8b1aa2672220d590b40e77192561ea5147c4ef64ab0e79b945a3eb9e0300e6153ebb014e9f1407613cad_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 146, "offset": 5654}, "start": {"col": 25, "line": 146, "offset": 5641}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 146, "offset": 5666}, "start": {"col": 39, "line": 146, "offset": 5655}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 146, "offset": 5709}, "start": {"col": 89, "line": 146, "offset": 5705}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_13.cs", "start": {"col": 25, "line": 146, "offset": 5641}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 63, "offset": 2306}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 63, "offset": 2306}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_14.cs", "start": {"col": 25, "line": 63, "offset": 2233}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 63, "offset": 2301}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_14.cs", "start": {"col": 89, "line": 63, "offset": 2297}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "810bdb81c9e8f577af8820bc32eddca3fdae807830dc4c4e0ba6fd43c986e2874d798fd7d3063f6dc167785b1430e5ecaec94044d150377e54eea5b73765bb91_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 63, "offset": 2246}, "start": {"col": 25, "line": 63, "offset": 2233}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 63, "offset": 2258}, "start": {"col": 39, "line": 63, "offset": 2247}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 63, "offset": 2301}, "start": {"col": 89, "line": 63, "offset": 2297}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_14.cs", "start": {"col": 25, "line": 63, "offset": 2233}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 105, "offset": 3986}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 105, "offset": 3986}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_14.cs", "start": {"col": 25, "line": 105, "offset": 3913}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 105, "offset": 3981}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_14.cs", "start": {"col": 89, "line": 105, "offset": 3977}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "810bdb81c9e8f577af8820bc32eddca3fdae807830dc4c4e0ba6fd43c986e2874d798fd7d3063f6dc167785b1430e5ecaec94044d150377e54eea5b73765bb91_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 105, "offset": 3926}, "start": {"col": 25, "line": 105, "offset": 3913}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 105, "offset": 3938}, "start": {"col": 39, "line": 105, "offset": 3927}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 105, "offset": 3981}, "start": {"col": 89, "line": 105, "offset": 3977}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_14.cs", "start": {"col": 25, "line": 105, "offset": 3913}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 146, "offset": 5614}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 146, "offset": 5614}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_14.cs", "start": {"col": 25, "line": 146, "offset": 5541}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 146, "offset": 5609}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_14.cs", "start": {"col": 89, "line": 146, "offset": 5605}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "810bdb81c9e8f577af8820bc32eddca3fdae807830dc4c4e0ba6fd43c986e2874d798fd7d3063f6dc167785b1430e5ecaec94044d150377e54eea5b73765bb91_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 146, "offset": 5554}, "start": {"col": 25, "line": 146, "offset": 5541}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 146, "offset": 5566}, "start": {"col": 39, "line": 146, "offset": 5555}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 146, "offset": 5609}, "start": {"col": 89, "line": 146, "offset": 5605}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_14.cs", "start": {"col": 25, "line": 146, "offset": 5541}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 65, "offset": 2318}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 65, "offset": 2318}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_15.cs", "start": {"col": 25, "line": 65, "offset": 2245}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 65, "offset": 2313}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_15.cs", "start": {"col": 89, "line": 65, "offset": 2309}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "69248bac8dba3023295523ea23b9038ebffb2e768e7d111c7eca135a2cff61e2faf5f69e2afbd83f9c3ca696f11bd4504c5b3b711409c436a8ddd599050207e4_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 65, "offset": 2258}, "start": {"col": 25, "line": 65, "offset": 2245}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 65, "offset": 2270}, "start": {"col": 39, "line": 65, "offset": 2259}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 65, "offset": 2313}, "start": {"col": 89, "line": 65, "offset": 2309}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_15.cs", "start": {"col": 25, "line": 65, "offset": 2245}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 114, "offset": 4208}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 114, "offset": 4208}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_15.cs", "start": {"col": 25, "line": 114, "offset": 4135}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 114, "offset": 4203}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_15.cs", "start": {"col": 89, "line": 114, "offset": 4199}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "69248bac8dba3023295523ea23b9038ebffb2e768e7d111c7eca135a2cff61e2faf5f69e2afbd83f9c3ca696f11bd4504c5b3b711409c436a8ddd599050207e4_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 114, "offset": 4148}, "start": {"col": 25, "line": 114, "offset": 4135}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 114, "offset": 4160}, "start": {"col": 39, "line": 114, "offset": 4149}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 114, "offset": 4203}, "start": {"col": 89, "line": 114, "offset": 4199}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_15.cs", "start": {"col": 25, "line": 114, "offset": 4135}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 162, "offset": 6068}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 162, "offset": 6068}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_15.cs", "start": {"col": 25, "line": 162, "offset": 5995}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 162, "offset": 6063}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_15.cs", "start": {"col": 89, "line": 162, "offset": 6059}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "69248bac8dba3023295523ea23b9038ebffb2e768e7d111c7eca135a2cff61e2faf5f69e2afbd83f9c3ca696f11bd4504c5b3b711409c436a8ddd599050207e4_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 162, "offset": 6008}, "start": {"col": 25, "line": 162, "offset": 5995}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 162, "offset": 6020}, "start": {"col": 39, "line": 162, "offset": 6009}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 162, "offset": 6063}, "start": {"col": 89, "line": 162, "offset": 6059}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_15.cs", "start": {"col": 25, "line": 162, "offset": 5995}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 58, "offset": 2042}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 58, "offset": 2042}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_16.cs", "start": {"col": 25, "line": 58, "offset": 1969}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 58, "offset": 2037}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_16.cs", "start": {"col": 89, "line": 58, "offset": 2033}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "0447de3015480d078fe1f3371ccabef8e8365daa9a995364621a446e2fdcb83fecdbb300c6ffa6a114670178e5a83a839f77969b67af3335715e0097424e9e5c_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 58, "offset": 1982}, "start": {"col": 25, "line": 58, "offset": 1969}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 58, "offset": 1994}, "start": {"col": 39, "line": 58, "offset": 1983}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 58, "offset": 2037}, "start": {"col": 89, "line": 58, "offset": 2033}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_16.cs", "start": {"col": 25, "line": 58, "offset": 1969}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 96, "offset": 3455}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 96, "offset": 3455}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_16.cs", "start": {"col": 25, "line": 96, "offset": 3382}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 96, "offset": 3450}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_16.cs", "start": {"col": 89, "line": 96, "offset": 3446}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "0447de3015480d078fe1f3371ccabef8e8365daa9a995364621a446e2fdcb83fecdbb300c6ffa6a114670178e5a83a839f77969b67af3335715e0097424e9e5c_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 96, "offset": 3395}, "start": {"col": 25, "line": 96, "offset": 3382}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 96, "offset": 3407}, "start": {"col": 39, "line": 96, "offset": 3396}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 96, "offset": 3450}, "start": {"col": 89, "line": 96, "offset": 3446}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_16.cs", "start": {"col": 25, "line": 96, "offset": 3382}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 58, "offset": 2137}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 58, "offset": 2137}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_17.cs", "start": {"col": 25, "line": 58, "offset": 2064}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 58, "offset": 2132}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_17.cs", "start": {"col": 89, "line": 58, "offset": 2128}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "7b042b07a2850b71fc903425d6b0af9f2915cc18e6a5bdcd0798e767e87795d860be8257086fb4c4f79186d14d4ddda28682e4a68b30a31a3030c34a5e80beec_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 58, "offset": 2077}, "start": {"col": 25, "line": 58, "offset": 2064}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 58, "offset": 2089}, "start": {"col": 39, "line": 58, "offset": 2078}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 58, "offset": 2132}, "start": {"col": 89, "line": 58, "offset": 2128}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_17.cs", "start": {"col": 25, "line": 58, "offset": 2064}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 91, "offset": 3473}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 91, "offset": 3473}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_17.cs", "start": {"col": 25, "line": 91, "offset": 3400}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 91, "offset": 3468}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_17.cs", "start": {"col": 89, "line": 91, "offset": 3464}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "7b042b07a2850b71fc903425d6b0af9f2915cc18e6a5bdcd0798e767e87795d860be8257086fb4c4f79186d14d4ddda28682e4a68b30a31a3030c34a5e80beec_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 91, "offset": 3413}, "start": {"col": 25, "line": 91, "offset": 3400}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 91, "offset": 3425}, "start": {"col": 39, "line": 91, "offset": 3414}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 91, "offset": 3468}, "start": {"col": 89, "line": 91, "offset": 3464}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_17.cs", "start": {"col": 25, "line": 91, "offset": 3400}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 63, "offset": 2301}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 63, "offset": 2301}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_21.cs", "start": {"col": 25, "line": 63, "offset": 2228}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 63, "offset": 2296}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_21.cs", "start": {"col": 89, "line": 63, "offset": 2292}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "3c0368b6ac199ddadb0f7324a42dbf6b8a4a9a46075dfd6206a063ce3024d5473fd3ab13cd7e7b7141b021f1fb9cd24235a5055d2e9c9c3d5e04c7369d2fe08c_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 63, "offset": 2241}, "start": {"col": 25, "line": 63, "offset": 2228}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 63, "offset": 2253}, "start": {"col": 39, "line": 63, "offset": 2242}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 63, "offset": 2296}, "start": {"col": 89, "line": 63, "offset": 2292}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_21.cs", "start": {"col": 25, "line": 63, "offset": 2228}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 216, "offset": 8350}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 216, "offset": 8350}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_21.cs", "start": {"col": 25, "line": 216, "offset": 8277}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 216, "offset": 8345}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_21.cs", "start": {"col": 89, "line": 216, "offset": 8341}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "3c0368b6ac199ddadb0f7324a42dbf6b8a4a9a46075dfd6206a063ce3024d5473fd3ab13cd7e7b7141b021f1fb9cd24235a5055d2e9c9c3d5e04c7369d2fe08c_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 216, "offset": 8290}, "start": {"col": 25, "line": 216, "offset": 8277}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 216, "offset": 8302}, "start": {"col": 39, "line": 216, "offset": 8291}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 216, "offset": 8345}, "start": {"col": 89, "line": 216, "offset": 8341}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_21.cs", "start": {"col": 25, "line": 216, "offset": 8277}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 42, "offset": 1693}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 42, "offset": 1693}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_22b.cs", "start": {"col": 25, "line": 42, "offset": 1620}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 42, "offset": 1688}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_22b.cs", "start": {"col": 89, "line": 42, "offset": 1684}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "6336c55c4e8a8dc3e17ff4c580a88d6682b5f249697acc0359aa4c1838b09079da8c3306b8464333865e73826424608d5d3179e8ab104c3994a51a51b5032979_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 42, "offset": 1633}, "start": {"col": 25, "line": 42, "offset": 1620}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 42, "offset": 1645}, "start": {"col": 39, "line": 42, "offset": 1634}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 42, "offset": 1688}, "start": {"col": 89, "line": 42, "offset": 1684}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_22b.cs", "start": {"col": 25, "line": 42, "offset": 1620}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 155, "offset": 6728}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 155, "offset": 6728}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_22b.cs", "start": {"col": 25, "line": 155, "offset": 6655}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 155, "offset": 6723}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_22b.cs", "start": {"col": 89, "line": 155, "offset": 6719}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "6336c55c4e8a8dc3e17ff4c580a88d6682b5f249697acc0359aa4c1838b09079da8c3306b8464333865e73826424608d5d3179e8ab104c3994a51a51b5032979_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 155, "offset": 6668}, "start": {"col": 25, "line": 155, "offset": 6655}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 155, "offset": 6680}, "start": {"col": 39, "line": 155, "offset": 6669}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 155, "offset": 6723}, "start": {"col": 89, "line": 155, "offset": 6719}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_22b.cs", "start": {"col": 25, "line": 155, "offset": 6655}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 58, "offset": 2113}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "dataCopy", "location": {"end": {"col": 21, "line": 46, "offset": 1520}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_31.cs", "start": {"col": 13, "line": 46, "offset": 1512}}}, {"content": "data", "location": {"end": {"col": 24, "line": 49, "offset": 1575}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_31.cs", "start": {"col": 20, "line": 49, "offset": 1571}}}], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 58, "offset": 2113}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_31.cs", "start": {"col": 25, "line": 58, "offset": 2040}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 28, "line": 46, "offset": 1527}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_31.cs", "start": {"col": 24, "line": 46, "offset": 1523}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "da3ca6b6970fcb684b946694f5236d68dca2a71551a163d63443b6889ff6ef37f4fc8983eb5e693b164befdea29b2535182e819fc7ecd2e9210397b57a9a3d99_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 58, "offset": 2053}, "start": {"col": 25, "line": 58, "offset": 2040}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 58, "offset": 2065}, "start": {"col": 39, "line": 58, "offset": 2054}}, "$X": {"abstract_content": "data", "end": {"col": 28, "line": 46, "offset": 1527}, "start": {"col": 24, "line": 46, "offset": 1523}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_31.cs", "start": {"col": 25, "line": 58, "offset": 2040}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 41, "offset": 1542}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 41, "offset": 1542}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_41.cs", "start": {"col": 21, "line": 41, "offset": 1469}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 41, "offset": 1537}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_41.cs", "start": {"col": 85, "line": 41, "offset": 1533}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "270319cc3a28c66ba77eb5edeeb54f3f25e8e4b15340732160a716fbf12837f97168ab83488d5349c8d033fcecb41440eb689c9ac7c82c57d658d28554454a1f_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 41, "offset": 1482}, "start": {"col": 21, "line": 41, "offset": 1469}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 41, "offset": 1494}, "start": {"col": 35, "line": 41, "offset": 1483}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 41, "offset": 1537}, "start": {"col": 85, "line": 41, "offset": 1533}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_41.cs", "start": {"col": 21, "line": 41, "offset": 1469}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 89, "offset": 3293}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 89, "offset": 3293}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_41.cs", "start": {"col": 21, "line": 89, "offset": 3220}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 89, "offset": 3288}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_41.cs", "start": {"col": 85, "line": 89, "offset": 3284}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "270319cc3a28c66ba77eb5edeeb54f3f25e8e4b15340732160a716fbf12837f97168ab83488d5349c8d033fcecb41440eb689c9ac7c82c57d658d28554454a1f_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 89, "offset": 3233}, "start": {"col": 21, "line": 89, "offset": 3220}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 89, "offset": 3245}, "start": {"col": 35, "line": 89, "offset": 3234}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 89, "offset": 3288}, "start": {"col": 85, "line": 89, "offset": 3284}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_41.cs", "start": {"col": 21, "line": 89, "offset": 3220}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 58, "offset": 2079}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 58, "offset": 2079}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_42.cs", "start": {"col": 21, "line": 58, "offset": 2006}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 58, "offset": 2074}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_42.cs", "start": {"col": 85, "line": 58, "offset": 2070}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "2bf162fd1de91ec2cf13f0a20636c0218fe440d3f4b0cc081401521abd4ebb99fd84e12d423e6f7d56263f31527c9eb8bf5397146554bf3b7d748f6f611fc0f8_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 58, "offset": 2019}, "start": {"col": 21, "line": 58, "offset": 2006}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 58, "offset": 2031}, "start": {"col": 35, "line": 58, "offset": 2020}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 58, "offset": 2074}, "propagated_value": {"svalue_abstract_content": "BadSource(req resp)", "svalue_end": {"col": 43, "line": 49, "offset": 1588}, "svalue_start": {"col": 23, "line": 49, "offset": 1568}}, "start": {"col": 85, "line": 58, "offset": 2070}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_42.cs", "start": {"col": 21, "line": 58, "offset": 2006}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 94, "offset": 3443}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 94, "offset": 3443}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_42.cs", "start": {"col": 21, "line": 94, "offset": 3370}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 94, "offset": 3438}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_42.cs", "start": {"col": 85, "line": 94, "offset": 3434}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "2bf162fd1de91ec2cf13f0a20636c0218fe440d3f4b0cc081401521abd4ebb99fd84e12d423e6f7d56263f31527c9eb8bf5397146554bf3b7d748f6f611fc0f8_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 94, "offset": 3383}, "start": {"col": 21, "line": 94, "offset": 3370}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 94, "offset": 3395}, "start": {"col": 35, "line": 94, "offset": 3384}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 94, "offset": 3438}, "propagated_value": {"svalue_abstract_content": "GoodG2BSource(req resp)", "svalue_end": {"col": 47, "line": 85, "offset": 2952}, "svalue_start": {"col": 23, "line": 85, "offset": 2928}}, "start": {"col": 85, "line": 94, "offset": 3434}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_42.cs", "start": {"col": 21, "line": 94, "offset": 3370}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 46, "offset": 1672}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "data", "location": {"end": {"col": 20, "line": 37, "offset": 1171}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_45.cs", "start": {"col": 16, "line": 37, "offset": 1167}}}], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 46, "offset": 1672}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_45.cs", "start": {"col": 21, "line": 46, "offset": 1599}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 30, "line": 37, "offset": 1181}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_45.cs", "start": {"col": 23, "line": 37, "offset": 1174}}, "dataBad"]]}, "engine_kind": "OSS", "fingerprint": "38ef380242f7320824774525a2d542122326338cb72e4dbfbeed546fead01bf8c1cabd3314eed24147c30b15642e3d51dbb18be42ee1d85e710793ac5aaac1d8_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 46, "offset": 1612}, "start": {"col": 21, "line": 46, "offset": 1599}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 46, "offset": 1624}, "start": {"col": 35, "line": 46, "offset": 1613}}, "$X": {"abstract_content": "dataBad", "end": {"col": 30, "line": 37, "offset": 1181}, "start": {"col": 23, "line": 37, "offset": 1174}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_45.cs", "start": {"col": 21, "line": 46, "offset": 1599}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 96, "offset": 3455}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "data", "location": {"end": {"col": 20, "line": 87, "offset": 2950}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_45.cs", "start": {"col": 16, "line": 87, "offset": 2946}}}], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 96, "offset": 3455}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_45.cs", "start": {"col": 21, "line": 96, "offset": 3382}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 34, "line": 87, "offset": 2964}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_45.cs", "start": {"col": 23, "line": 87, "offset": 2953}}, "dataGoodG2B"]]}, "engine_kind": "OSS", "fingerprint": "7ec1369d1427c05ff04fc33421e73f11c64d1d06a16dde5b7c0c6fdca25710c92a9a07dc075eaac4bee80f7b77fa41e6f4b700685b2164722517d4e7df6c248f_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 96, "offset": 3395}, "start": {"col": 21, "line": 96, "offset": 3382}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 96, "offset": 3407}, "start": {"col": 35, "line": 96, "offset": 3396}}, "$X": {"abstract_content": "dataGoodG2B", "end": {"col": 34, "line": 87, "offset": 2964}, "start": {"col": 23, "line": 87, "offset": 2953}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_45.cs", "start": {"col": 21, "line": 96, "offset": 3382}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 40, "offset": 1545}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 40, "offset": 1545}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_51b.cs", "start": {"col": 21, "line": 40, "offset": 1472}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 40, "offset": 1540}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_51b.cs", "start": {"col": 85, "line": 40, "offset": 1536}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "4282ed9da9d24f7d16dd0ebd3284114a158693e95eb9224a954e8cf535b6d7ffb19a269da287d9a4b637cfde8608fbf227920063fa7ab12e3069cfb8c65af564_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 40, "offset": 1485}, "start": {"col": 21, "line": 40, "offset": 1472}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 40, "offset": 1497}, "start": {"col": 35, "line": 40, "offset": 1486}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 40, "offset": 1540}, "start": {"col": 85, "line": 40, "offset": 1536}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_51b.cs", "start": {"col": 21, "line": 40, "offset": 1472}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 68, "offset": 2666}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 68, "offset": 2666}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_51b.cs", "start": {"col": 21, "line": 68, "offset": 2593}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 68, "offset": 2661}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_51b.cs", "start": {"col": 85, "line": 68, "offset": 2657}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "4282ed9da9d24f7d16dd0ebd3284114a158693e95eb9224a954e8cf535b6d7ffb19a269da287d9a4b637cfde8608fbf227920063fa7ab12e3069cfb8c65af564_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 68, "offset": 2606}, "start": {"col": 21, "line": 68, "offset": 2593}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 68, "offset": 2618}, "start": {"col": 35, "line": 68, "offset": 2607}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 68, "offset": 2661}, "start": {"col": 85, "line": 68, "offset": 2657}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_51b.cs", "start": {"col": 21, "line": 68, "offset": 2593}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 40, "offset": 1560}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 40, "offset": 1560}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_52c.cs", "start": {"col": 21, "line": 40, "offset": 1487}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 40, "offset": 1555}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_52c.cs", "start": {"col": 85, "line": 40, "offset": 1551}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "e1afb19ae167f09b7346c4ebe02cdead27a82f79d727101285d7bc44a544342f8eb15d9a0d54dd9bc567b377520137d38d5d5198d009f7a4d6b4ad9621ce2da8_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 40, "offset": 1500}, "start": {"col": 21, "line": 40, "offset": 1487}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 40, "offset": 1512}, "start": {"col": 35, "line": 40, "offset": 1501}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 40, "offset": 1555}, "start": {"col": 85, "line": 40, "offset": 1551}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_52c.cs", "start": {"col": 21, "line": 40, "offset": 1487}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 68, "offset": 2681}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 68, "offset": 2681}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_52c.cs", "start": {"col": 21, "line": 68, "offset": 2608}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 68, "offset": 2676}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_52c.cs", "start": {"col": 85, "line": 68, "offset": 2672}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "e1afb19ae167f09b7346c4ebe02cdead27a82f79d727101285d7bc44a544342f8eb15d9a0d54dd9bc567b377520137d38d5d5198d009f7a4d6b4ad9621ce2da8_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 68, "offset": 2621}, "start": {"col": 21, "line": 68, "offset": 2608}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 68, "offset": 2633}, "start": {"col": 35, "line": 68, "offset": 2622}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 68, "offset": 2676}, "start": {"col": 85, "line": 68, "offset": 2672}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_52c.cs", "start": {"col": 21, "line": 68, "offset": 2608}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 40, "offset": 1587}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 40, "offset": 1587}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_53d.cs", "start": {"col": 21, "line": 40, "offset": 1514}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 40, "offset": 1582}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_53d.cs", "start": {"col": 85, "line": 40, "offset": 1578}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "56facb4592200598f27a038629febeecb2d634301a21ae3a2a295a91353b78a3d6dc0215b536b3d3ba47c3a4a7125004859137744fc44bb31ec88b7a67aaa450_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 40, "offset": 1527}, "start": {"col": 21, "line": 40, "offset": 1514}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 40, "offset": 1539}, "start": {"col": 35, "line": 40, "offset": 1528}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 40, "offset": 1582}, "start": {"col": 85, "line": 40, "offset": 1578}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_53d.cs", "start": {"col": 21, "line": 40, "offset": 1514}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 68, "offset": 2708}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 68, "offset": 2708}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_53d.cs", "start": {"col": 21, "line": 68, "offset": 2635}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 68, "offset": 2703}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_53d.cs", "start": {"col": 85, "line": 68, "offset": 2699}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "56facb4592200598f27a038629febeecb2d634301a21ae3a2a295a91353b78a3d6dc0215b536b3d3ba47c3a4a7125004859137744fc44bb31ec88b7a67aaa450_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 68, "offset": 2648}, "start": {"col": 21, "line": 68, "offset": 2635}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 68, "offset": 2660}, "start": {"col": 35, "line": 68, "offset": 2649}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 68, "offset": 2703}, "start": {"col": 85, "line": 68, "offset": 2699}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_53d.cs", "start": {"col": 21, "line": 68, "offset": 2635}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 40, "offset": 1588}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 40, "offset": 1588}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_54e.cs", "start": {"col": 21, "line": 40, "offset": 1515}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 40, "offset": 1583}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_54e.cs", "start": {"col": 85, "line": 40, "offset": 1579}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "64d8e7d289bb306137e7a05e627fb68ff533906bfc5ef1827f9d47800f05ff4afcbdd158498deacb9e5367872d1c196dca44da12d4e78ed3975538d29691fa6e_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 40, "offset": 1528}, "start": {"col": 21, "line": 40, "offset": 1515}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 40, "offset": 1540}, "start": {"col": 35, "line": 40, "offset": 1529}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 40, "offset": 1583}, "start": {"col": 85, "line": 40, "offset": 1579}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_54e.cs", "start": {"col": 21, "line": 40, "offset": 1515}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 68, "offset": 2709}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 68, "offset": 2709}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_54e.cs", "start": {"col": 21, "line": 68, "offset": 2636}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 68, "offset": 2704}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_54e.cs", "start": {"col": 85, "line": 68, "offset": 2700}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "64d8e7d289bb306137e7a05e627fb68ff533906bfc5ef1827f9d47800f05ff4afcbdd158498deacb9e5367872d1c196dca44da12d4e78ed3975538d29691fa6e_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 68, "offset": 2649}, "start": {"col": 21, "line": 68, "offset": 2636}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 68, "offset": 2661}, "start": {"col": 35, "line": 68, "offset": 2650}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 68, "offset": 2704}, "start": {"col": 85, "line": 68, "offset": 2700}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_54e.cs", "start": {"col": 21, "line": 68, "offset": 2636}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 41, "offset": 1640}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 41, "offset": 1640}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_61a.cs", "start": {"col": 21, "line": 41, "offset": 1567}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 41, "offset": 1635}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_61a.cs", "start": {"col": 85, "line": 41, "offset": 1631}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "0b634f224110338750a2c17ecc11475b4c44a0484f1594aeaee7a4bdfab65f8942946ee582593cc75342401401a0d202f43c2c8dbbd279879e0a28736e24d48b_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 41, "offset": 1580}, "start": {"col": 21, "line": 41, "offset": 1567}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 41, "offset": 1592}, "start": {"col": 35, "line": 41, "offset": 1581}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 41, "offset": 1635}, "propagated_value": {"svalue_abstract_content": "CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_61b.BadSource(req resp)", "svalue_end": {"col": 102, "line": 32, "offset": 1149}, "svalue_start": {"col": 23, "line": 32, "offset": 1070}}, "start": {"col": 85, "line": 41, "offset": 1631}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_61a.cs", "start": {"col": 21, "line": 41, "offset": 1567}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 75, "offset": 3001}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 75, "offset": 3001}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_61a.cs", "start": {"col": 21, "line": 75, "offset": 2928}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 75, "offset": 2996}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_61a.cs", "start": {"col": 85, "line": 75, "offset": 2992}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "0b634f224110338750a2c17ecc11475b4c44a0484f1594aeaee7a4bdfab65f8942946ee582593cc75342401401a0d202f43c2c8dbbd279879e0a28736e24d48b_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 75, "offset": 2941}, "start": {"col": 21, "line": 75, "offset": 2928}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 75, "offset": 2953}, "start": {"col": 35, "line": 75, "offset": 2942}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 75, "offset": 2996}, "propagated_value": {"svalue_abstract_content": "CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_61b.GoodG2BSource(req resp)", "svalue_end": {"col": 106, "line": 66, "offset": 2510}, "svalue_start": {"col": 23, "line": 66, "offset": 2427}}, "start": {"col": 85, "line": 75, "offset": 2992}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_61a.cs", "start": {"col": 21, "line": 75, "offset": 2928}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 41, "offset": 1589}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 41, "offset": 1589}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_66b.cs", "start": {"col": 21, "line": 41, "offset": 1516}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 41, "offset": 1584}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_66b.cs", "start": {"col": 85, "line": 41, "offset": 1580}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "def06177f804b6c095746e5ccecdfeab6cc7472d9d091fd7b2eae031aa30b9f4811b35e9fd2f91e7ed2c44aba08a36307c9c2596c7b1552a3ee220afcf39d497_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 41, "offset": 1529}, "start": {"col": 21, "line": 41, "offset": 1516}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 41, "offset": 1541}, "start": {"col": 35, "line": 41, "offset": 1530}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 41, "offset": 1584}, "start": {"col": 85, "line": 41, "offset": 1580}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_66b.cs", "start": {"col": 21, "line": 41, "offset": 1516}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 70, "offset": 2754}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 70, "offset": 2754}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_66b.cs", "start": {"col": 21, "line": 70, "offset": 2681}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 70, "offset": 2749}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_66b.cs", "start": {"col": 85, "line": 70, "offset": 2745}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "def06177f804b6c095746e5ccecdfeab6cc7472d9d091fd7b2eae031aa30b9f4811b35e9fd2f91e7ed2c44aba08a36307c9c2596c7b1552a3ee220afcf39d497_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 70, "offset": 2694}, "start": {"col": 21, "line": 70, "offset": 2681}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 70, "offset": 2706}, "start": {"col": 35, "line": 70, "offset": 2695}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 70, "offset": 2749}, "start": {"col": 85, "line": 70, "offset": 2745}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_66b.cs", "start": {"col": 21, "line": 70, "offset": 2681}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 41, "offset": 1666}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 41, "offset": 1666}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_67b.cs", "start": {"col": 21, "line": 41, "offset": 1593}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 41, "offset": 1661}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_67b.cs", "start": {"col": 85, "line": 41, "offset": 1657}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "ff930119364e4e394b4c3b2f21fb1364afb0a5ed7adb289a4e1c85c341a608df93e43bc58a4d5e57cca0728eadfd4b7b93b97952f9ddf8f2d29c0fe9dd4a10c5_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 41, "offset": 1606}, "start": {"col": 21, "line": 41, "offset": 1593}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 41, "offset": 1618}, "start": {"col": 35, "line": 41, "offset": 1607}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 41, "offset": 1661}, "propagated_value": {"svalue_abstract_content": "dataContainer.containerOne", "svalue_end": {"col": 49, "line": 32, "offset": 1175}, "svalue_start": {"col": 23, "line": 32, "offset": 1149}}, "start": {"col": 85, "line": 41, "offset": 1657}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_67b.cs", "start": {"col": 21, "line": 41, "offset": 1593}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 70, "offset": 2909}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 70, "offset": 2909}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_67b.cs", "start": {"col": 21, "line": 70, "offset": 2836}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 70, "offset": 2904}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_67b.cs", "start": {"col": 85, "line": 70, "offset": 2900}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "ff930119364e4e394b4c3b2f21fb1364afb0a5ed7adb289a4e1c85c341a608df93e43bc58a4d5e57cca0728eadfd4b7b93b97952f9ddf8f2d29c0fe9dd4a10c5_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 70, "offset": 2849}, "start": {"col": 21, "line": 70, "offset": 2836}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 70, "offset": 2861}, "start": {"col": 35, "line": 70, "offset": 2850}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 70, "offset": 2904}, "propagated_value": {"svalue_abstract_content": "dataContainer.containerOne", "svalue_end": {"col": 49, "line": 61, "offset": 2418}, "svalue_start": {"col": 23, "line": 61, "offset": 2392}}, "start": {"col": 85, "line": 70, "offset": 2900}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_67b.cs", "start": {"col": 21, "line": 70, "offset": 2836}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 41, "offset": 1636}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 41, "offset": 1636}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_68b.cs", "start": {"col": 21, "line": 41, "offset": 1563}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 41, "offset": 1631}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_68b.cs", "start": {"col": 85, "line": 41, "offset": 1627}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "eba745523c6fcdaa36ce1d722155c0177741adad05bbdd4e4a9261c6ad7bbcb2367f82a6d34536f94269f02d48d02d8fc3ce5dc02424e51e679cd3fc1004f262_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 41, "offset": 1576}, "start": {"col": 21, "line": 41, "offset": 1563}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 41, "offset": 1588}, "start": {"col": 35, "line": 41, "offset": 1577}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 41, "offset": 1631}, "propagated_value": {"svalue_abstract_content": "CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_68a.data", "svalue_end": {"col": 86, "line": 32, "offset": 1145}, "svalue_start": {"col": 23, "line": 32, "offset": 1082}}, "start": {"col": 85, "line": 41, "offset": 1627}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_68b.cs", "start": {"col": 21, "line": 41, "offset": 1563}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 70, "offset": 2831}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 70, "offset": 2831}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_68b.cs", "start": {"col": 21, "line": 70, "offset": 2758}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 70, "offset": 2826}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_68b.cs", "start": {"col": 85, "line": 70, "offset": 2822}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "eba745523c6fcdaa36ce1d722155c0177741adad05bbdd4e4a9261c6ad7bbcb2367f82a6d34536f94269f02d48d02d8fc3ce5dc02424e51e679cd3fc1004f262_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 70, "offset": 2771}, "start": {"col": 21, "line": 70, "offset": 2758}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 70, "offset": 2783}, "start": {"col": 35, "line": 70, "offset": 2772}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 70, "offset": 2826}, "propagated_value": {"svalue_abstract_content": "CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_68a.data", "svalue_end": {"col": 86, "line": 61, "offset": 2340}, "svalue_start": {"col": 23, "line": 61, "offset": 2277}}, "start": {"col": 85, "line": 70, "offset": 2822}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_68b.cs", "start": {"col": 21, "line": 70, "offset": 2758}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 42, "offset": 1611}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "data", "location": {"end": {"col": 20, "line": 33, "offset": 1099}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_71b.cs", "start": {"col": 16, "line": 33, "offset": 1095}}}], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 42, "offset": 1611}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_71b.cs", "start": {"col": 21, "line": 42, "offset": 1538}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 41, "line": 33, "offset": 1120}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_71b.cs", "start": {"col": 23, "line": 33, "offset": 1102}}, "(string)dataObject"]]}, "engine_kind": "OSS", "fingerprint": "6f1fdb2b4ba1ab2248c455ef7962aef5db34ce412187855a69f386eb8d61fd0884c7d2071c058dd9c0caffada09253263cf50c720cee6e7e960e00d997e6f8a7_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 42, "offset": 1551}, "start": {"col": 21, "line": 42, "offset": 1538}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 42, "offset": 1563}, "start": {"col": 35, "line": 42, "offset": 1552}}, "$X": {"abstract_content": "(string dataObject", "end": {"col": 41, "line": 33, "offset": 1120}, "start": {"col": 23, "line": 33, "offset": 1102}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_71b.cs", "start": {"col": 21, "line": 42, "offset": 1538}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 71, "offset": 2781}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "data", "location": {"end": {"col": 20, "line": 62, "offset": 2269}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_71b.cs", "start": {"col": 16, "line": 62, "offset": 2265}}}], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 71, "offset": 2781}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_71b.cs", "start": {"col": 21, "line": 71, "offset": 2708}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 41, "line": 62, "offset": 2290}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_71b.cs", "start": {"col": 23, "line": 62, "offset": 2272}}, "(string)dataObject"]]}, "engine_kind": "OSS", "fingerprint": "6f1fdb2b4ba1ab2248c455ef7962aef5db34ce412187855a69f386eb8d61fd0884c7d2071c058dd9c0caffada09253263cf50c720cee6e7e960e00d997e6f8a7_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 71, "offset": 2721}, "start": {"col": 21, "line": 71, "offset": 2708}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 71, "offset": 2733}, "start": {"col": 35, "line": 71, "offset": 2722}}, "$X": {"abstract_content": "(string dataObject", "end": {"col": 41, "line": 62, "offset": 2290}, "start": {"col": 23, "line": 62, "offset": 2272}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_71b.cs", "start": {"col": 21, "line": 71, "offset": 2708}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 42, "offset": 1637}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "data", "location": {"end": {"col": 20, "line": 33, "offset": 1118}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_72b.cs", "start": {"col": 16, "line": 33, "offset": 1114}}}], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 42, "offset": 1637}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_72b.cs", "start": {"col": 21, "line": 42, "offset": 1564}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 48, "line": 33, "offset": 1146}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_72b.cs", "start": {"col": 23, "line": 33, "offset": 1121}}, "(string) dataHashtable[2]"]]}, "engine_kind": "OSS", "fingerprint": "aba0ba0e380f78d6cdaa6095e5563e6abfd15671c8a560a8380476ffe70bb7faf7648893bddaf51f6d141c865b2838a515c0cf7161e8b6af7dab48f64ec558ff_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 42, "offset": 1577}, "start": {"col": 21, "line": 42, "offset": 1564}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 42, "offset": 1589}, "start": {"col": 35, "line": 42, "offset": 1578}}, "$X": {"abstract_content": "(string dataHashtable[[2]]", "end": {"col": 48, "line": 33, "offset": 1146}, "start": {"col": 23, "line": 33, "offset": 1121}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_72b.cs", "start": {"col": 21, "line": 42, "offset": 1564}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 71, "offset": 2820}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "data", "location": {"end": {"col": 20, "line": 62, "offset": 2301}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_72b.cs", "start": {"col": 16, "line": 62, "offset": 2297}}}], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 71, "offset": 2820}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_72b.cs", "start": {"col": 21, "line": 71, "offset": 2747}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 48, "line": 62, "offset": 2329}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_72b.cs", "start": {"col": 23, "line": 62, "offset": 2304}}, "(string) dataHashtable[2]"]]}, "engine_kind": "OSS", "fingerprint": "aba0ba0e380f78d6cdaa6095e5563e6abfd15671c8a560a8380476ffe70bb7faf7648893bddaf51f6d141c865b2838a515c0cf7161e8b6af7dab48f64ec558ff_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 71, "offset": 2760}, "start": {"col": 21, "line": 71, "offset": 2747}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 71, "offset": 2772}, "start": {"col": 35, "line": 71, "offset": 2761}}, "$X": {"abstract_content": "(string dataHashtable[[2]]", "end": {"col": 48, "line": 62, "offset": 2329}, "start": {"col": 23, "line": 62, "offset": 2304}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_72b.cs", "start": {"col": 21, "line": 71, "offset": 2747}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 42, "offset": 1656}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 42, "offset": 1656}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_73b.cs", "start": {"col": 21, "line": 42, "offset": 1583}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 42, "offset": 1651}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_73b.cs", "start": {"col": 85, "line": 42, "offset": 1647}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "97027898f71700ec9255591fb31074fccb93b475c4a8e0feb9096173ff75d78b53ca580ca67309fff6a2b0b245a57e819151ae4119e98b76ff441d571be8365b_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 42, "offset": 1596}, "start": {"col": 21, "line": 42, "offset": 1583}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 42, "offset": 1608}, "start": {"col": 35, "line": 42, "offset": 1597}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 42, "offset": 1651}, "propagated_value": {"svalue_abstract_content": "dataLinkedList.Last.Value", "svalue_end": {"col": 48, "line": 33, "offset": 1165}, "svalue_start": {"col": 23, "line": 33, "offset": 1140}}, "start": {"col": 85, "line": 42, "offset": 1647}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_73b.cs", "start": {"col": 21, "line": 42, "offset": 1583}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 71, "offset": 2849}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 71, "offset": 2849}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_73b.cs", "start": {"col": 21, "line": 71, "offset": 2776}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 71, "offset": 2844}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_73b.cs", "start": {"col": 85, "line": 71, "offset": 2840}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "97027898f71700ec9255591fb31074fccb93b475c4a8e0feb9096173ff75d78b53ca580ca67309fff6a2b0b245a57e819151ae4119e98b76ff441d571be8365b_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 71, "offset": 2789}, "start": {"col": 21, "line": 71, "offset": 2776}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 71, "offset": 2801}, "start": {"col": 35, "line": 71, "offset": 2790}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 71, "offset": 2844}, "propagated_value": {"svalue_abstract_content": "dataLinkedList.Last.Value", "svalue_end": {"col": 48, "line": 62, "offset": 2358}, "svalue_start": {"col": 23, "line": 62, "offset": 2333}}, "start": {"col": 85, "line": 71, "offset": 2840}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_73b.cs", "start": {"col": 21, "line": 71, "offset": 2776}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 42, "offset": 1652}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 42, "offset": 1652}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_74b.cs", "start": {"col": 21, "line": 42, "offset": 1579}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 42, "offset": 1647}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_74b.cs", "start": {"col": 85, "line": 42, "offset": 1643}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "a2ffcdebb65e5bb3029e163e29fc1639ce1ab582f6f025c5177baba87b968a8c1390e58599340e75bcc57b197526e07ad580cac87a6dffb49398558924225080_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 42, "offset": 1592}, "start": {"col": 21, "line": 42, "offset": 1579}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 42, "offset": 1604}, "start": {"col": 35, "line": 42, "offset": 1593}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 42, "offset": 1647}, "start": {"col": 85, "line": 42, "offset": 1643}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_74b.cs", "start": {"col": 21, "line": 42, "offset": 1579}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 71, "offset": 2842}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 71, "offset": 2842}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_74b.cs", "start": {"col": 21, "line": 71, "offset": 2769}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 71, "offset": 2837}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_74b.cs", "start": {"col": 85, "line": 71, "offset": 2833}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "a2ffcdebb65e5bb3029e163e29fc1639ce1ab582f6f025c5177baba87b968a8c1390e58599340e75bcc57b197526e07ad580cac87a6dffb49398558924225080_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 71, "offset": 2782}, "start": {"col": 21, "line": 71, "offset": 2769}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 71, "offset": 2794}, "start": {"col": 35, "line": 71, "offset": 2783}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 71, "offset": 2837}, "start": {"col": 85, "line": 71, "offset": 2833}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_74b.cs", "start": {"col": 21, "line": 71, "offset": 2769}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 55, "line": 51, "offset": 1760}, "extra": {"engine_kind": "OSS", "fingerprint": "9f79c618b104e04f959e54eab285fd7b4065058cb9b6f2112c0eb3c9b3af9ea696adad5bb08226f6dfb45a3eebd448d61924c726b2255b728b8b4f7b9a6e62d0_0", "is_ignored": false, "lines": "            BinaryFormatter bf = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_75a.cs", "start": {"col": 13, "line": 51, "offset": 1718}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 55, "line": 90, "offset": 3122}, "extra": {"engine_kind": "OSS", "fingerprint": "9f79c618b104e04f959e54eab285fd7b4065058cb9b6f2112c0eb3c9b3af9ea696adad5bb08226f6dfb45a3eebd448d61924c726b2255b728b8b4f7b9a6e62d0_1", "is_ignored": false, "lines": "            BinaryFormatter bf = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_75a.cs", "start": {"col": 13, "line": 90, "offset": 3080}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 55, "line": 122, "offset": 4314}, "extra": {"engine_kind": "OSS", "fingerprint": "9f79c618b104e04f959e54eab285fd7b4065058cb9b6f2112c0eb3c9b3af9ea696adad5bb08226f6dfb45a3eebd448d61924c726b2255b728b8b4f7b9a6e62d0_2", "is_ignored": false, "lines": "            BinaryFormatter bf = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_75a.cs", "start": {"col": 13, "line": 122, "offset": 4272}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 48, "line": 38, "offset": 1285}, "extra": {"engine_kind": "OSS", "fingerprint": "01b5e68d1875aaee4a8994f63dc54cfdb6f26dae57d2f017f69139e519c8589de370e5379e10a8fe411c32b1376eadf93461d65cc9e387f49ad5b421a7d304ab_0", "is_ignored": false, "lines": "            var binForm = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_75b.cs", "start": {"col": 17, "line": 38, "offset": 1254}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 53, "offset": 2092}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "data", "location": {"end": {"col": 21, "line": 43, "offset": 1509}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_75b.cs", "start": {"col": 17, "line": 43, "offset": 1505}}}], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 53, "offset": 2092}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_75b.cs", "start": {"col": 25, "line": 53, "offset": 2019}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 62, "line": 43, "offset": 1550}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_75b.cs", "start": {"col": 24, "line": 43, "offset": 1512}}, "(string)binForm.Deserialize(memStream)"]]}, "engine_kind": "OSS", "fingerprint": "f79668855a673436a89ab3bf6d44be00653124aead5577100a06669b1bd82b828a83bdd65b4f4899209a8da65ea86115ef331abf0598dc171e303f87f03eac09_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 53, "offset": 2032}, "start": {"col": 25, "line": 53, "offset": 2019}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 53, "offset": 2044}, "start": {"col": 39, "line": 53, "offset": 2033}}, "$X": {"abstract_content": "(string binForm.Deserialize(memStream)", "end": {"col": 62, "line": 43, "offset": 1550}, "start": {"col": 24, "line": 43, "offset": 1512}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_75b.cs", "start": {"col": 25, "line": 53, "offset": 2019}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 48, "line": 81, "offset": 3079}, "extra": {"engine_kind": "OSS", "fingerprint": "01b5e68d1875aaee4a8994f63dc54cfdb6f26dae57d2f017f69139e519c8589de370e5379e10a8fe411c32b1376eadf93461d65cc9e387f49ad5b421a7d304ab_1", "is_ignored": false, "lines": "            var binForm = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_75b.cs", "start": {"col": 17, "line": 81, "offset": 3048}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 96, "offset": 3886}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "data", "location": {"end": {"col": 21, "line": 86, "offset": 3303}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_75b.cs", "start": {"col": 17, "line": 86, "offset": 3299}}}], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 96, "offset": 3886}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_75b.cs", "start": {"col": 25, "line": 96, "offset": 3813}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 62, "line": 86, "offset": 3344}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_75b.cs", "start": {"col": 24, "line": 86, "offset": 3306}}, "(string)binForm.Deserialize(memStream)"]]}, "engine_kind": "OSS", "fingerprint": "f79668855a673436a89ab3bf6d44be00653124aead5577100a06669b1bd82b828a83bdd65b4f4899209a8da65ea86115ef331abf0598dc171e303f87f03eac09_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 96, "offset": 3826}, "start": {"col": 25, "line": 96, "offset": 3813}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 96, "offset": 3838}, "start": {"col": 39, "line": 96, "offset": 3827}}, "$X": {"abstract_content": "(string binForm.Deserialize(memStream)", "end": {"col": 62, "line": 86, "offset": 3344}, "start": {"col": 24, "line": 86, "offset": 3306}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_75b.cs", "start": {"col": 25, "line": 96, "offset": 3813}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 48, "line": 122, "offset": 4848}, "extra": {"engine_kind": "OSS", "fingerprint": "01b5e68d1875aaee4a8994f63dc54cfdb6f26dae57d2f017f69139e519c8589de370e5379e10a8fe411c32b1376eadf93461d65cc9e387f49ad5b421a7d304ab_2", "is_ignored": false, "lines": "            var binForm = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_75b.cs", "start": {"col": 17, "line": 122, "offset": 4817}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 40, "offset": 1572}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 40, "offset": 1572}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_81_bad.cs", "start": {"col": 21, "line": 40, "offset": 1499}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 40, "offset": 1567}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_81_bad.cs", "start": {"col": 85, "line": 40, "offset": 1563}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "18baee1d4338667724bf99484fd29c7f3ab25ba4338362a734b6f852cfbc798331bb8fdea116eb1f73777eb7a0b932212fd891191584389fb1397081e863e904_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 40, "offset": 1512}, "start": {"col": 21, "line": 40, "offset": 1499}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 40, "offset": 1524}, "start": {"col": 35, "line": 40, "offset": 1513}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 40, "offset": 1567}, "start": {"col": 85, "line": 40, "offset": 1563}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_81_bad.cs", "start": {"col": 21, "line": 40, "offset": 1499}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 41, "offset": 1587}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 41, "offset": 1587}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_81_goodG2B.cs", "start": {"col": 21, "line": 41, "offset": 1514}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 41, "offset": 1582}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_81_goodG2B.cs", "start": {"col": 85, "line": 41, "offset": 1578}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "34c003c0a1a6353304f1f2039d13f39cbcd780a8e06a66fe6c81b2ab083ed2ad2ee632e06f436b6d3bdf024264f219c9f2f2f1de6a85106650c6463a23f3bf75_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 41, "offset": 1527}, "start": {"col": 21, "line": 41, "offset": 1514}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 41, "offset": 1539}, "start": {"col": 35, "line": 41, "offset": 1528}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 41, "offset": 1582}, "start": {"col": 85, "line": 41, "offset": 1578}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Get_Cookies_Web_ExecuteScalar_81_goodG2B.cs", "start": {"col": 21, "line": 41, "offset": 1514}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 55, "line": 80, "offset": 2744}, "extra": {"engine_kind": "OSS", "fingerprint": "1e0301774f1e160fcedf1df6a505f687eaa616e7679fee8f1596de9989aa8a5ad892b73d31d6f37f2e63237ee51e882b259212339a8adf53e64af90b88ca3461_0", "is_ignored": false, "lines": "            BinaryFormatter bf = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_CommandText_75a.cs", "start": {"col": 13, "line": 80, "offset": 2702}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 55, "line": 146, "offset": 5057}, "extra": {"engine_kind": "OSS", "fingerprint": "1e0301774f1e160fcedf1df6a505f687eaa616e7679fee8f1596de9989aa8a5ad892b73d31d6f37f2e63237ee51e882b259212339a8adf53e64af90b88ca3461_1", "is_ignored": false, "lines": "            BinaryFormatter bf = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_CommandText_75a.cs", "start": {"col": 13, "line": 146, "offset": 5015}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 55, "line": 205, "offset": 7200}, "extra": {"engine_kind": "OSS", "fingerprint": "1e0301774f1e160fcedf1df6a505f687eaa616e7679fee8f1596de9989aa8a5ad892b73d31d6f37f2e63237ee51e882b259212339a8adf53e64af90b88ca3461_2", "is_ignored": false, "lines": "            BinaryFormatter bf = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_CommandText_75a.cs", "start": {"col": 13, "line": 205, "offset": 7158}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 48, "line": 38, "offset": 1265}, "extra": {"engine_kind": "OSS", "fingerprint": "ae7f2b8bf288a5b0d5da70d763772cebab8684c9e37532c2af2ee26bb9a1837cf4b2fd7b401dcb9353ecca5c637e1cf118f3d17ccfdd520df801d6bb6c5e2d8d_0", "is_ignored": false, "lines": "            var binForm = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_CommandText_75b.cs", "start": {"col": 17, "line": 38, "offset": 1234}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 48, "line": 100, "offset": 3848}, "extra": {"engine_kind": "OSS", "fingerprint": "ae7f2b8bf288a5b0d5da70d763772cebab8684c9e37532c2af2ee26bb9a1837cf4b2fd7b401dcb9353ecca5c637e1cf118f3d17ccfdd520df801d6bb6c5e2d8d_1", "is_ignored": false, "lines": "            var binForm = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_CommandText_75b.cs", "start": {"col": 17, "line": 100, "offset": 3817}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 48, "line": 160, "offset": 6406}, "extra": {"engine_kind": "OSS", "fingerprint": "ae7f2b8bf288a5b0d5da70d763772cebab8684c9e37532c2af2ee26bb9a1837cf4b2fd7b401dcb9353ecca5c637e1cf118f3d17ccfdd520df801d6bb6c5e2d8d_2", "is_ignored": false, "lines": "            var binForm = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_CommandText_75b.cs", "start": {"col": 17, "line": 160, "offset": 6375}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 83, "offset": 2921}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 83, "offset": 2921}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_01.cs", "start": {"col": 21, "line": 83, "offset": 2822}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 83, "offset": 2916}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_01.cs", "start": {"col": 111, "line": 83, "offset": 2912}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "8e818eb6a1200cdb9911b6299b8ea22c67e025b8135d6f057439c7d95018a2702e504910177e1b4ca30d3ec905b583dbdbb03082496f38dcf6cbe1c044baad5b_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 83, "offset": 2835}, "start": {"col": 21, "line": 83, "offset": 2822}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 83, "offset": 2847}, "start": {"col": 35, "line": 83, "offset": 2836}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 83, "offset": 2916}, "start": {"col": 111, "line": 83, "offset": 2912}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_01.cs", "start": {"col": 21, "line": 83, "offset": 2822}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 94, "offset": 3440}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 94, "offset": 3440}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_02.cs", "start": {"col": 25, "line": 94, "offset": 3341}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 94, "offset": 3435}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_02.cs", "start": {"col": 115, "line": 94, "offset": 3431}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "6c1bc68a3e57aefc01eb2243882427cdff1b118feb2eea827fb9baff361a2a958be7d164f312c3f8d187a73819be40dcc6199397fa8e1b13c46ca5378a578a0d_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 94, "offset": 3354}, "start": {"col": 25, "line": 94, "offset": 3341}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 94, "offset": 3366}, "start": {"col": 39, "line": 94, "offset": 3355}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 94, "offset": 3435}, "start": {"col": 115, "line": 94, "offset": 3431}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_02.cs", "start": {"col": 25, "line": 94, "offset": 3341}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 141, "offset": 5289}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 141, "offset": 5289}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_02.cs", "start": {"col": 25, "line": 141, "offset": 5190}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 141, "offset": 5284}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_02.cs", "start": {"col": 115, "line": 141, "offset": 5280}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "6c1bc68a3e57aefc01eb2243882427cdff1b118feb2eea827fb9baff361a2a958be7d164f312c3f8d187a73819be40dcc6199397fa8e1b13c46ca5378a578a0d_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 141, "offset": 5203}, "start": {"col": 25, "line": 141, "offset": 5190}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 141, "offset": 5215}, "start": {"col": 39, "line": 141, "offset": 5204}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 141, "offset": 5284}, "start": {"col": 115, "line": 141, "offset": 5280}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_02.cs", "start": {"col": 25, "line": 141, "offset": 5190}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 187, "offset": 7108}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 187, "offset": 7108}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_02.cs", "start": {"col": 25, "line": 187, "offset": 7009}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 187, "offset": 7103}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_02.cs", "start": {"col": 115, "line": 187, "offset": 7099}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "6c1bc68a3e57aefc01eb2243882427cdff1b118feb2eea827fb9baff361a2a958be7d164f312c3f8d187a73819be40dcc6199397fa8e1b13c46ca5378a578a0d_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 187, "offset": 7022}, "start": {"col": 25, "line": 187, "offset": 7009}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 187, "offset": 7034}, "start": {"col": 39, "line": 187, "offset": 7023}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 187, "offset": 7103}, "start": {"col": 115, "line": 187, "offset": 7099}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_02.cs", "start": {"col": 25, "line": 187, "offset": 7009}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 94, "offset": 3439}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 94, "offset": 3439}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_03.cs", "start": {"col": 25, "line": 94, "offset": 3340}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 94, "offset": 3434}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_03.cs", "start": {"col": 115, "line": 94, "offset": 3430}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "4da5bcd8816cccce2a9221b0201c3d5534ea94be9b2d2d9ed916e0d90fb015ce9e75e299ada8984bc9000b0510d78073e72a65217d95cf313267d5ef68b9e75c_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 94, "offset": 3353}, "start": {"col": 25, "line": 94, "offset": 3340}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 94, "offset": 3365}, "start": {"col": 39, "line": 94, "offset": 3354}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 94, "offset": 3434}, "start": {"col": 115, "line": 94, "offset": 3430}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_03.cs", "start": {"col": 25, "line": 94, "offset": 3340}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 141, "offset": 5286}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 141, "offset": 5286}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_03.cs", "start": {"col": 25, "line": 141, "offset": 5187}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 141, "offset": 5281}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_03.cs", "start": {"col": 115, "line": 141, "offset": 5277}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "4da5bcd8816cccce2a9221b0201c3d5534ea94be9b2d2d9ed916e0d90fb015ce9e75e299ada8984bc9000b0510d78073e72a65217d95cf313267d5ef68b9e75c_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 141, "offset": 5200}, "start": {"col": 25, "line": 141, "offset": 5187}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 141, "offset": 5212}, "start": {"col": 39, "line": 141, "offset": 5201}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 141, "offset": 5281}, "start": {"col": 115, "line": 141, "offset": 5277}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_03.cs", "start": {"col": 25, "line": 141, "offset": 5187}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 187, "offset": 7105}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 187, "offset": 7105}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_03.cs", "start": {"col": 25, "line": 187, "offset": 7006}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 187, "offset": 7100}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_03.cs", "start": {"col": 115, "line": 187, "offset": 7096}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "4da5bcd8816cccce2a9221b0201c3d5534ea94be9b2d2d9ed916e0d90fb015ce9e75e299ada8984bc9000b0510d78073e72a65217d95cf313267d5ef68b9e75c_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 187, "offset": 7019}, "start": {"col": 25, "line": 187, "offset": 7006}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 187, "offset": 7031}, "start": {"col": 39, "line": 187, "offset": 7020}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 187, "offset": 7100}, "start": {"col": 115, "line": 187, "offset": 7096}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_03.cs", "start": {"col": 25, "line": 187, "offset": 7006}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 101, "offset": 3783}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 101, "offset": 3783}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_04.cs", "start": {"col": 25, "line": 101, "offset": 3684}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 101, "offset": 3778}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_04.cs", "start": {"col": 115, "line": 101, "offset": 3774}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "2a78f4ccdbc071461dd1bc1d35830242d8baa0cec59cc81c6ef907fd8be0c43004f1a27f7155f4009cefdb84432bf17c0b624344c00c3bdeb2d899d5eda37829_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 101, "offset": 3697}, "start": {"col": 25, "line": 101, "offset": 3684}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 101, "offset": 3709}, "start": {"col": 39, "line": 101, "offset": 3698}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 101, "offset": 3778}, "start": {"col": 115, "line": 101, "offset": 3774}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_04.cs", "start": {"col": 25, "line": 101, "offset": 3684}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 148, "offset": 5688}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 148, "offset": 5688}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_04.cs", "start": {"col": 25, "line": 148, "offset": 5589}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 148, "offset": 5683}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_04.cs", "start": {"col": 115, "line": 148, "offset": 5679}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "2a78f4ccdbc071461dd1bc1d35830242d8baa0cec59cc81c6ef907fd8be0c43004f1a27f7155f4009cefdb84432bf17c0b624344c00c3bdeb2d899d5eda37829_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 148, "offset": 5602}, "start": {"col": 25, "line": 148, "offset": 5589}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 148, "offset": 5614}, "start": {"col": 39, "line": 148, "offset": 5603}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 148, "offset": 5683}, "start": {"col": 115, "line": 148, "offset": 5679}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_04.cs", "start": {"col": 25, "line": 148, "offset": 5589}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 194, "offset": 7535}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 194, "offset": 7535}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_04.cs", "start": {"col": 25, "line": 194, "offset": 7436}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 194, "offset": 7530}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_04.cs", "start": {"col": 115, "line": 194, "offset": 7526}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "2a78f4ccdbc071461dd1bc1d35830242d8baa0cec59cc81c6ef907fd8be0c43004f1a27f7155f4009cefdb84432bf17c0b624344c00c3bdeb2d899d5eda37829_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 194, "offset": 7449}, "start": {"col": 25, "line": 194, "offset": 7436}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 194, "offset": 7461}, "start": {"col": 39, "line": 194, "offset": 7450}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 194, "offset": 7530}, "start": {"col": 115, "line": 194, "offset": 7526}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_04.cs", "start": {"col": 25, "line": 194, "offset": 7436}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 100, "offset": 3776}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 100, "offset": 3776}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_05.cs", "start": {"col": 25, "line": 100, "offset": 3677}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 100, "offset": 3771}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_05.cs", "start": {"col": 115, "line": 100, "offset": 3767}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "f4b2ede55f7a1c417bbda013435a197aaa3560ea9d7fdb23970c65823d0086daf142a1adfa639ee8b289062e229abe594ff703177e45f1ec219d5c696b7a9101_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 100, "offset": 3690}, "start": {"col": 25, "line": 100, "offset": 3677}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 100, "offset": 3702}, "start": {"col": 39, "line": 100, "offset": 3691}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 100, "offset": 3771}, "start": {"col": 115, "line": 100, "offset": 3767}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_05.cs", "start": {"col": 25, "line": 100, "offset": 3677}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 147, "offset": 5653}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 147, "offset": 5653}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_05.cs", "start": {"col": 25, "line": 147, "offset": 5554}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 147, "offset": 5648}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_05.cs", "start": {"col": 115, "line": 147, "offset": 5644}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "f4b2ede55f7a1c417bbda013435a197aaa3560ea9d7fdb23970c65823d0086daf142a1adfa639ee8b289062e229abe594ff703177e45f1ec219d5c696b7a9101_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 147, "offset": 5567}, "start": {"col": 25, "line": 147, "offset": 5554}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 147, "offset": 5579}, "start": {"col": 39, "line": 147, "offset": 5568}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 147, "offset": 5648}, "start": {"col": 115, "line": 147, "offset": 5644}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_05.cs", "start": {"col": 25, "line": 147, "offset": 5554}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 193, "offset": 7486}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 193, "offset": 7486}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_05.cs", "start": {"col": 25, "line": 193, "offset": 7387}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 193, "offset": 7481}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_05.cs", "start": {"col": 115, "line": 193, "offset": 7477}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "f4b2ede55f7a1c417bbda013435a197aaa3560ea9d7fdb23970c65823d0086daf142a1adfa639ee8b289062e229abe594ff703177e45f1ec219d5c696b7a9101_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 193, "offset": 7400}, "start": {"col": 25, "line": 193, "offset": 7387}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 193, "offset": 7412}, "start": {"col": 39, "line": 193, "offset": 7401}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 193, "offset": 7481}, "start": {"col": 115, "line": 193, "offset": 7477}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_05.cs", "start": {"col": 25, "line": 193, "offset": 7387}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 99, "offset": 3719}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 99, "offset": 3719}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_06.cs", "start": {"col": 25, "line": 99, "offset": 3620}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 99, "offset": 3714}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_06.cs", "start": {"col": 115, "line": 99, "offset": 3710}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "ca263c51e31c77c69accf57a6797aeceb9f96773ff544f906d02b990f93ef9913fa544c6495a4b1ad608e58213b1683deb656733f551db5302fce8363fb60bd1_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 99, "offset": 3633}, "start": {"col": 25, "line": 99, "offset": 3620}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 99, "offset": 3645}, "start": {"col": 39, "line": 99, "offset": 3634}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 99, "offset": 3714}, "start": {"col": 115, "line": 99, "offset": 3710}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_06.cs", "start": {"col": 25, "line": 99, "offset": 3620}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 146, "offset": 5634}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 146, "offset": 5634}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_06.cs", "start": {"col": 25, "line": 146, "offset": 5535}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 146, "offset": 5629}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_06.cs", "start": {"col": 115, "line": 146, "offset": 5625}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "ca263c51e31c77c69accf57a6797aeceb9f96773ff544f906d02b990f93ef9913fa544c6495a4b1ad608e58213b1683deb656733f551db5302fce8363fb60bd1_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 146, "offset": 5548}, "start": {"col": 25, "line": 146, "offset": 5535}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 146, "offset": 5560}, "start": {"col": 39, "line": 146, "offset": 5549}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 146, "offset": 5629}, "start": {"col": 115, "line": 146, "offset": 5625}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_06.cs", "start": {"col": 25, "line": 146, "offset": 5535}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 192, "offset": 7487}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 192, "offset": 7487}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_06.cs", "start": {"col": 25, "line": 192, "offset": 7388}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 192, "offset": 7482}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_06.cs", "start": {"col": 115, "line": 192, "offset": 7478}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "ca263c51e31c77c69accf57a6797aeceb9f96773ff544f906d02b990f93ef9913fa544c6495a4b1ad608e58213b1683deb656733f551db5302fce8363fb60bd1_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 192, "offset": 7401}, "start": {"col": 25, "line": 192, "offset": 7388}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 192, "offset": 7413}, "start": {"col": 39, "line": 192, "offset": 7402}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 192, "offset": 7482}, "start": {"col": 115, "line": 192, "offset": 7478}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_06.cs", "start": {"col": 25, "line": 192, "offset": 7388}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 99, "offset": 3723}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 99, "offset": 3723}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_07.cs", "start": {"col": 25, "line": 99, "offset": 3624}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 99, "offset": 3718}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_07.cs", "start": {"col": 115, "line": 99, "offset": 3714}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "73b243f5ca29bb2bacd7e49f43c48859d23b85f3a338f0d5915060a7c7c0ff3b8434329655c28df66248c686c285646416ee703d552938b83b1f8b21b12712b1_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 99, "offset": 3637}, "start": {"col": 25, "line": 99, "offset": 3624}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 99, "offset": 3649}, "start": {"col": 39, "line": 99, "offset": 3638}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 99, "offset": 3718}, "start": {"col": 115, "line": 99, "offset": 3714}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_07.cs", "start": {"col": 25, "line": 99, "offset": 3624}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 146, "offset": 5610}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 146, "offset": 5610}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_07.cs", "start": {"col": 25, "line": 146, "offset": 5511}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 146, "offset": 5605}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_07.cs", "start": {"col": 115, "line": 146, "offset": 5601}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "73b243f5ca29bb2bacd7e49f43c48859d23b85f3a338f0d5915060a7c7c0ff3b8434329655c28df66248c686c285646416ee703d552938b83b1f8b21b12712b1_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 146, "offset": 5524}, "start": {"col": 25, "line": 146, "offset": 5511}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 146, "offset": 5536}, "start": {"col": 39, "line": 146, "offset": 5525}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 146, "offset": 5605}, "start": {"col": 115, "line": 146, "offset": 5601}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_07.cs", "start": {"col": 25, "line": 146, "offset": 5511}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 192, "offset": 7449}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 192, "offset": 7449}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_07.cs", "start": {"col": 25, "line": 192, "offset": 7350}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 192, "offset": 7444}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_07.cs", "start": {"col": 115, "line": 192, "offset": 7440}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "73b243f5ca29bb2bacd7e49f43c48859d23b85f3a338f0d5915060a7c7c0ff3b8434329655c28df66248c686c285646416ee703d552938b83b1f8b21b12712b1_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 192, "offset": 7363}, "start": {"col": 25, "line": 192, "offset": 7350}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 192, "offset": 7375}, "start": {"col": 39, "line": 192, "offset": 7364}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 192, "offset": 7444}, "start": {"col": 115, "line": 192, "offset": 7440}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_07.cs", "start": {"col": 25, "line": 192, "offset": 7350}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 107, "offset": 3855}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 107, "offset": 3855}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_08.cs", "start": {"col": 25, "line": 107, "offset": 3756}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 107, "offset": 3850}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_08.cs", "start": {"col": 115, "line": 107, "offset": 3846}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "3b53ff99605c7d0b91b93782c54d27ffbfcdd6aa95c5a9f4aa2fa569f633c2e4a9a817bd3397f909a61a620e23781450d5a7c1a47adf221e02f3681d9df3e84f_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 107, "offset": 3769}, "start": {"col": 25, "line": 107, "offset": 3756}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 107, "offset": 3781}, "start": {"col": 39, "line": 107, "offset": 3770}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 107, "offset": 3850}, "start": {"col": 115, "line": 107, "offset": 3846}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_08.cs", "start": {"col": 25, "line": 107, "offset": 3756}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 154, "offset": 5768}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 154, "offset": 5768}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_08.cs", "start": {"col": 25, "line": 154, "offset": 5669}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 154, "offset": 5763}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_08.cs", "start": {"col": 115, "line": 154, "offset": 5759}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "3b53ff99605c7d0b91b93782c54d27ffbfcdd6aa95c5a9f4aa2fa569f633c2e4a9a817bd3397f909a61a620e23781450d5a7c1a47adf221e02f3681d9df3e84f_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 154, "offset": 5682}, "start": {"col": 25, "line": 154, "offset": 5669}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 154, "offset": 5694}, "start": {"col": 39, "line": 154, "offset": 5683}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 154, "offset": 5763}, "start": {"col": 115, "line": 154, "offset": 5759}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_08.cs", "start": {"col": 25, "line": 154, "offset": 5669}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 200, "offset": 7619}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 200, "offset": 7619}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_08.cs", "start": {"col": 25, "line": 200, "offset": 7520}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 200, "offset": 7614}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_08.cs", "start": {"col": 115, "line": 200, "offset": 7610}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "3b53ff99605c7d0b91b93782c54d27ffbfcdd6aa95c5a9f4aa2fa569f633c2e4a9a817bd3397f909a61a620e23781450d5a7c1a47adf221e02f3681d9df3e84f_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 200, "offset": 7533}, "start": {"col": 25, "line": 200, "offset": 7520}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 200, "offset": 7545}, "start": {"col": 39, "line": 200, "offset": 7534}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 200, "offset": 7614}, "start": {"col": 115, "line": 200, "offset": 7610}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_08.cs", "start": {"col": 25, "line": 200, "offset": 7520}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 94, "offset": 3516}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 94, "offset": 3516}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_09.cs", "start": {"col": 25, "line": 94, "offset": 3417}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 94, "offset": 3511}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_09.cs", "start": {"col": 115, "line": 94, "offset": 3507}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "decb46c669a6a02256de8a543543cd926dce2d4d722ec92960ec09520305542458b3359a760ea350c56a89d5b24cf814c682a0fe6d5ffb90acb642fed4058c63_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 94, "offset": 3430}, "start": {"col": 25, "line": 94, "offset": 3417}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 94, "offset": 3442}, "start": {"col": 39, "line": 94, "offset": 3431}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 94, "offset": 3511}, "start": {"col": 115, "line": 94, "offset": 3507}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_09.cs", "start": {"col": 25, "line": 94, "offset": 3417}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 141, "offset": 5441}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 141, "offset": 5441}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_09.cs", "start": {"col": 25, "line": 141, "offset": 5342}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 141, "offset": 5436}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_09.cs", "start": {"col": 115, "line": 141, "offset": 5432}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "decb46c669a6a02256de8a543543cd926dce2d4d722ec92960ec09520305542458b3359a760ea350c56a89d5b24cf814c682a0fe6d5ffb90acb642fed4058c63_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 141, "offset": 5355}, "start": {"col": 25, "line": 141, "offset": 5342}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 141, "offset": 5367}, "start": {"col": 39, "line": 141, "offset": 5356}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 141, "offset": 5436}, "start": {"col": 115, "line": 141, "offset": 5432}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_09.cs", "start": {"col": 25, "line": 141, "offset": 5342}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 187, "offset": 7298}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 187, "offset": 7298}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_09.cs", "start": {"col": 25, "line": 187, "offset": 7199}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 187, "offset": 7293}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_09.cs", "start": {"col": 115, "line": 187, "offset": 7289}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "decb46c669a6a02256de8a543543cd926dce2d4d722ec92960ec09520305542458b3359a760ea350c56a89d5b24cf814c682a0fe6d5ffb90acb642fed4058c63_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 187, "offset": 7212}, "start": {"col": 25, "line": 187, "offset": 7199}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 187, "offset": 7224}, "start": {"col": 39, "line": 187, "offset": 7213}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 187, "offset": 7293}, "start": {"col": 115, "line": 187, "offset": 7289}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_09.cs", "start": {"col": 25, "line": 187, "offset": 7199}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 94, "offset": 3476}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 94, "offset": 3476}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_10.cs", "start": {"col": 25, "line": 94, "offset": 3377}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 94, "offset": 3471}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_10.cs", "start": {"col": 115, "line": 94, "offset": 3467}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "99f33a14b136ed7be7950f25ac2da9f0f3283e8f8922507418a0893b96dabd3fb12b2627243cdf6777aec4b582627d965d9a051e3d6d235b0ca6f5c9bda1bdae_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 94, "offset": 3390}, "start": {"col": 25, "line": 94, "offset": 3377}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 94, "offset": 3402}, "start": {"col": 39, "line": 94, "offset": 3391}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 94, "offset": 3471}, "start": {"col": 115, "line": 94, "offset": 3467}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_10.cs", "start": {"col": 25, "line": 94, "offset": 3377}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 141, "offset": 5361}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 141, "offset": 5361}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_10.cs", "start": {"col": 25, "line": 141, "offset": 5262}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 141, "offset": 5356}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_10.cs", "start": {"col": 115, "line": 141, "offset": 5352}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "99f33a14b136ed7be7950f25ac2da9f0f3283e8f8922507418a0893b96dabd3fb12b2627243cdf6777aec4b582627d965d9a051e3d6d235b0ca6f5c9bda1bdae_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 141, "offset": 5275}, "start": {"col": 25, "line": 141, "offset": 5262}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 141, "offset": 5287}, "start": {"col": 39, "line": 141, "offset": 5276}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 141, "offset": 5356}, "start": {"col": 115, "line": 141, "offset": 5352}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_10.cs", "start": {"col": 25, "line": 141, "offset": 5262}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 187, "offset": 7198}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 187, "offset": 7198}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_10.cs", "start": {"col": 25, "line": 187, "offset": 7099}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 187, "offset": 7193}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_10.cs", "start": {"col": 115, "line": 187, "offset": 7189}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "99f33a14b136ed7be7950f25ac2da9f0f3283e8f8922507418a0893b96dabd3fb12b2627243cdf6777aec4b582627d965d9a051e3d6d235b0ca6f5c9bda1bdae_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 187, "offset": 7112}, "start": {"col": 25, "line": 187, "offset": 7099}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 187, "offset": 7124}, "start": {"col": 39, "line": 187, "offset": 7113}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 187, "offset": 7193}, "start": {"col": 115, "line": 187, "offset": 7189}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_10.cs", "start": {"col": 25, "line": 187, "offset": 7099}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 94, "offset": 3511}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 94, "offset": 3511}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_11.cs", "start": {"col": 25, "line": 94, "offset": 3412}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 94, "offset": 3506}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_11.cs", "start": {"col": 115, "line": 94, "offset": 3502}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "b18effecc93b987d0e4c34f2cdafbf7b8b3864b12341217ad72c1bf97589d06ddd3a7afdab1002609e3232a91b761ba7c1655da8443b11a774d56713f2edbfd2_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 94, "offset": 3425}, "start": {"col": 25, "line": 94, "offset": 3412}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 94, "offset": 3437}, "start": {"col": 39, "line": 94, "offset": 3426}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 94, "offset": 3506}, "start": {"col": 115, "line": 94, "offset": 3502}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_11.cs", "start": {"col": 25, "line": 94, "offset": 3412}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 141, "offset": 5432}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 141, "offset": 5432}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_11.cs", "start": {"col": 25, "line": 141, "offset": 5333}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 141, "offset": 5427}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_11.cs", "start": {"col": 115, "line": 141, "offset": 5423}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "b18effecc93b987d0e4c34f2cdafbf7b8b3864b12341217ad72c1bf97589d06ddd3a7afdab1002609e3232a91b761ba7c1655da8443b11a774d56713f2edbfd2_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 141, "offset": 5346}, "start": {"col": 25, "line": 141, "offset": 5333}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 141, "offset": 5358}, "start": {"col": 39, "line": 141, "offset": 5347}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 141, "offset": 5427}, "start": {"col": 115, "line": 141, "offset": 5423}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_11.cs", "start": {"col": 25, "line": 141, "offset": 5333}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 187, "offset": 7287}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 187, "offset": 7287}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_11.cs", "start": {"col": 25, "line": 187, "offset": 7188}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 187, "offset": 7282}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_11.cs", "start": {"col": 115, "line": 187, "offset": 7278}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "b18effecc93b987d0e4c34f2cdafbf7b8b3864b12341217ad72c1bf97589d06ddd3a7afdab1002609e3232a91b761ba7c1655da8443b11a774d56713f2edbfd2_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 187, "offset": 7201}, "start": {"col": 25, "line": 187, "offset": 7188}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 187, "offset": 7213}, "start": {"col": 39, "line": 187, "offset": 7202}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 187, "offset": 7282}, "start": {"col": 115, "line": 187, "offset": 7278}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_11.cs", "start": {"col": 25, "line": 187, "offset": 7188}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 93, "offset": 3377}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 93, "offset": 3377}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_12.cs", "start": {"col": 25, "line": 93, "offset": 3278}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 93, "offset": 3372}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_12.cs", "start": {"col": 115, "line": 93, "offset": 3368}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "6ed7e21f5b1cdd3dfdc39d051bf8e32ae61ebe8925f34564512b880bdc04038b1c5a1d1261a9d6306c9df8bbf60efa231d13a7bfb7eb310c74eb58ea14210a4c_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 93, "offset": 3291}, "start": {"col": 25, "line": 93, "offset": 3278}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 93, "offset": 3303}, "start": {"col": 39, "line": 93, "offset": 3292}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 93, "offset": 3372}, "start": {"col": 115, "line": 93, "offset": 3368}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_12.cs", "start": {"col": 25, "line": 93, "offset": 3278}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 94, "offset": 3527}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 94, "offset": 3527}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_13.cs", "start": {"col": 25, "line": 94, "offset": 3428}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 94, "offset": 3522}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_13.cs", "start": {"col": 115, "line": 94, "offset": 3518}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "948b2dd6b3759733d959c89bb4c3da9b67e1c8ec14fd6797693fd459c2d96cf205ab12649d47bffde0f7a15f7d68c4a387f89d016724e1dab74fb6cc4b1e3498_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 94, "offset": 3441}, "start": {"col": 25, "line": 94, "offset": 3428}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 94, "offset": 3453}, "start": {"col": 39, "line": 94, "offset": 3442}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 94, "offset": 3522}, "start": {"col": 115, "line": 94, "offset": 3518}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_13.cs", "start": {"col": 25, "line": 94, "offset": 3428}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 141, "offset": 5462}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 141, "offset": 5462}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_13.cs", "start": {"col": 25, "line": 141, "offset": 5363}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 141, "offset": 5457}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_13.cs", "start": {"col": 115, "line": 141, "offset": 5453}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "948b2dd6b3759733d959c89bb4c3da9b67e1c8ec14fd6797693fd459c2d96cf205ab12649d47bffde0f7a15f7d68c4a387f89d016724e1dab74fb6cc4b1e3498_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 141, "offset": 5376}, "start": {"col": 25, "line": 141, "offset": 5363}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 141, "offset": 5388}, "start": {"col": 39, "line": 141, "offset": 5377}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 141, "offset": 5457}, "start": {"col": 115, "line": 141, "offset": 5453}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_13.cs", "start": {"col": 25, "line": 141, "offset": 5363}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 187, "offset": 7325}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 187, "offset": 7325}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_13.cs", "start": {"col": 25, "line": 187, "offset": 7226}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 187, "offset": 7320}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_13.cs", "start": {"col": 115, "line": 187, "offset": 7316}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "948b2dd6b3759733d959c89bb4c3da9b67e1c8ec14fd6797693fd459c2d96cf205ab12649d47bffde0f7a15f7d68c4a387f89d016724e1dab74fb6cc4b1e3498_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 187, "offset": 7239}, "start": {"col": 25, "line": 187, "offset": 7226}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 187, "offset": 7251}, "start": {"col": 39, "line": 187, "offset": 7240}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 187, "offset": 7320}, "start": {"col": 115, "line": 187, "offset": 7316}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_13.cs", "start": {"col": 25, "line": 187, "offset": 7226}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 94, "offset": 3487}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 94, "offset": 3487}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_14.cs", "start": {"col": 25, "line": 94, "offset": 3388}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 94, "offset": 3482}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_14.cs", "start": {"col": 115, "line": 94, "offset": 3478}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "7c50da1d6c6496746debd3a1fb48c0ed784c96e56267f2e0426c8def1d49089f7b8e622cca5a796c5d27e360339ea88df2f7911dd1c5aa6a1fdc97327aa9803b_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 94, "offset": 3401}, "start": {"col": 25, "line": 94, "offset": 3388}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 94, "offset": 3413}, "start": {"col": 39, "line": 94, "offset": 3402}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 94, "offset": 3482}, "start": {"col": 115, "line": 94, "offset": 3478}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_14.cs", "start": {"col": 25, "line": 94, "offset": 3388}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 141, "offset": 5382}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 141, "offset": 5382}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_14.cs", "start": {"col": 25, "line": 141, "offset": 5283}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 141, "offset": 5377}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_14.cs", "start": {"col": 115, "line": 141, "offset": 5373}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "7c50da1d6c6496746debd3a1fb48c0ed784c96e56267f2e0426c8def1d49089f7b8e622cca5a796c5d27e360339ea88df2f7911dd1c5aa6a1fdc97327aa9803b_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 141, "offset": 5296}, "start": {"col": 25, "line": 141, "offset": 5283}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 141, "offset": 5308}, "start": {"col": 39, "line": 141, "offset": 5297}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 141, "offset": 5377}, "start": {"col": 115, "line": 141, "offset": 5373}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_14.cs", "start": {"col": 25, "line": 141, "offset": 5283}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 187, "offset": 7225}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 187, "offset": 7225}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_14.cs", "start": {"col": 25, "line": 187, "offset": 7126}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 187, "offset": 7220}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_14.cs", "start": {"col": 115, "line": 187, "offset": 7216}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "7c50da1d6c6496746debd3a1fb48c0ed784c96e56267f2e0426c8def1d49089f7b8e622cca5a796c5d27e360339ea88df2f7911dd1c5aa6a1fdc97327aa9803b_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 187, "offset": 7139}, "start": {"col": 25, "line": 187, "offset": 7126}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 187, "offset": 7151}, "start": {"col": 39, "line": 187, "offset": 7140}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 187, "offset": 7220}, "start": {"col": 115, "line": 187, "offset": 7216}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_14.cs", "start": {"col": 25, "line": 187, "offset": 7126}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 96, "offset": 3499}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 96, "offset": 3499}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_15.cs", "start": {"col": 25, "line": 96, "offset": 3400}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 96, "offset": 3494}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_15.cs", "start": {"col": 115, "line": 96, "offset": 3490}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "4aa0f59759e1269cde6c9d340a81651b14e696b3614bed9c46b3d082392d3ce97bbece8a5a81273ecb808fbe02546ec82ca95f20ce9a358cf0c9f7b95d941e02_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 96, "offset": 3413}, "start": {"col": 25, "line": 96, "offset": 3400}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 96, "offset": 3425}, "start": {"col": 39, "line": 96, "offset": 3414}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 96, "offset": 3494}, "start": {"col": 115, "line": 96, "offset": 3490}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_15.cs", "start": {"col": 25, "line": 96, "offset": 3400}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 150, "offset": 5604}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 150, "offset": 5604}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_15.cs", "start": {"col": 25, "line": 150, "offset": 5505}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 150, "offset": 5599}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_15.cs", "start": {"col": 115, "line": 150, "offset": 5595}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "4aa0f59759e1269cde6c9d340a81651b14e696b3614bed9c46b3d082392d3ce97bbece8a5a81273ecb808fbe02546ec82ca95f20ce9a358cf0c9f7b95d941e02_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 150, "offset": 5518}, "start": {"col": 25, "line": 150, "offset": 5505}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 150, "offset": 5530}, "start": {"col": 39, "line": 150, "offset": 5519}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 150, "offset": 5599}, "start": {"col": 115, "line": 150, "offset": 5595}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_15.cs", "start": {"col": 25, "line": 150, "offset": 5505}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 203, "offset": 7679}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 203, "offset": 7679}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_15.cs", "start": {"col": 25, "line": 203, "offset": 7580}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 203, "offset": 7674}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_15.cs", "start": {"col": 115, "line": 203, "offset": 7670}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "4aa0f59759e1269cde6c9d340a81651b14e696b3614bed9c46b3d082392d3ce97bbece8a5a81273ecb808fbe02546ec82ca95f20ce9a358cf0c9f7b95d941e02_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 203, "offset": 7593}, "start": {"col": 25, "line": 203, "offset": 7580}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 203, "offset": 7605}, "start": {"col": 39, "line": 203, "offset": 7594}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 203, "offset": 7674}, "start": {"col": 115, "line": 203, "offset": 7670}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_15.cs", "start": {"col": 25, "line": 203, "offset": 7580}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 89, "offset": 3223}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 89, "offset": 3223}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_16.cs", "start": {"col": 25, "line": 89, "offset": 3124}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 89, "offset": 3218}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_16.cs", "start": {"col": 115, "line": 89, "offset": 3214}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "714bdf18974f9515f6d75a950b48d89699cf5861f992fa36bc5f9a5deebf0da8cdf5a8bbac14935232b9136aae4bcda3f132a4ccbdccc7bb9237266fd30c3fe6_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 89, "offset": 3137}, "start": {"col": 25, "line": 89, "offset": 3124}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 89, "offset": 3149}, "start": {"col": 39, "line": 89, "offset": 3138}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 89, "offset": 3218}, "start": {"col": 115, "line": 89, "offset": 3214}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_16.cs", "start": {"col": 25, "line": 89, "offset": 3124}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 132, "offset": 4851}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 132, "offset": 4851}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_16.cs", "start": {"col": 25, "line": 132, "offset": 4752}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 132, "offset": 4846}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_16.cs", "start": {"col": 115, "line": 132, "offset": 4842}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "714bdf18974f9515f6d75a950b48d89699cf5861f992fa36bc5f9a5deebf0da8cdf5a8bbac14935232b9136aae4bcda3f132a4ccbdccc7bb9237266fd30c3fe6_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 132, "offset": 4765}, "start": {"col": 25, "line": 132, "offset": 4752}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 132, "offset": 4777}, "start": {"col": 39, "line": 132, "offset": 4766}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 132, "offset": 4846}, "start": {"col": 115, "line": 132, "offset": 4842}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_16.cs", "start": {"col": 25, "line": 132, "offset": 4752}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 89, "offset": 3210}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 89, "offset": 3210}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_17.cs", "start": {"col": 25, "line": 89, "offset": 3111}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 89, "offset": 3205}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_17.cs", "start": {"col": 115, "line": 89, "offset": 3201}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "557df481c5397dcd398196380532abaebe7e3b40b8ed97cd3fe5958679a7743b5a90d356e4279ffd91ec6c8fdcfa852531604f2b2c216eb815a74ae17f055ff3_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 89, "offset": 3124}, "start": {"col": 25, "line": 89, "offset": 3111}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 89, "offset": 3136}, "start": {"col": 39, "line": 89, "offset": 3125}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 89, "offset": 3205}, "start": {"col": 115, "line": 89, "offset": 3201}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_17.cs", "start": {"col": 25, "line": 89, "offset": 3111}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 127, "offset": 4761}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 127, "offset": 4761}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_17.cs", "start": {"col": 25, "line": 127, "offset": 4662}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 127, "offset": 4756}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_17.cs", "start": {"col": 115, "line": 127, "offset": 4752}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "557df481c5397dcd398196380532abaebe7e3b40b8ed97cd3fe5958679a7743b5a90d356e4279ffd91ec6c8fdcfa852531604f2b2c216eb815a74ae17f055ff3_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 127, "offset": 4675}, "start": {"col": 25, "line": 127, "offset": 4662}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 127, "offset": 4687}, "start": {"col": 39, "line": 127, "offset": 4676}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 127, "offset": 4756}, "start": {"col": 115, "line": 127, "offset": 4752}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_17.cs", "start": {"col": 25, "line": 127, "offset": 4662}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 94, "offset": 3374}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 94, "offset": 3374}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_21.cs", "start": {"col": 25, "line": 94, "offset": 3275}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 94, "offset": 3369}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_21.cs", "start": {"col": 115, "line": 94, "offset": 3365}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "d61a938b31c32d2f7bb96796e52131a7dc192eae17da14e5b26ef221a03dfcd3846aad9361caf86c83ca1fb1b50953414810f26cd45d0266f73a7a55e62a0de0_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 94, "offset": 3288}, "start": {"col": 25, "line": 94, "offset": 3275}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 94, "offset": 3300}, "start": {"col": 39, "line": 94, "offset": 3289}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 94, "offset": 3369}, "start": {"col": 115, "line": 94, "offset": 3365}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_21.cs", "start": {"col": 25, "line": 94, "offset": 3275}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 318, "offset": 12084}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 318, "offset": 12084}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_21.cs", "start": {"col": 25, "line": 318, "offset": 11985}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 318, "offset": 12079}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_21.cs", "start": {"col": 115, "line": 318, "offset": 12075}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "d61a938b31c32d2f7bb96796e52131a7dc192eae17da14e5b26ef221a03dfcd3846aad9361caf86c83ca1fb1b50953414810f26cd45d0266f73a7a55e62a0de0_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 318, "offset": 11998}, "start": {"col": 25, "line": 318, "offset": 11985}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 318, "offset": 12010}, "start": {"col": 39, "line": 318, "offset": 11999}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 318, "offset": 12079}, "start": {"col": 115, "line": 318, "offset": 12075}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_21.cs", "start": {"col": 25, "line": 318, "offset": 11985}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 43, "offset": 1741}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 43, "offset": 1741}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_22b.cs", "start": {"col": 25, "line": 43, "offset": 1642}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 43, "offset": 1736}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_22b.cs", "start": {"col": 115, "line": 43, "offset": 1732}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "0fac20c1dd9e256f379631909bbeb25da3a9176b054ef644658cdf664fa3d7b2d63401fe3c10b37afaf3c097c5555f0e5738254a02041f6ddd2628e282709109_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 43, "offset": 1655}, "start": {"col": 25, "line": 43, "offset": 1642}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 43, "offset": 1667}, "start": {"col": 39, "line": 43, "offset": 1656}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 43, "offset": 1736}, "start": {"col": 115, "line": 43, "offset": 1732}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_22b.cs", "start": {"col": 25, "line": 43, "offset": 1642}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 173, "offset": 7512}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 173, "offset": 7512}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_22b.cs", "start": {"col": 25, "line": 173, "offset": 7413}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 173, "offset": 7507}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_22b.cs", "start": {"col": 115, "line": 173, "offset": 7503}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "0fac20c1dd9e256f379631909bbeb25da3a9176b054ef644658cdf664fa3d7b2d63401fe3c10b37afaf3c097c5555f0e5738254a02041f6ddd2628e282709109_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 173, "offset": 7426}, "start": {"col": 25, "line": 173, "offset": 7413}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 173, "offset": 7438}, "start": {"col": 39, "line": 173, "offset": 7427}}, "$X": {"abstract_content": "data", "end": {"col": 119, "line": 173, "offset": 7507}, "start": {"col": 115, "line": 173, "offset": 7503}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_22b.cs", "start": {"col": 25, "line": 173, "offset": 7413}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 89, "offset": 3294}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "dataCopy", "location": {"end": {"col": 21, "line": 76, "offset": 2640}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_31.cs", "start": {"col": 13, "line": 76, "offset": 2632}}}, {"content": "data", "location": {"end": {"col": 24, "line": 79, "offset": 2695}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_31.cs", "start": {"col": 20, "line": 79, "offset": 2691}}}], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 89, "offset": 3294}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_31.cs", "start": {"col": 25, "line": 89, "offset": 3195}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 28, "line": 76, "offset": 2647}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_31.cs", "start": {"col": 24, "line": 76, "offset": 2643}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "b5fdaafbfb4314eae1a89a13278b4be98c8c75f4e01baccf9a8f1779ada57d58b851345b9a73559552e99351fea1944eb140f4e4284af31924e7424aa7356a5d_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 89, "offset": 3208}, "start": {"col": 25, "line": 89, "offset": 3195}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 89, "offset": 3220}, "start": {"col": 39, "line": 89, "offset": 3209}}, "$X": {"abstract_content": "data", "end": {"col": 28, "line": 76, "offset": 2647}, "start": {"col": 24, "line": 76, "offset": 2643}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_31.cs", "start": {"col": 25, "line": 89, "offset": 3195}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 45, "offset": 1653}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 45, "offset": 1653}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_41.cs", "start": {"col": 21, "line": 45, "offset": 1554}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 45, "offset": 1648}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_41.cs", "start": {"col": 111, "line": 45, "offset": 1644}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "3e32b403e7d1a42bd07b5a5c780652a032fed40c5bcf9566de1433c31d60d233d85c525fc37363246ff5253cbbc6230e1fab4ed2c2fe8d05bcfb608f8a9439af_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 45, "offset": 1567}, "start": {"col": 21, "line": 45, "offset": 1554}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 45, "offset": 1579}, "start": {"col": 35, "line": 45, "offset": 1568}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 45, "offset": 1648}, "start": {"col": 111, "line": 45, "offset": 1644}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_41.cs", "start": {"col": 21, "line": 45, "offset": 1554}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 125, "offset": 4557}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 125, "offset": 4557}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_41.cs", "start": {"col": 21, "line": 125, "offset": 4458}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 125, "offset": 4552}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_41.cs", "start": {"col": 111, "line": 125, "offset": 4548}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "3e32b403e7d1a42bd07b5a5c780652a032fed40c5bcf9566de1433c31d60d233d85c525fc37363246ff5253cbbc6230e1fab4ed2c2fe8d05bcfb608f8a9439af_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 125, "offset": 4471}, "start": {"col": 21, "line": 125, "offset": 4458}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 125, "offset": 4483}, "start": {"col": 35, "line": 125, "offset": 4472}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 125, "offset": 4552}, "start": {"col": 111, "line": 125, "offset": 4548}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_41.cs", "start": {"col": 21, "line": 125, "offset": 4458}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 89, "offset": 3148}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 89, "offset": 3148}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_42.cs", "start": {"col": 21, "line": 89, "offset": 3049}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 89, "offset": 3143}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_42.cs", "start": {"col": 111, "line": 89, "offset": 3139}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "7eff6ed0b63603c2ae843193893173e635f88f5fc16064bbfc13eb4fb8eaf055c7d84a18455defa53cf13947e769569eb7d523257fdae41d948eaee6fe851ef9_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 89, "offset": 3062}, "start": {"col": 21, "line": 89, "offset": 3049}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 89, "offset": 3074}, "start": {"col": 35, "line": 89, "offset": 3063}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 89, "offset": 3143}, "propagated_value": {"svalue_abstract_content": "BadSource(req resp)", "svalue_end": {"col": 43, "line": 79, "offset": 2600}, "svalue_start": {"col": 23, "line": 79, "offset": 2580}}, "start": {"col": 111, "line": 89, "offset": 3139}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_42.cs", "start": {"col": 21, "line": 89, "offset": 3049}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 130, "offset": 4707}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 130, "offset": 4707}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_42.cs", "start": {"col": 21, "line": 130, "offset": 4608}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 130, "offset": 4702}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_42.cs", "start": {"col": 111, "line": 130, "offset": 4698}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "7eff6ed0b63603c2ae843193893173e635f88f5fc16064bbfc13eb4fb8eaf055c7d84a18455defa53cf13947e769569eb7d523257fdae41d948eaee6fe851ef9_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 130, "offset": 4621}, "start": {"col": 21, "line": 130, "offset": 4608}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 130, "offset": 4633}, "start": {"col": 35, "line": 130, "offset": 4622}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 130, "offset": 4702}, "propagated_value": {"svalue_abstract_content": "GoodG2BSource(req resp)", "svalue_end": {"col": 47, "line": 120, "offset": 4159}, "svalue_start": {"col": 23, "line": 120, "offset": 4135}}, "start": {"col": 111, "line": 130, "offset": 4698}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_42.cs", "start": {"col": 21, "line": 130, "offset": 4608}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 50, "offset": 1783}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "data", "location": {"end": {"col": 20, "line": 40, "offset": 1225}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_45.cs", "start": {"col": 16, "line": 40, "offset": 1221}}}], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 50, "offset": 1783}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_45.cs", "start": {"col": 21, "line": 50, "offset": 1684}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 30, "line": 40, "offset": 1235}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_45.cs", "start": {"col": 23, "line": 40, "offset": 1228}}, "dataBad"]]}, "engine_kind": "OSS", "fingerprint": "27f7f8591735c2166e7afc63b9fb635a7c66cb1bf469eaac3357d9f8f8a3ac73be1e94233ab8961e368650bcbb0a2d25315d2961824a5e90de12bec716417028_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 50, "offset": 1697}, "start": {"col": 21, "line": 50, "offset": 1684}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 50, "offset": 1709}, "start": {"col": 35, "line": 50, "offset": 1698}}, "$X": {"abstract_content": "dataBad", "end": {"col": 30, "line": 40, "offset": 1235}, "start": {"col": 23, "line": 40, "offset": 1228}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_45.cs", "start": {"col": 21, "line": 50, "offset": 1684}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 132, "offset": 4719}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "data", "location": {"end": {"col": 20, "line": 122, "offset": 4157}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_45.cs", "start": {"col": 16, "line": 122, "offset": 4153}}}], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 132, "offset": 4719}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_45.cs", "start": {"col": 21, "line": 132, "offset": 4620}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 34, "line": 122, "offset": 4171}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_45.cs", "start": {"col": 23, "line": 122, "offset": 4160}}, "dataGoodG2B"]]}, "engine_kind": "OSS", "fingerprint": "2450fea5db2bbce1653383695bfdd075f7c02469c166dd69bb78ed912bced0c4cd92387724c448546d8a248e0c88f615dcad7d1a626fbfbdb432589f7faa7744_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 132, "offset": 4633}, "start": {"col": 21, "line": 132, "offset": 4620}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 132, "offset": 4645}, "start": {"col": 35, "line": 132, "offset": 4634}}, "$X": {"abstract_content": "dataGoodG2B", "end": {"col": 34, "line": 122, "offset": 4171}, "start": {"col": 23, "line": 122, "offset": 4160}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_45.cs", "start": {"col": 21, "line": 132, "offset": 4620}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 41, "offset": 1592}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 41, "offset": 1592}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_51b.cs", "start": {"col": 21, "line": 41, "offset": 1493}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 41, "offset": 1587}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_51b.cs", "start": {"col": 111, "line": 41, "offset": 1583}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "25de3f39a9c25e5b80114f4bbb652de4b299f1f8ac642702fad5a28aab09bd33dda4a5cebed5934aacdf38ac12c8e8e8aff571e9a4af4dd8eb99b578482b89fe_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 41, "offset": 1506}, "start": {"col": 21, "line": 41, "offset": 1493}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 41, "offset": 1518}, "start": {"col": 35, "line": 41, "offset": 1507}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 41, "offset": 1587}, "start": {"col": 111, "line": 41, "offset": 1583}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_51b.cs", "start": {"col": 21, "line": 41, "offset": 1493}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 74, "offset": 2908}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 74, "offset": 2908}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_51b.cs", "start": {"col": 21, "line": 74, "offset": 2809}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 74, "offset": 2903}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_51b.cs", "start": {"col": 111, "line": 74, "offset": 2899}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "25de3f39a9c25e5b80114f4bbb652de4b299f1f8ac642702fad5a28aab09bd33dda4a5cebed5934aacdf38ac12c8e8e8aff571e9a4af4dd8eb99b578482b89fe_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 74, "offset": 2822}, "start": {"col": 21, "line": 74, "offset": 2809}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 74, "offset": 2834}, "start": {"col": 35, "line": 74, "offset": 2823}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 74, "offset": 2903}, "start": {"col": 111, "line": 74, "offset": 2899}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_51b.cs", "start": {"col": 21, "line": 74, "offset": 2809}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 41, "offset": 1607}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 41, "offset": 1607}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_52c.cs", "start": {"col": 21, "line": 41, "offset": 1508}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 41, "offset": 1602}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_52c.cs", "start": {"col": 111, "line": 41, "offset": 1598}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "d01fe2c48d280acad443abd14c84f38b87dcc56868640d2ed7cdce784a927795468ae09ace81b02ac714f3998425ea16970f44c7202390a6ac7ce0273acf7010_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 41, "offset": 1521}, "start": {"col": 21, "line": 41, "offset": 1508}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 41, "offset": 1533}, "start": {"col": 35, "line": 41, "offset": 1522}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 41, "offset": 1602}, "start": {"col": 111, "line": 41, "offset": 1598}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_52c.cs", "start": {"col": 21, "line": 41, "offset": 1508}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 74, "offset": 2923}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 74, "offset": 2923}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_52c.cs", "start": {"col": 21, "line": 74, "offset": 2824}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 74, "offset": 2918}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_52c.cs", "start": {"col": 111, "line": 74, "offset": 2914}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "d01fe2c48d280acad443abd14c84f38b87dcc56868640d2ed7cdce784a927795468ae09ace81b02ac714f3998425ea16970f44c7202390a6ac7ce0273acf7010_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 74, "offset": 2837}, "start": {"col": 21, "line": 74, "offset": 2824}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 74, "offset": 2849}, "start": {"col": 35, "line": 74, "offset": 2838}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 74, "offset": 2918}, "start": {"col": 111, "line": 74, "offset": 2914}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_52c.cs", "start": {"col": 21, "line": 74, "offset": 2824}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 41, "offset": 1634}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 41, "offset": 1634}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_53d.cs", "start": {"col": 21, "line": 41, "offset": 1535}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 41, "offset": 1629}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_53d.cs", "start": {"col": 111, "line": 41, "offset": 1625}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "841588486dae9af41318561a7a061f9873cdef718c1a115ac0a9c117a36fed05b3368b7070e71a8827e91d43795606c1224be26f5c533d95b85b778b3b8581d2_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 41, "offset": 1548}, "start": {"col": 21, "line": 41, "offset": 1535}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 41, "offset": 1560}, "start": {"col": 35, "line": 41, "offset": 1549}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 41, "offset": 1629}, "start": {"col": 111, "line": 41, "offset": 1625}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_53d.cs", "start": {"col": 21, "line": 41, "offset": 1535}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 74, "offset": 2950}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 74, "offset": 2950}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_53d.cs", "start": {"col": 21, "line": 74, "offset": 2851}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 74, "offset": 2945}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_53d.cs", "start": {"col": 111, "line": 74, "offset": 2941}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "841588486dae9af41318561a7a061f9873cdef718c1a115ac0a9c117a36fed05b3368b7070e71a8827e91d43795606c1224be26f5c533d95b85b778b3b8581d2_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 74, "offset": 2864}, "start": {"col": 21, "line": 74, "offset": 2851}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 74, "offset": 2876}, "start": {"col": 35, "line": 74, "offset": 2865}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 74, "offset": 2945}, "start": {"col": 111, "line": 74, "offset": 2941}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_53d.cs", "start": {"col": 21, "line": 74, "offset": 2851}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 41, "offset": 1635}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 41, "offset": 1635}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_54e.cs", "start": {"col": 21, "line": 41, "offset": 1536}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 41, "offset": 1630}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_54e.cs", "start": {"col": 111, "line": 41, "offset": 1626}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "1a6d15c6a668fb5e3882ef96a8f13bdc24b1d0b77028931fc9573e905d42c2dfa15223a7d241d2274f27888eef03ce8625f79d720bf37f1758300d54fd84535d_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 41, "offset": 1549}, "start": {"col": 21, "line": 41, "offset": 1536}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 41, "offset": 1561}, "start": {"col": 35, "line": 41, "offset": 1550}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 41, "offset": 1630}, "start": {"col": 111, "line": 41, "offset": 1626}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_54e.cs", "start": {"col": 21, "line": 41, "offset": 1536}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 74, "offset": 2951}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 74, "offset": 2951}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_54e.cs", "start": {"col": 21, "line": 74, "offset": 2852}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 74, "offset": 2946}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_54e.cs", "start": {"col": 111, "line": 74, "offset": 2942}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "1a6d15c6a668fb5e3882ef96a8f13bdc24b1d0b77028931fc9573e905d42c2dfa15223a7d241d2274f27888eef03ce8625f79d720bf37f1758300d54fd84535d_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 74, "offset": 2865}, "start": {"col": 21, "line": 74, "offset": 2852}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 74, "offset": 2877}, "start": {"col": 35, "line": 74, "offset": 2866}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 74, "offset": 2946}, "start": {"col": 111, "line": 74, "offset": 2942}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_54e.cs", "start": {"col": 21, "line": 74, "offset": 2852}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 42, "offset": 1684}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 42, "offset": 1684}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_61a.cs", "start": {"col": 21, "line": 42, "offset": 1585}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 42, "offset": 1679}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_61a.cs", "start": {"col": 111, "line": 42, "offset": 1675}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "e49053659f3cfe087d20d1831864776534fe6993a9d5de2e0608ec4664d2b2ad05e82e289a01f7509dcb6b99f7db93c3506f285077f2d4af4fff00dd3497248d_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 42, "offset": 1598}, "start": {"col": 21, "line": 42, "offset": 1585}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 42, "offset": 1610}, "start": {"col": 35, "line": 42, "offset": 1599}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 42, "offset": 1679}, "propagated_value": {"svalue_abstract_content": "CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_61b.BadSource(req resp)", "svalue_end": {"col": 99, "line": 32, "offset": 1136}, "svalue_start": {"col": 23, "line": 32, "offset": 1060}}, "start": {"col": 111, "line": 42, "offset": 1675}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_61a.cs", "start": {"col": 21, "line": 42, "offset": 1585}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 81, "offset": 3237}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 81, "offset": 3237}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_61a.cs", "start": {"col": 21, "line": 81, "offset": 3138}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 81, "offset": 3232}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_61a.cs", "start": {"col": 111, "line": 81, "offset": 3228}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "e49053659f3cfe087d20d1831864776534fe6993a9d5de2e0608ec4664d2b2ad05e82e289a01f7509dcb6b99f7db93c3506f285077f2d4af4fff00dd3497248d_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 81, "offset": 3151}, "start": {"col": 21, "line": 81, "offset": 3138}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 81, "offset": 3163}, "start": {"col": 35, "line": 81, "offset": 3152}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 81, "offset": 3232}, "propagated_value": {"svalue_abstract_content": "CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_61b.GoodG2BSource(req resp)", "svalue_end": {"col": 103, "line": 71, "offset": 2689}, "svalue_start": {"col": 23, "line": 71, "offset": 2609}}, "start": {"col": 111, "line": 81, "offset": 3228}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_61a.cs", "start": {"col": 21, "line": 81, "offset": 3138}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 42, "offset": 1636}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 42, "offset": 1636}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_66b.cs", "start": {"col": 21, "line": 42, "offset": 1537}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 42, "offset": 1631}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_66b.cs", "start": {"col": 111, "line": 42, "offset": 1627}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "ce436e8bc3b2276482b553c00e87c1ff8684006e9d5e678e16d46b5e30cc3f1bc47ff8f77b0274db8ba3390a40987a939daf7473818292be83c398d6710149c8_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 42, "offset": 1550}, "start": {"col": 21, "line": 42, "offset": 1537}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 42, "offset": 1562}, "start": {"col": 35, "line": 42, "offset": 1551}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 42, "offset": 1631}, "start": {"col": 111, "line": 42, "offset": 1627}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_66b.cs", "start": {"col": 21, "line": 42, "offset": 1537}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 76, "offset": 2996}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 76, "offset": 2996}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_66b.cs", "start": {"col": 21, "line": 76, "offset": 2897}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 76, "offset": 2991}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_66b.cs", "start": {"col": 111, "line": 76, "offset": 2987}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "ce436e8bc3b2276482b553c00e87c1ff8684006e9d5e678e16d46b5e30cc3f1bc47ff8f77b0274db8ba3390a40987a939daf7473818292be83c398d6710149c8_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 76, "offset": 2910}, "start": {"col": 21, "line": 76, "offset": 2897}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 76, "offset": 2922}, "start": {"col": 35, "line": 76, "offset": 2911}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 76, "offset": 2991}, "start": {"col": 111, "line": 76, "offset": 2987}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_66b.cs", "start": {"col": 21, "line": 76, "offset": 2897}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 42, "offset": 1710}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 42, "offset": 1710}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_67b.cs", "start": {"col": 21, "line": 42, "offset": 1611}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 42, "offset": 1705}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_67b.cs", "start": {"col": 111, "line": 42, "offset": 1701}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "a2f8a5b4fd21bc04b93e8d9ad71aa48b0f6ed18132172995f45535d8a25b499d39d0f3ab3c963cdb31e9c55c49c3d42eec02f4f3422ab6e7d44bf6aa7d680c27_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 42, "offset": 1624}, "start": {"col": 21, "line": 42, "offset": 1611}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 42, "offset": 1636}, "start": {"col": 35, "line": 42, "offset": 1625}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 42, "offset": 1705}, "propagated_value": {"svalue_abstract_content": "dataContainer.containerOne", "svalue_end": {"col": 49, "line": 32, "offset": 1162}, "svalue_start": {"col": 23, "line": 32, "offset": 1136}}, "start": {"col": 111, "line": 42, "offset": 1701}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_67b.cs", "start": {"col": 21, "line": 42, "offset": 1611}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 76, "offset": 3145}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 76, "offset": 3145}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_67b.cs", "start": {"col": 21, "line": 76, "offset": 3046}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 76, "offset": 3140}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_67b.cs", "start": {"col": 111, "line": 76, "offset": 3136}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "a2f8a5b4fd21bc04b93e8d9ad71aa48b0f6ed18132172995f45535d8a25b499d39d0f3ab3c963cdb31e9c55c49c3d42eec02f4f3422ab6e7d44bf6aa7d680c27_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 76, "offset": 3059}, "start": {"col": 21, "line": 76, "offset": 3046}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 76, "offset": 3071}, "start": {"col": 35, "line": 76, "offset": 3060}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 76, "offset": 3140}, "propagated_value": {"svalue_abstract_content": "dataContainer.containerOne", "svalue_end": {"col": 49, "line": 66, "offset": 2597}, "svalue_start": {"col": 23, "line": 66, "offset": 2571}}, "start": {"col": 111, "line": 76, "offset": 3136}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_67b.cs", "start": {"col": 21, "line": 76, "offset": 3046}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 42, "offset": 1680}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 42, "offset": 1680}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_68b.cs", "start": {"col": 21, "line": 42, "offset": 1581}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 42, "offset": 1675}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_68b.cs", "start": {"col": 111, "line": 42, "offset": 1671}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "68e626ebe7580a9831bbc86a2717dfb47222a77f1a28132256b1c68f24ee8c7d3583bf0b9b505a94f19b19a5cbb5986b977b67d2e95f91995654dc3af3753e7a_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 42, "offset": 1594}, "start": {"col": 21, "line": 42, "offset": 1581}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 42, "offset": 1606}, "start": {"col": 35, "line": 42, "offset": 1595}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 42, "offset": 1675}, "propagated_value": {"svalue_abstract_content": "CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_68a.data", "svalue_end": {"col": 83, "line": 32, "offset": 1132}, "svalue_start": {"col": 23, "line": 32, "offset": 1072}}, "start": {"col": 111, "line": 42, "offset": 1671}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_68b.cs", "start": {"col": 21, "line": 42, "offset": 1581}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 76, "offset": 3067}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 76, "offset": 3067}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_68b.cs", "start": {"col": 21, "line": 76, "offset": 2968}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 76, "offset": 3062}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_68b.cs", "start": {"col": 111, "line": 76, "offset": 3058}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "68e626ebe7580a9831bbc86a2717dfb47222a77f1a28132256b1c68f24ee8c7d3583bf0b9b505a94f19b19a5cbb5986b977b67d2e95f91995654dc3af3753e7a_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 76, "offset": 2981}, "start": {"col": 21, "line": 76, "offset": 2968}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 76, "offset": 2993}, "start": {"col": 35, "line": 76, "offset": 2982}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 76, "offset": 3062}, "propagated_value": {"svalue_abstract_content": "CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_68a.data", "svalue_end": {"col": 83, "line": 66, "offset": 2519}, "svalue_start": {"col": 23, "line": 66, "offset": 2459}}, "start": {"col": 111, "line": 76, "offset": 3058}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_68b.cs", "start": {"col": 21, "line": 76, "offset": 2968}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 43, "offset": 1658}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "data", "location": {"end": {"col": 20, "line": 33, "offset": 1089}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_71b.cs", "start": {"col": 16, "line": 33, "offset": 1085}}}], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 43, "offset": 1658}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_71b.cs", "start": {"col": 21, "line": 43, "offset": 1559}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 41, "line": 33, "offset": 1110}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_71b.cs", "start": {"col": 23, "line": 33, "offset": 1092}}, "(string)dataObject"]]}, "engine_kind": "OSS", "fingerprint": "a53f773f40758534ff4446d7bfa6df7ec5d79de547f5c56fd340cee4b4fe459de1883dd3d3568bb07e23031ba2f767b3b7feaafcdf84e1067bbcfdbdde26ce72_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 43, "offset": 1572}, "start": {"col": 21, "line": 43, "offset": 1559}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 43, "offset": 1584}, "start": {"col": 35, "line": 43, "offset": 1573}}, "$X": {"abstract_content": "(string dataObject", "end": {"col": 41, "line": 33, "offset": 1110}, "start": {"col": 23, "line": 33, "offset": 1092}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_71b.cs", "start": {"col": 21, "line": 43, "offset": 1559}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 77, "offset": 3023}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "data", "location": {"end": {"col": 20, "line": 67, "offset": 2454}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_71b.cs", "start": {"col": 16, "line": 67, "offset": 2450}}}], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 77, "offset": 3023}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_71b.cs", "start": {"col": 21, "line": 77, "offset": 2924}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 41, "line": 67, "offset": 2475}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_71b.cs", "start": {"col": 23, "line": 67, "offset": 2457}}, "(string)dataObject"]]}, "engine_kind": "OSS", "fingerprint": "a53f773f40758534ff4446d7bfa6df7ec5d79de547f5c56fd340cee4b4fe459de1883dd3d3568bb07e23031ba2f767b3b7feaafcdf84e1067bbcfdbdde26ce72_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 77, "offset": 2937}, "start": {"col": 21, "line": 77, "offset": 2924}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 77, "offset": 2949}, "start": {"col": 35, "line": 77, "offset": 2938}}, "$X": {"abstract_content": "(string dataObject", "end": {"col": 41, "line": 67, "offset": 2475}, "start": {"col": 23, "line": 67, "offset": 2457}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_71b.cs", "start": {"col": 21, "line": 77, "offset": 2924}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 43, "offset": 1684}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "data", "location": {"end": {"col": 20, "line": 33, "offset": 1108}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_72b.cs", "start": {"col": 16, "line": 33, "offset": 1104}}}], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 43, "offset": 1684}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_72b.cs", "start": {"col": 21, "line": 43, "offset": 1585}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 48, "line": 33, "offset": 1136}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_72b.cs", "start": {"col": 23, "line": 33, "offset": 1111}}, "(string) dataHashtable[2]"]]}, "engine_kind": "OSS", "fingerprint": "25a0b0fff8f260a64122a881b3f73039ed9fb04b3caddba6210831ec34949fa6836cca52dae8f235060af2998e79b7e07d68422fdfabfcc8424e507f26d41fd3_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 43, "offset": 1598}, "start": {"col": 21, "line": 43, "offset": 1585}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 43, "offset": 1610}, "start": {"col": 35, "line": 43, "offset": 1599}}, "$X": {"abstract_content": "(string dataHashtable[[2]]", "end": {"col": 48, "line": 33, "offset": 1136}, "start": {"col": 23, "line": 33, "offset": 1111}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_72b.cs", "start": {"col": 21, "line": 43, "offset": 1585}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 77, "offset": 3062}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "data", "location": {"end": {"col": 20, "line": 67, "offset": 2486}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_72b.cs", "start": {"col": 16, "line": 67, "offset": 2482}}}], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 77, "offset": 3062}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_72b.cs", "start": {"col": 21, "line": 77, "offset": 2963}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 48, "line": 67, "offset": 2514}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_72b.cs", "start": {"col": 23, "line": 67, "offset": 2489}}, "(string) dataHashtable[2]"]]}, "engine_kind": "OSS", "fingerprint": "25a0b0fff8f260a64122a881b3f73039ed9fb04b3caddba6210831ec34949fa6836cca52dae8f235060af2998e79b7e07d68422fdfabfcc8424e507f26d41fd3_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 77, "offset": 2976}, "start": {"col": 21, "line": 77, "offset": 2963}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 77, "offset": 2988}, "start": {"col": 35, "line": 77, "offset": 2977}}, "$X": {"abstract_content": "(string dataHashtable[[2]]", "end": {"col": 48, "line": 67, "offset": 2514}, "start": {"col": 23, "line": 67, "offset": 2489}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_72b.cs", "start": {"col": 21, "line": 77, "offset": 2963}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 43, "offset": 1703}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 43, "offset": 1703}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_73b.cs", "start": {"col": 21, "line": 43, "offset": 1604}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 43, "offset": 1698}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_73b.cs", "start": {"col": 111, "line": 43, "offset": 1694}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "0cc589ac84a10e6f673f33ae3f94c833998ad5a11ce3dc062def2a2d14032e367a58a59bb12102ecc749a2b861441e881e10ac32cfe6376256748e91793c9322_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 43, "offset": 1617}, "start": {"col": 21, "line": 43, "offset": 1604}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 43, "offset": 1629}, "start": {"col": 35, "line": 43, "offset": 1618}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 43, "offset": 1698}, "propagated_value": {"svalue_abstract_content": "dataLinkedList.Last.Value", "svalue_end": {"col": 48, "line": 33, "offset": 1155}, "svalue_start": {"col": 23, "line": 33, "offset": 1130}}, "start": {"col": 111, "line": 43, "offset": 1694}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_73b.cs", "start": {"col": 21, "line": 43, "offset": 1604}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 77, "offset": 3091}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 77, "offset": 3091}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_73b.cs", "start": {"col": 21, "line": 77, "offset": 2992}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 77, "offset": 3086}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_73b.cs", "start": {"col": 111, "line": 77, "offset": 3082}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "0cc589ac84a10e6f673f33ae3f94c833998ad5a11ce3dc062def2a2d14032e367a58a59bb12102ecc749a2b861441e881e10ac32cfe6376256748e91793c9322_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 77, "offset": 3005}, "start": {"col": 21, "line": 77, "offset": 2992}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 77, "offset": 3017}, "start": {"col": 35, "line": 77, "offset": 3006}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 77, "offset": 3086}, "propagated_value": {"svalue_abstract_content": "dataLinkedList.Last.Value", "svalue_end": {"col": 48, "line": 67, "offset": 2543}, "svalue_start": {"col": 23, "line": 67, "offset": 2518}}, "start": {"col": 111, "line": 77, "offset": 3082}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_73b.cs", "start": {"col": 21, "line": 77, "offset": 2992}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 43, "offset": 1699}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 43, "offset": 1699}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_74b.cs", "start": {"col": 21, "line": 43, "offset": 1600}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 43, "offset": 1694}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_74b.cs", "start": {"col": 111, "line": 43, "offset": 1690}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "07e77a513d26c365753715e2114f2b7db20891cca777fe1d764ac60611ff9b40f5d8b7d5d9fbadeafb154ac8bcf7d3f9bbc776daf0f8f82f186c42e6f11d223e_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 43, "offset": 1613}, "start": {"col": 21, "line": 43, "offset": 1600}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 43, "offset": 1625}, "start": {"col": 35, "line": 43, "offset": 1614}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 43, "offset": 1694}, "start": {"col": 111, "line": 43, "offset": 1690}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_74b.cs", "start": {"col": 21, "line": 43, "offset": 1600}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 77, "offset": 3084}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 77, "offset": 3084}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_74b.cs", "start": {"col": 21, "line": 77, "offset": 2985}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 77, "offset": 3079}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_74b.cs", "start": {"col": 111, "line": 77, "offset": 3075}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "07e77a513d26c365753715e2114f2b7db20891cca777fe1d764ac60611ff9b40f5d8b7d5d9fbadeafb154ac8bcf7d3f9bbc776daf0f8f82f186c42e6f11d223e_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 77, "offset": 2998}, "start": {"col": 21, "line": 77, "offset": 2985}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 77, "offset": 3010}, "start": {"col": 35, "line": 77, "offset": 2999}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 77, "offset": 3079}, "start": {"col": 111, "line": 77, "offset": 3075}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_74b.cs", "start": {"col": 21, "line": 77, "offset": 2985}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 55, "line": 80, "offset": 2754}, "extra": {"engine_kind": "OSS", "fingerprint": "4688c9a3da7ec3c69b335084c985d8581ab50eadf32c0e5ce3fb35ddecb7a7d694e98056d866cc53b8fad3eac573d6c1628e4eb3d702435dec44ce3f72d49c01_0", "is_ignored": false, "lines": "            BinaryFormatter bf = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_75a.cs", "start": {"col": 13, "line": 80, "offset": 2712}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 55, "line": 146, "offset": 5071}, "extra": {"engine_kind": "OSS", "fingerprint": "4688c9a3da7ec3c69b335084c985d8581ab50eadf32c0e5ce3fb35ddecb7a7d694e98056d866cc53b8fad3eac573d6c1628e4eb3d702435dec44ce3f72d49c01_1", "is_ignored": false, "lines": "            BinaryFormatter bf = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_75a.cs", "start": {"col": 13, "line": 146, "offset": 5029}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 55, "line": 205, "offset": 7218}, "extra": {"engine_kind": "OSS", "fingerprint": "4688c9a3da7ec3c69b335084c985d8581ab50eadf32c0e5ce3fb35ddecb7a7d694e98056d866cc53b8fad3eac573d6c1628e4eb3d702435dec44ce3f72d49c01_2", "is_ignored": false, "lines": "            BinaryFormatter bf = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_75a.cs", "start": {"col": 13, "line": 205, "offset": 7176}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 48, "line": 38, "offset": 1275}, "extra": {"engine_kind": "OSS", "fingerprint": "f4a6ad4382d6a65a3a7b5b8849ebf6e3edd126b13a4ebcbf048905d53d4a66ae8253839795a79e2ec693a6165d39f662a2744effad75fd4b5aedf8907c68354c_0", "is_ignored": false, "lines": "            var binForm = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_75b.cs", "start": {"col": 17, "line": 38, "offset": 1244}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 54, "offset": 2143}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "data", "location": {"end": {"col": 21, "line": 43, "offset": 1499}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_75b.cs", "start": {"col": 17, "line": 43, "offset": 1495}}}], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 54, "offset": 2143}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_75b.cs", "start": {"col": 25, "line": 54, "offset": 2044}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 62, "line": 43, "offset": 1540}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_75b.cs", "start": {"col": 24, "line": 43, "offset": 1502}}, "(string)binForm.Deserialize(memStream)"]]}, "engine_kind": "OSS", "fingerprint": "4a97e98009fdbf3bdc95a43a938ab111057f23be3fe831420f267d49441b60a47d1eea2b049db7a88de46111840c34280bbccb06b2ec3128d89276054652409f_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 54, "offset": 2057}, "start": {"col": 25, "line": 54, "offset": 2044}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 54, "offset": 2069}, "start": {"col": 39, "line": 54, "offset": 2058}}, "$X": {"abstract_content": "(string binForm.Deserialize(memStream)", "end": {"col": 62, "line": 43, "offset": 1540}, "start": {"col": 24, "line": 43, "offset": 1502}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_75b.cs", "start": {"col": 25, "line": 54, "offset": 2044}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 48, "line": 86, "offset": 3284}, "extra": {"engine_kind": "OSS", "fingerprint": "f4a6ad4382d6a65a3a7b5b8849ebf6e3edd126b13a4ebcbf048905d53d4a66ae8253839795a79e2ec693a6165d39f662a2744effad75fd4b5aedf8907c68354c_1", "is_ignored": false, "lines": "            var binForm = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_75b.cs", "start": {"col": 17, "line": 86, "offset": 3253}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 124, "line": 102, "offset": 4152}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "data", "location": {"end": {"col": 21, "line": 91, "offset": 3508}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_75b.cs", "start": {"col": 17, "line": 91, "offset": 3504}}}], "taint_sink": ["CliLoc", [{"end": {"col": 124, "line": 102, "offset": 4152}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_75b.cs", "start": {"col": 25, "line": 102, "offset": 4053}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 62, "line": 91, "offset": 3549}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_75b.cs", "start": {"col": 24, "line": 91, "offset": 3511}}, "(string)binForm.Deserialize(memStream)"]]}, "engine_kind": "OSS", "fingerprint": "4a97e98009fdbf3bdc95a43a938ab111057f23be3fe831420f267d49441b60a47d1eea2b049db7a88de46111840c34280bbccb06b2ec3128d89276054652409f_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 102, "offset": 4066}, "start": {"col": 25, "line": 102, "offset": 4053}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 102, "offset": 4078}, "start": {"col": 39, "line": 102, "offset": 4067}}, "$X": {"abstract_content": "(string binForm.Deserialize(memStream)", "end": {"col": 62, "line": 91, "offset": 3549}, "start": {"col": 24, "line": 91, "offset": 3511}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_75b.cs", "start": {"col": 25, "line": 102, "offset": 4053}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 48, "line": 132, "offset": 5268}, "extra": {"engine_kind": "OSS", "fingerprint": "f4a6ad4382d6a65a3a7b5b8849ebf6e3edd126b13a4ebcbf048905d53d4a66ae8253839795a79e2ec693a6165d39f662a2744effad75fd4b5aedf8907c68354c_2", "is_ignored": false, "lines": "            var binForm = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_75b.cs", "start": {"col": 17, "line": 132, "offset": 5237}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 41, "offset": 1616}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 41, "offset": 1616}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_81_bad.cs", "start": {"col": 21, "line": 41, "offset": 1517}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 41, "offset": 1611}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_81_bad.cs", "start": {"col": 111, "line": 41, "offset": 1607}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "0f1212c8167c9d3da06dc9af1a309f8764c5c22cd65fa1fe5db6925bd4c740c052ed841a82eaf4d12a396f39fea1a02f353770b048ae255a1f1d43ffddc03f64_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 41, "offset": 1530}, "start": {"col": 21, "line": 41, "offset": 1517}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 41, "offset": 1542}, "start": {"col": 35, "line": 41, "offset": 1531}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 41, "offset": 1611}, "start": {"col": 111, "line": 41, "offset": 1607}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_81_bad.cs", "start": {"col": 21, "line": 41, "offset": 1517}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 120, "line": 42, "offset": 1631}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 42, "offset": 1631}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_81_goodG2B.cs", "start": {"col": 21, "line": 42, "offset": 1532}}, "badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 115, "line": 42, "offset": 1626}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_81_goodG2B.cs", "start": {"col": 111, "line": 42, "offset": 1622}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "5f6f06d07c6b1a861b1f23f7c30fbf981cd8fd1f041a1ed6b0318065c00db58d916092a2ba1fd118063513bc9dac6898a60d2557eae2247ac0727f83c49b77db_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"insert into users (status) values ('updated') where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 42, "offset": 1545}, "start": {"col": 21, "line": 42, "offset": 1532}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 42, "offset": 1557}, "start": {"col": 35, "line": 42, "offset": 1546}}, "$X": {"abstract_content": "data", "end": {"col": 115, "line": 42, "offset": 1626}, "start": {"col": 111, "line": 42, "offset": 1622}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteNonQuery_81_goodG2B.cs", "start": {"col": 21, "line": 42, "offset": 1532}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 82, "offset": 2856}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 82, "offset": 2856}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_01.cs", "start": {"col": 21, "line": 82, "offset": 2783}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 82, "offset": 2851}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_01.cs", "start": {"col": 85, "line": 82, "offset": 2847}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "4edbe7395433f05a10a0283bcff9ed2c2b26696249ede2a9d316b3162f458ca4caa5f8738e4b66e2494fd1ccb750856a7f7fdd2c8298082133864f01ddb2dcf0_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 82, "offset": 2796}, "start": {"col": 21, "line": 82, "offset": 2783}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 82, "offset": 2808}, "start": {"col": 35, "line": 82, "offset": 2797}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 82, "offset": 2851}, "start": {"col": 85, "line": 82, "offset": 2847}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_01.cs", "start": {"col": 21, "line": 82, "offset": 2783}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 93, "offset": 3371}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 93, "offset": 3371}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_02.cs", "start": {"col": 25, "line": 93, "offset": 3298}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 93, "offset": 3366}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_02.cs", "start": {"col": 89, "line": 93, "offset": 3362}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "8ccd07e22225cd84f97a68438f059188f0bb9fe100abaf22575b0b6addd8e75acea477442ba1678316cc9b67ac31a444d6695e5ec8e45f49fd121237896f2d77_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 93, "offset": 3311}, "start": {"col": 25, "line": 93, "offset": 3298}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 93, "offset": 3323}, "start": {"col": 39, "line": 93, "offset": 3312}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 93, "offset": 3366}, "start": {"col": 89, "line": 93, "offset": 3362}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_02.cs", "start": {"col": 25, "line": 93, "offset": 3298}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 135, "offset": 5005}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 135, "offset": 5005}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_02.cs", "start": {"col": 25, "line": 135, "offset": 4932}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 135, "offset": 5000}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_02.cs", "start": {"col": 89, "line": 135, "offset": 4996}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "8ccd07e22225cd84f97a68438f059188f0bb9fe100abaf22575b0b6addd8e75acea477442ba1678316cc9b67ac31a444d6695e5ec8e45f49fd121237896f2d77_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 135, "offset": 4945}, "start": {"col": 25, "line": 135, "offset": 4932}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 135, "offset": 4957}, "start": {"col": 39, "line": 135, "offset": 4946}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 135, "offset": 5000}, "start": {"col": 89, "line": 135, "offset": 4996}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_02.cs", "start": {"col": 25, "line": 135, "offset": 4932}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 176, "offset": 6609}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 176, "offset": 6609}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_02.cs", "start": {"col": 25, "line": 176, "offset": 6536}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 176, "offset": 6604}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_02.cs", "start": {"col": 89, "line": 176, "offset": 6600}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "8ccd07e22225cd84f97a68438f059188f0bb9fe100abaf22575b0b6addd8e75acea477442ba1678316cc9b67ac31a444d6695e5ec8e45f49fd121237896f2d77_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 176, "offset": 6549}, "start": {"col": 25, "line": 176, "offset": 6536}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 176, "offset": 6561}, "start": {"col": 39, "line": 176, "offset": 6550}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 176, "offset": 6604}, "start": {"col": 89, "line": 176, "offset": 6600}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_02.cs", "start": {"col": 25, "line": 176, "offset": 6536}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 93, "offset": 3370}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 93, "offset": 3370}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_03.cs", "start": {"col": 25, "line": 93, "offset": 3297}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 93, "offset": 3365}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_03.cs", "start": {"col": 89, "line": 93, "offset": 3361}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "791d797a1c4726727ca23f9f69ef3cd279751318345d0a70be6083c9b73b73ae4bf460173ff80363407a54fdfc7c524fbc5510fc5da1383c9b5c50ff12855a86_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 93, "offset": 3310}, "start": {"col": 25, "line": 93, "offset": 3297}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 93, "offset": 3322}, "start": {"col": 39, "line": 93, "offset": 3311}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 93, "offset": 3365}, "start": {"col": 89, "line": 93, "offset": 3361}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_03.cs", "start": {"col": 25, "line": 93, "offset": 3297}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 135, "offset": 5002}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 135, "offset": 5002}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_03.cs", "start": {"col": 25, "line": 135, "offset": 4929}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 135, "offset": 4997}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_03.cs", "start": {"col": 89, "line": 135, "offset": 4993}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "791d797a1c4726727ca23f9f69ef3cd279751318345d0a70be6083c9b73b73ae4bf460173ff80363407a54fdfc7c524fbc5510fc5da1383c9b5c50ff12855a86_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 135, "offset": 4942}, "start": {"col": 25, "line": 135, "offset": 4929}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 135, "offset": 4954}, "start": {"col": 39, "line": 135, "offset": 4943}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 135, "offset": 4997}, "start": {"col": 89, "line": 135, "offset": 4993}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_03.cs", "start": {"col": 25, "line": 135, "offset": 4929}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 176, "offset": 6606}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 176, "offset": 6606}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_03.cs", "start": {"col": 25, "line": 176, "offset": 6533}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 176, "offset": 6601}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_03.cs", "start": {"col": 89, "line": 176, "offset": 6597}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "791d797a1c4726727ca23f9f69ef3cd279751318345d0a70be6083c9b73b73ae4bf460173ff80363407a54fdfc7c524fbc5510fc5da1383c9b5c50ff12855a86_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 176, "offset": 6546}, "start": {"col": 25, "line": 176, "offset": 6533}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 176, "offset": 6558}, "start": {"col": 39, "line": 176, "offset": 6547}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 176, "offset": 6601}, "start": {"col": 89, "line": 176, "offset": 6597}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_03.cs", "start": {"col": 25, "line": 176, "offset": 6533}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 100, "offset": 3714}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 100, "offset": 3714}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_04.cs", "start": {"col": 25, "line": 100, "offset": 3641}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 100, "offset": 3709}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_04.cs", "start": {"col": 89, "line": 100, "offset": 3705}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "a4bfca901d7dcd5a92d1d3e88b7d71071d53decae4e18e3d3293bb13ae9aadfea0399a7150f79c847d9503f37ace3be11d5b0287081d88bbeec12d5b50fbad67_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 100, "offset": 3654}, "start": {"col": 25, "line": 100, "offset": 3641}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 100, "offset": 3666}, "start": {"col": 39, "line": 100, "offset": 3655}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 100, "offset": 3709}, "start": {"col": 89, "line": 100, "offset": 3705}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_04.cs", "start": {"col": 25, "line": 100, "offset": 3641}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 142, "offset": 5404}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 142, "offset": 5404}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_04.cs", "start": {"col": 25, "line": 142, "offset": 5331}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 142, "offset": 5399}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_04.cs", "start": {"col": 89, "line": 142, "offset": 5395}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "a4bfca901d7dcd5a92d1d3e88b7d71071d53decae4e18e3d3293bb13ae9aadfea0399a7150f79c847d9503f37ace3be11d5b0287081d88bbeec12d5b50fbad67_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 142, "offset": 5344}, "start": {"col": 25, "line": 142, "offset": 5331}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 142, "offset": 5356}, "start": {"col": 39, "line": 142, "offset": 5345}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 142, "offset": 5399}, "start": {"col": 89, "line": 142, "offset": 5395}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_04.cs", "start": {"col": 25, "line": 142, "offset": 5331}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 183, "offset": 7036}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 183, "offset": 7036}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_04.cs", "start": {"col": 25, "line": 183, "offset": 6963}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 183, "offset": 7031}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_04.cs", "start": {"col": 89, "line": 183, "offset": 7027}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "a4bfca901d7dcd5a92d1d3e88b7d71071d53decae4e18e3d3293bb13ae9aadfea0399a7150f79c847d9503f37ace3be11d5b0287081d88bbeec12d5b50fbad67_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 183, "offset": 6976}, "start": {"col": 25, "line": 183, "offset": 6963}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 183, "offset": 6988}, "start": {"col": 39, "line": 183, "offset": 6977}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 183, "offset": 7031}, "start": {"col": 89, "line": 183, "offset": 7027}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_04.cs", "start": {"col": 25, "line": 183, "offset": 6963}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 99, "offset": 3707}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 99, "offset": 3707}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_05.cs", "start": {"col": 25, "line": 99, "offset": 3634}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 99, "offset": 3702}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_05.cs", "start": {"col": 89, "line": 99, "offset": 3698}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "fda992c407774d5fdaa3802fa61d83375e129813c1dfa5e78f896ad0d7a9792b45713342e196d91c2b894bc06ffd227d6340edc6c6192cfdc62260d7f8a01f08_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 99, "offset": 3647}, "start": {"col": 25, "line": 99, "offset": 3634}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 99, "offset": 3659}, "start": {"col": 39, "line": 99, "offset": 3648}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 99, "offset": 3702}, "start": {"col": 89, "line": 99, "offset": 3698}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_05.cs", "start": {"col": 25, "line": 99, "offset": 3634}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 141, "offset": 5369}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 141, "offset": 5369}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_05.cs", "start": {"col": 25, "line": 141, "offset": 5296}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 141, "offset": 5364}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_05.cs", "start": {"col": 89, "line": 141, "offset": 5360}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "fda992c407774d5fdaa3802fa61d83375e129813c1dfa5e78f896ad0d7a9792b45713342e196d91c2b894bc06ffd227d6340edc6c6192cfdc62260d7f8a01f08_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 141, "offset": 5309}, "start": {"col": 25, "line": 141, "offset": 5296}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 141, "offset": 5321}, "start": {"col": 39, "line": 141, "offset": 5310}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 141, "offset": 5364}, "start": {"col": 89, "line": 141, "offset": 5360}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_05.cs", "start": {"col": 25, "line": 141, "offset": 5296}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 182, "offset": 6987}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 182, "offset": 6987}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_05.cs", "start": {"col": 25, "line": 182, "offset": 6914}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 182, "offset": 6982}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_05.cs", "start": {"col": 89, "line": 182, "offset": 6978}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "fda992c407774d5fdaa3802fa61d83375e129813c1dfa5e78f896ad0d7a9792b45713342e196d91c2b894bc06ffd227d6340edc6c6192cfdc62260d7f8a01f08_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 182, "offset": 6927}, "start": {"col": 25, "line": 182, "offset": 6914}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 182, "offset": 6939}, "start": {"col": 39, "line": 182, "offset": 6928}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 182, "offset": 6982}, "start": {"col": 89, "line": 182, "offset": 6978}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_05.cs", "start": {"col": 25, "line": 182, "offset": 6914}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 98, "offset": 3650}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 98, "offset": 3650}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_06.cs", "start": {"col": 25, "line": 98, "offset": 3577}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 98, "offset": 3645}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_06.cs", "start": {"col": 89, "line": 98, "offset": 3641}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "86dcb4ce7c1ee6e7eb76b7afcc85831e24831d75c1b0a58e93423e8fec8bf4895f0867b7f0432e764ba36e20dfca25b95bed33d519015642c11938d2d46123b4_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 98, "offset": 3590}, "start": {"col": 25, "line": 98, "offset": 3577}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 98, "offset": 3602}, "start": {"col": 39, "line": 98, "offset": 3591}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 98, "offset": 3645}, "start": {"col": 89, "line": 98, "offset": 3641}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_06.cs", "start": {"col": 25, "line": 98, "offset": 3577}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 140, "offset": 5350}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 140, "offset": 5350}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_06.cs", "start": {"col": 25, "line": 140, "offset": 5277}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 140, "offset": 5345}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_06.cs", "start": {"col": 89, "line": 140, "offset": 5341}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "86dcb4ce7c1ee6e7eb76b7afcc85831e24831d75c1b0a58e93423e8fec8bf4895f0867b7f0432e764ba36e20dfca25b95bed33d519015642c11938d2d46123b4_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 140, "offset": 5290}, "start": {"col": 25, "line": 140, "offset": 5277}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 140, "offset": 5302}, "start": {"col": 39, "line": 140, "offset": 5291}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 140, "offset": 5345}, "start": {"col": 89, "line": 140, "offset": 5341}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_06.cs", "start": {"col": 25, "line": 140, "offset": 5277}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 181, "offset": 6988}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 181, "offset": 6988}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_06.cs", "start": {"col": 25, "line": 181, "offset": 6915}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 181, "offset": 6983}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_06.cs", "start": {"col": 89, "line": 181, "offset": 6979}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "86dcb4ce7c1ee6e7eb76b7afcc85831e24831d75c1b0a58e93423e8fec8bf4895f0867b7f0432e764ba36e20dfca25b95bed33d519015642c11938d2d46123b4_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 181, "offset": 6928}, "start": {"col": 25, "line": 181, "offset": 6915}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 181, "offset": 6940}, "start": {"col": 39, "line": 181, "offset": 6929}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 181, "offset": 6983}, "start": {"col": 89, "line": 181, "offset": 6979}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_06.cs", "start": {"col": 25, "line": 181, "offset": 6915}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 98, "offset": 3654}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 98, "offset": 3654}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_07.cs", "start": {"col": 25, "line": 98, "offset": 3581}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 98, "offset": 3649}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_07.cs", "start": {"col": 89, "line": 98, "offset": 3645}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "a5bf5f6185ea5723d4f4d0135b60750e6473984d055933ff73da5519d9efb9197134d67814cb0d10d206d61e42ec2f516ed62064085bd03b3e553300b899099c_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 98, "offset": 3594}, "start": {"col": 25, "line": 98, "offset": 3581}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 98, "offset": 3606}, "start": {"col": 39, "line": 98, "offset": 3595}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 98, "offset": 3649}, "start": {"col": 89, "line": 98, "offset": 3645}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_07.cs", "start": {"col": 25, "line": 98, "offset": 3581}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 140, "offset": 5326}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 140, "offset": 5326}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_07.cs", "start": {"col": 25, "line": 140, "offset": 5253}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 140, "offset": 5321}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_07.cs", "start": {"col": 89, "line": 140, "offset": 5317}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "a5bf5f6185ea5723d4f4d0135b60750e6473984d055933ff73da5519d9efb9197134d67814cb0d10d206d61e42ec2f516ed62064085bd03b3e553300b899099c_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 140, "offset": 5266}, "start": {"col": 25, "line": 140, "offset": 5253}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 140, "offset": 5278}, "start": {"col": 39, "line": 140, "offset": 5267}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 140, "offset": 5321}, "start": {"col": 89, "line": 140, "offset": 5317}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_07.cs", "start": {"col": 25, "line": 140, "offset": 5253}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 181, "offset": 6950}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 181, "offset": 6950}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_07.cs", "start": {"col": 25, "line": 181, "offset": 6877}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 181, "offset": 6945}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_07.cs", "start": {"col": 89, "line": 181, "offset": 6941}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "a5bf5f6185ea5723d4f4d0135b60750e6473984d055933ff73da5519d9efb9197134d67814cb0d10d206d61e42ec2f516ed62064085bd03b3e553300b899099c_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 181, "offset": 6890}, "start": {"col": 25, "line": 181, "offset": 6877}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 181, "offset": 6902}, "start": {"col": 39, "line": 181, "offset": 6891}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 181, "offset": 6945}, "start": {"col": 89, "line": 181, "offset": 6941}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_07.cs", "start": {"col": 25, "line": 181, "offset": 6877}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 106, "offset": 3786}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 106, "offset": 3786}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_08.cs", "start": {"col": 25, "line": 106, "offset": 3713}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 106, "offset": 3781}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_08.cs", "start": {"col": 89, "line": 106, "offset": 3777}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "af26c8ec63a7002a4c96f43f6eb3395605f5507ad7020a0f8086ad23491362def87d792834cacedcedffb748e2dc4c50ca4858b7130ab7d167a7f2c98c175866_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 106, "offset": 3726}, "start": {"col": 25, "line": 106, "offset": 3713}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 106, "offset": 3738}, "start": {"col": 39, "line": 106, "offset": 3727}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 106, "offset": 3781}, "start": {"col": 89, "line": 106, "offset": 3777}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_08.cs", "start": {"col": 25, "line": 106, "offset": 3713}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 148, "offset": 5484}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 148, "offset": 5484}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_08.cs", "start": {"col": 25, "line": 148, "offset": 5411}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 148, "offset": 5479}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_08.cs", "start": {"col": 89, "line": 148, "offset": 5475}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "af26c8ec63a7002a4c96f43f6eb3395605f5507ad7020a0f8086ad23491362def87d792834cacedcedffb748e2dc4c50ca4858b7130ab7d167a7f2c98c175866_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 148, "offset": 5424}, "start": {"col": 25, "line": 148, "offset": 5411}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 148, "offset": 5436}, "start": {"col": 39, "line": 148, "offset": 5425}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 148, "offset": 5479}, "start": {"col": 89, "line": 148, "offset": 5475}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_08.cs", "start": {"col": 25, "line": 148, "offset": 5411}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 189, "offset": 7120}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 189, "offset": 7120}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_08.cs", "start": {"col": 25, "line": 189, "offset": 7047}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 189, "offset": 7115}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_08.cs", "start": {"col": 89, "line": 189, "offset": 7111}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "af26c8ec63a7002a4c96f43f6eb3395605f5507ad7020a0f8086ad23491362def87d792834cacedcedffb748e2dc4c50ca4858b7130ab7d167a7f2c98c175866_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 189, "offset": 7060}, "start": {"col": 25, "line": 189, "offset": 7047}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 189, "offset": 7072}, "start": {"col": 39, "line": 189, "offset": 7061}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 189, "offset": 7115}, "start": {"col": 89, "line": 189, "offset": 7111}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_08.cs", "start": {"col": 25, "line": 189, "offset": 7047}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 93, "offset": 3447}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 93, "offset": 3447}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_09.cs", "start": {"col": 25, "line": 93, "offset": 3374}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 93, "offset": 3442}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_09.cs", "start": {"col": 89, "line": 93, "offset": 3438}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "35258548149e50576199bd9666be270cadf3395d4832a92d9d682f15ac90c7006b3c38ced55a872ccf3f6fa96a41b9ab077058363fa68f8ff9853abc5500202e_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 93, "offset": 3387}, "start": {"col": 25, "line": 93, "offset": 3374}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 93, "offset": 3399}, "start": {"col": 39, "line": 93, "offset": 3388}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 93, "offset": 3442}, "start": {"col": 89, "line": 93, "offset": 3438}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_09.cs", "start": {"col": 25, "line": 93, "offset": 3374}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 135, "offset": 5157}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 135, "offset": 5157}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_09.cs", "start": {"col": 25, "line": 135, "offset": 5084}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 135, "offset": 5152}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_09.cs", "start": {"col": 89, "line": 135, "offset": 5148}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "35258548149e50576199bd9666be270cadf3395d4832a92d9d682f15ac90c7006b3c38ced55a872ccf3f6fa96a41b9ab077058363fa68f8ff9853abc5500202e_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 135, "offset": 5097}, "start": {"col": 25, "line": 135, "offset": 5084}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 135, "offset": 5109}, "start": {"col": 39, "line": 135, "offset": 5098}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 135, "offset": 5152}, "start": {"col": 89, "line": 135, "offset": 5148}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_09.cs", "start": {"col": 25, "line": 135, "offset": 5084}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 176, "offset": 6799}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 176, "offset": 6799}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_09.cs", "start": {"col": 25, "line": 176, "offset": 6726}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 176, "offset": 6794}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_09.cs", "start": {"col": 89, "line": 176, "offset": 6790}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "35258548149e50576199bd9666be270cadf3395d4832a92d9d682f15ac90c7006b3c38ced55a872ccf3f6fa96a41b9ab077058363fa68f8ff9853abc5500202e_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 176, "offset": 6739}, "start": {"col": 25, "line": 176, "offset": 6726}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 176, "offset": 6751}, "start": {"col": 39, "line": 176, "offset": 6740}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 176, "offset": 6794}, "start": {"col": 89, "line": 176, "offset": 6790}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_09.cs", "start": {"col": 25, "line": 176, "offset": 6726}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 93, "offset": 3407}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 93, "offset": 3407}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_10.cs", "start": {"col": 25, "line": 93, "offset": 3334}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 93, "offset": 3402}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_10.cs", "start": {"col": 89, "line": 93, "offset": 3398}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "6ea1844171c5b926dfaebb51d4064b3b388b0101f183ecb74de29cfe3df5b21bcd337f472befb7058c7447dc72166f36245141706bec1eba5463b2f57f64d4a6_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 93, "offset": 3347}, "start": {"col": 25, "line": 93, "offset": 3334}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 93, "offset": 3359}, "start": {"col": 39, "line": 93, "offset": 3348}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 93, "offset": 3402}, "start": {"col": 89, "line": 93, "offset": 3398}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_10.cs", "start": {"col": 25, "line": 93, "offset": 3334}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 135, "offset": 5077}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 135, "offset": 5077}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_10.cs", "start": {"col": 25, "line": 135, "offset": 5004}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 135, "offset": 5072}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_10.cs", "start": {"col": 89, "line": 135, "offset": 5068}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "6ea1844171c5b926dfaebb51d4064b3b388b0101f183ecb74de29cfe3df5b21bcd337f472befb7058c7447dc72166f36245141706bec1eba5463b2f57f64d4a6_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 135, "offset": 5017}, "start": {"col": 25, "line": 135, "offset": 5004}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 135, "offset": 5029}, "start": {"col": 39, "line": 135, "offset": 5018}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 135, "offset": 5072}, "start": {"col": 89, "line": 135, "offset": 5068}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_10.cs", "start": {"col": 25, "line": 135, "offset": 5004}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 176, "offset": 6699}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 176, "offset": 6699}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_10.cs", "start": {"col": 25, "line": 176, "offset": 6626}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 176, "offset": 6694}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_10.cs", "start": {"col": 89, "line": 176, "offset": 6690}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "6ea1844171c5b926dfaebb51d4064b3b388b0101f183ecb74de29cfe3df5b21bcd337f472befb7058c7447dc72166f36245141706bec1eba5463b2f57f64d4a6_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 176, "offset": 6639}, "start": {"col": 25, "line": 176, "offset": 6626}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 176, "offset": 6651}, "start": {"col": 39, "line": 176, "offset": 6640}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 176, "offset": 6694}, "start": {"col": 89, "line": 176, "offset": 6690}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_10.cs", "start": {"col": 25, "line": 176, "offset": 6626}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 93, "offset": 3442}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 93, "offset": 3442}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_11.cs", "start": {"col": 25, "line": 93, "offset": 3369}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 93, "offset": 3437}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_11.cs", "start": {"col": 89, "line": 93, "offset": 3433}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "199077a7e4f5d07c9b82d1490230ca5f1b9e1ccf55b51dab76b2adaea9b788ffba960cb8499da1a1c78ed7e3e03a5e970e54e918921a605c61a6bf12281d1dc2_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 93, "offset": 3382}, "start": {"col": 25, "line": 93, "offset": 3369}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 93, "offset": 3394}, "start": {"col": 39, "line": 93, "offset": 3383}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 93, "offset": 3437}, "start": {"col": 89, "line": 93, "offset": 3433}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_11.cs", "start": {"col": 25, "line": 93, "offset": 3369}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 135, "offset": 5148}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 135, "offset": 5148}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_11.cs", "start": {"col": 25, "line": 135, "offset": 5075}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 135, "offset": 5143}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_11.cs", "start": {"col": 89, "line": 135, "offset": 5139}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "199077a7e4f5d07c9b82d1490230ca5f1b9e1ccf55b51dab76b2adaea9b788ffba960cb8499da1a1c78ed7e3e03a5e970e54e918921a605c61a6bf12281d1dc2_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 135, "offset": 5088}, "start": {"col": 25, "line": 135, "offset": 5075}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 135, "offset": 5100}, "start": {"col": 39, "line": 135, "offset": 5089}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 135, "offset": 5143}, "start": {"col": 89, "line": 135, "offset": 5139}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_11.cs", "start": {"col": 25, "line": 135, "offset": 5075}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 176, "offset": 6788}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 176, "offset": 6788}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_11.cs", "start": {"col": 25, "line": 176, "offset": 6715}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 176, "offset": 6783}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_11.cs", "start": {"col": 89, "line": 176, "offset": 6779}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "199077a7e4f5d07c9b82d1490230ca5f1b9e1ccf55b51dab76b2adaea9b788ffba960cb8499da1a1c78ed7e3e03a5e970e54e918921a605c61a6bf12281d1dc2_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 176, "offset": 6728}, "start": {"col": 25, "line": 176, "offset": 6715}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 176, "offset": 6740}, "start": {"col": 39, "line": 176, "offset": 6729}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 176, "offset": 6783}, "start": {"col": 89, "line": 176, "offset": 6779}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_11.cs", "start": {"col": 25, "line": 176, "offset": 6715}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 92, "offset": 3308}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 92, "offset": 3308}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_12.cs", "start": {"col": 25, "line": 92, "offset": 3235}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 92, "offset": 3303}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_12.cs", "start": {"col": 89, "line": 92, "offset": 3299}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "cb715de659bb9472fd6e63f7bd200bb883bd87055f37a75fef5acd31408e464dee222e8f2b75429fff529bfc893facf8938797ef3d7a05db5374c146b50276f9_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 92, "offset": 3248}, "start": {"col": 25, "line": 92, "offset": 3235}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 92, "offset": 3260}, "start": {"col": 39, "line": 92, "offset": 3249}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 92, "offset": 3303}, "start": {"col": 89, "line": 92, "offset": 3299}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_12.cs", "start": {"col": 25, "line": 92, "offset": 3235}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 93, "offset": 3458}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 93, "offset": 3458}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_13.cs", "start": {"col": 25, "line": 93, "offset": 3385}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 93, "offset": 3453}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_13.cs", "start": {"col": 89, "line": 93, "offset": 3449}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "2fa5a1217dffba0816922624f886dd9cc4121072026ea8ff719cdbd1f221befc02d6e53b8a3d79019268fa473b131a9a4ca60f3e2c3b19c1f3533ca404cf3e31_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 93, "offset": 3398}, "start": {"col": 25, "line": 93, "offset": 3385}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 93, "offset": 3410}, "start": {"col": 39, "line": 93, "offset": 3399}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 93, "offset": 3453}, "start": {"col": 89, "line": 93, "offset": 3449}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_13.cs", "start": {"col": 25, "line": 93, "offset": 3385}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 135, "offset": 5178}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 135, "offset": 5178}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_13.cs", "start": {"col": 25, "line": 135, "offset": 5105}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 135, "offset": 5173}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_13.cs", "start": {"col": 89, "line": 135, "offset": 5169}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "2fa5a1217dffba0816922624f886dd9cc4121072026ea8ff719cdbd1f221befc02d6e53b8a3d79019268fa473b131a9a4ca60f3e2c3b19c1f3533ca404cf3e31_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 135, "offset": 5118}, "start": {"col": 25, "line": 135, "offset": 5105}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 135, "offset": 5130}, "start": {"col": 39, "line": 135, "offset": 5119}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 135, "offset": 5173}, "start": {"col": 89, "line": 135, "offset": 5169}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_13.cs", "start": {"col": 25, "line": 135, "offset": 5105}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 176, "offset": 6826}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 176, "offset": 6826}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_13.cs", "start": {"col": 25, "line": 176, "offset": 6753}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 176, "offset": 6821}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_13.cs", "start": {"col": 89, "line": 176, "offset": 6817}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "2fa5a1217dffba0816922624f886dd9cc4121072026ea8ff719cdbd1f221befc02d6e53b8a3d79019268fa473b131a9a4ca60f3e2c3b19c1f3533ca404cf3e31_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 176, "offset": 6766}, "start": {"col": 25, "line": 176, "offset": 6753}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 176, "offset": 6778}, "start": {"col": 39, "line": 176, "offset": 6767}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 176, "offset": 6821}, "start": {"col": 89, "line": 176, "offset": 6817}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_13.cs", "start": {"col": 25, "line": 176, "offset": 6753}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 93, "offset": 3418}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 93, "offset": 3418}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_14.cs", "start": {"col": 25, "line": 93, "offset": 3345}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 93, "offset": 3413}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_14.cs", "start": {"col": 89, "line": 93, "offset": 3409}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "52aa392ba84267974f7f41b4b7b2f60761044bacf7214a2ebaad0e9f7a0cd2c8b21c4371b6ddf438a99cf772ad228ab21bf32b1098b2857ed5893c8253dcb623_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 93, "offset": 3358}, "start": {"col": 25, "line": 93, "offset": 3345}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 93, "offset": 3370}, "start": {"col": 39, "line": 93, "offset": 3359}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 93, "offset": 3413}, "start": {"col": 89, "line": 93, "offset": 3409}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_14.cs", "start": {"col": 25, "line": 93, "offset": 3345}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 135, "offset": 5098}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 135, "offset": 5098}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_14.cs", "start": {"col": 25, "line": 135, "offset": 5025}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 135, "offset": 5093}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_14.cs", "start": {"col": 89, "line": 135, "offset": 5089}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "52aa392ba84267974f7f41b4b7b2f60761044bacf7214a2ebaad0e9f7a0cd2c8b21c4371b6ddf438a99cf772ad228ab21bf32b1098b2857ed5893c8253dcb623_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 135, "offset": 5038}, "start": {"col": 25, "line": 135, "offset": 5025}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 135, "offset": 5050}, "start": {"col": 39, "line": 135, "offset": 5039}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 135, "offset": 5093}, "start": {"col": 89, "line": 135, "offset": 5089}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_14.cs", "start": {"col": 25, "line": 135, "offset": 5025}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 176, "offset": 6726}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 176, "offset": 6726}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_14.cs", "start": {"col": 25, "line": 176, "offset": 6653}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 176, "offset": 6721}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_14.cs", "start": {"col": 89, "line": 176, "offset": 6717}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "52aa392ba84267974f7f41b4b7b2f60761044bacf7214a2ebaad0e9f7a0cd2c8b21c4371b6ddf438a99cf772ad228ab21bf32b1098b2857ed5893c8253dcb623_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 176, "offset": 6666}, "start": {"col": 25, "line": 176, "offset": 6653}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 176, "offset": 6678}, "start": {"col": 39, "line": 176, "offset": 6667}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 176, "offset": 6721}, "start": {"col": 89, "line": 176, "offset": 6717}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_14.cs", "start": {"col": 25, "line": 176, "offset": 6653}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 95, "offset": 3430}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 95, "offset": 3430}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_15.cs", "start": {"col": 25, "line": 95, "offset": 3357}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 95, "offset": 3425}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_15.cs", "start": {"col": 89, "line": 95, "offset": 3421}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "91dd25a3515d5f1d37daddfe9c4a614deee050a229f5e4f12ec2825c665f2a09099fc34f385558d05bae4c77744398454b494137605bbc3cde0bdfc575558d0f_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 95, "offset": 3370}, "start": {"col": 25, "line": 95, "offset": 3357}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 95, "offset": 3382}, "start": {"col": 39, "line": 95, "offset": 3371}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 95, "offset": 3425}, "start": {"col": 89, "line": 95, "offset": 3421}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_15.cs", "start": {"col": 25, "line": 95, "offset": 3357}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 144, "offset": 5320}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 144, "offset": 5320}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_15.cs", "start": {"col": 25, "line": 144, "offset": 5247}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 144, "offset": 5315}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_15.cs", "start": {"col": 89, "line": 144, "offset": 5311}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "91dd25a3515d5f1d37daddfe9c4a614deee050a229f5e4f12ec2825c665f2a09099fc34f385558d05bae4c77744398454b494137605bbc3cde0bdfc575558d0f_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 144, "offset": 5260}, "start": {"col": 25, "line": 144, "offset": 5247}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 144, "offset": 5272}, "start": {"col": 39, "line": 144, "offset": 5261}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 144, "offset": 5315}, "start": {"col": 89, "line": 144, "offset": 5311}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_15.cs", "start": {"col": 25, "line": 144, "offset": 5247}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 192, "offset": 7180}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 192, "offset": 7180}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_15.cs", "start": {"col": 25, "line": 192, "offset": 7107}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 192, "offset": 7175}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_15.cs", "start": {"col": 89, "line": 192, "offset": 7171}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "91dd25a3515d5f1d37daddfe9c4a614deee050a229f5e4f12ec2825c665f2a09099fc34f385558d05bae4c77744398454b494137605bbc3cde0bdfc575558d0f_2", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 192, "offset": 7120}, "start": {"col": 25, "line": 192, "offset": 7107}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 192, "offset": 7132}, "start": {"col": 39, "line": 192, "offset": 7121}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 192, "offset": 7175}, "start": {"col": 89, "line": 192, "offset": 7171}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_15.cs", "start": {"col": 25, "line": 192, "offset": 7107}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 88, "offset": 3154}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 88, "offset": 3154}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_16.cs", "start": {"col": 25, "line": 88, "offset": 3081}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 88, "offset": 3149}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_16.cs", "start": {"col": 89, "line": 88, "offset": 3145}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "563a4313095517929afc6bad74b6b0b04987acad27379856e41afb8db6ff91d24676c0edb040de73326f9a279f275dc08ed33eb37e53e9276b12c3742ece727c_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 88, "offset": 3094}, "start": {"col": 25, "line": 88, "offset": 3081}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 88, "offset": 3106}, "start": {"col": 39, "line": 88, "offset": 3095}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 88, "offset": 3149}, "start": {"col": 89, "line": 88, "offset": 3145}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_16.cs", "start": {"col": 25, "line": 88, "offset": 3081}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 126, "offset": 4567}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 126, "offset": 4567}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_16.cs", "start": {"col": 25, "line": 126, "offset": 4494}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 126, "offset": 4562}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_16.cs", "start": {"col": 89, "line": 126, "offset": 4558}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "563a4313095517929afc6bad74b6b0b04987acad27379856e41afb8db6ff91d24676c0edb040de73326f9a279f275dc08ed33eb37e53e9276b12c3742ece727c_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 126, "offset": 4507}, "start": {"col": 25, "line": 126, "offset": 4494}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 126, "offset": 4519}, "start": {"col": 39, "line": 126, "offset": 4508}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 126, "offset": 4562}, "start": {"col": 89, "line": 126, "offset": 4558}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_16.cs", "start": {"col": 25, "line": 126, "offset": 4494}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 88, "offset": 3141}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 88, "offset": 3141}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_17.cs", "start": {"col": 25, "line": 88, "offset": 3068}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 88, "offset": 3136}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_17.cs", "start": {"col": 89, "line": 88, "offset": 3132}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "db98c6b11013581341b587b49d329508e3f5e8cf4cbf87b6ce00f5cacafd59881ebebd75d7f62f1d44c3ca587ad3fe63af27e38d59f2110765ef3831d318aabd_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 88, "offset": 3081}, "start": {"col": 25, "line": 88, "offset": 3068}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 88, "offset": 3093}, "start": {"col": 39, "line": 88, "offset": 3082}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 88, "offset": 3136}, "start": {"col": 89, "line": 88, "offset": 3132}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_17.cs", "start": {"col": 25, "line": 88, "offset": 3068}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 121, "offset": 4477}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 121, "offset": 4477}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_17.cs", "start": {"col": 25, "line": 121, "offset": 4404}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 121, "offset": 4472}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_17.cs", "start": {"col": 89, "line": 121, "offset": 4468}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "db98c6b11013581341b587b49d329508e3f5e8cf4cbf87b6ce00f5cacafd59881ebebd75d7f62f1d44c3ca587ad3fe63af27e38d59f2110765ef3831d318aabd_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 121, "offset": 4417}, "start": {"col": 25, "line": 121, "offset": 4404}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 121, "offset": 4429}, "start": {"col": 39, "line": 121, "offset": 4418}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 121, "offset": 4472}, "start": {"col": 89, "line": 121, "offset": 4468}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_17.cs", "start": {"col": 25, "line": 121, "offset": 4404}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 93, "offset": 3305}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 93, "offset": 3305}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_21.cs", "start": {"col": 25, "line": 93, "offset": 3232}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 93, "offset": 3300}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_21.cs", "start": {"col": 89, "line": 93, "offset": 3296}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "c832d27e069b2f9efc3e67980402b8e9e785a19c60c3c36a4a2f6e564e3739bd641c5f9deaca5af7bccbe505577130041fca5f69b9c1570c00acf185cca966ec_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 93, "offset": 3245}, "start": {"col": 25, "line": 93, "offset": 3232}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 93, "offset": 3257}, "start": {"col": 39, "line": 93, "offset": 3246}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 93, "offset": 3300}, "start": {"col": 89, "line": 93, "offset": 3296}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_21.cs", "start": {"col": 25, "line": 93, "offset": 3232}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 300, "offset": 11270}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 300, "offset": 11270}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_21.cs", "start": {"col": 25, "line": 300, "offset": 11197}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 300, "offset": 11265}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_21.cs", "start": {"col": 89, "line": 300, "offset": 11261}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "c832d27e069b2f9efc3e67980402b8e9e785a19c60c3c36a4a2f6e564e3739bd641c5f9deaca5af7bccbe505577130041fca5f69b9c1570c00acf185cca966ec_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 300, "offset": 11210}, "start": {"col": 25, "line": 300, "offset": 11197}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 300, "offset": 11222}, "start": {"col": 39, "line": 300, "offset": 11211}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 300, "offset": 11265}, "start": {"col": 89, "line": 300, "offset": 11261}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_21.cs", "start": {"col": 25, "line": 300, "offset": 11197}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 42, "offset": 1670}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 42, "offset": 1670}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_22b.cs", "start": {"col": 25, "line": 42, "offset": 1597}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 42, "offset": 1665}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_22b.cs", "start": {"col": 89, "line": 42, "offset": 1661}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "1ca0b86e5cdff11279dec743bc79b38dc48e6127ff59cf4968b2831fb4d09f6d4867658da106120efc76955574732d7b0609a0bd79b7e2cc5d56f99023bec88e_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 42, "offset": 1610}, "start": {"col": 25, "line": 42, "offset": 1597}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 42, "offset": 1622}, "start": {"col": 39, "line": 42, "offset": 1611}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 42, "offset": 1665}, "start": {"col": 89, "line": 42, "offset": 1661}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_22b.cs", "start": {"col": 25, "line": 42, "offset": 1597}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 155, "offset": 6690}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 155, "offset": 6690}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_22b.cs", "start": {"col": 25, "line": 155, "offset": 6617}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 93, "line": 155, "offset": 6685}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_22b.cs", "start": {"col": 89, "line": 155, "offset": 6681}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "1ca0b86e5cdff11279dec743bc79b38dc48e6127ff59cf4968b2831fb4d09f6d4867658da106120efc76955574732d7b0609a0bd79b7e2cc5d56f99023bec88e_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 155, "offset": 6630}, "start": {"col": 25, "line": 155, "offset": 6617}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 155, "offset": 6642}, "start": {"col": 39, "line": 155, "offset": 6631}}, "$X": {"abstract_content": "data", "end": {"col": 93, "line": 155, "offset": 6685}, "start": {"col": 89, "line": 155, "offset": 6681}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_22b.cs", "start": {"col": 25, "line": 155, "offset": 6617}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 88, "offset": 3225}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "dataCopy", "location": {"end": {"col": 21, "line": 76, "offset": 2632}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_31.cs", "start": {"col": 13, "line": 76, "offset": 2624}}}, {"content": "data", "location": {"end": {"col": 24, "line": 79, "offset": 2687}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_31.cs", "start": {"col": 20, "line": 79, "offset": 2683}}}], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 88, "offset": 3225}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_31.cs", "start": {"col": 25, "line": 88, "offset": 3152}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 28, "line": 76, "offset": 2639}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_31.cs", "start": {"col": 24, "line": 76, "offset": 2635}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "eb1de3be20b95e7a0c50d496dee9873dec376c9e6ab9f6974ca6bc13943cf2db458a547aa9906976e4d484c400ac1987d69f8940b57a6f769fbc46674ffdef28_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 88, "offset": 3165}, "start": {"col": 25, "line": 88, "offset": 3152}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 88, "offset": 3177}, "start": {"col": 39, "line": 88, "offset": 3166}}, "$X": {"abstract_content": "data", "end": {"col": 28, "line": 76, "offset": 2639}, "start": {"col": 24, "line": 76, "offset": 2635}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_31.cs", "start": {"col": 25, "line": 88, "offset": 3152}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 44, "offset": 1588}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 44, "offset": 1588}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_41.cs", "start": {"col": 21, "line": 44, "offset": 1515}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 44, "offset": 1583}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_41.cs", "start": {"col": 85, "line": 44, "offset": 1579}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "3e3b2a7ca4250a5988c1b044d20529a7c392710ccfd4a1fb7dd0887dac11f997a0de75fb93f2b5485dd1f1254fac09646c659f962f4c6d8bbca5b003de68cb8a_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 44, "offset": 1528}, "start": {"col": 21, "line": 44, "offset": 1515}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 44, "offset": 1540}, "start": {"col": 35, "line": 44, "offset": 1529}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 44, "offset": 1583}, "start": {"col": 85, "line": 44, "offset": 1579}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_41.cs", "start": {"col": 21, "line": 44, "offset": 1515}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 119, "offset": 4297}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 119, "offset": 4297}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_41.cs", "start": {"col": 21, "line": 119, "offset": 4224}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 119, "offset": 4292}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_41.cs", "start": {"col": 85, "line": 119, "offset": 4288}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "3e3b2a7ca4250a5988c1b044d20529a7c392710ccfd4a1fb7dd0887dac11f997a0de75fb93f2b5485dd1f1254fac09646c659f962f4c6d8bbca5b003de68cb8a_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 119, "offset": 4237}, "start": {"col": 21, "line": 119, "offset": 4224}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 119, "offset": 4249}, "start": {"col": 35, "line": 119, "offset": 4238}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 119, "offset": 4292}, "start": {"col": 85, "line": 119, "offset": 4288}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_41.cs", "start": {"col": 21, "line": 119, "offset": 4224}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 88, "offset": 3083}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 88, "offset": 3083}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_42.cs", "start": {"col": 21, "line": 88, "offset": 3010}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 88, "offset": 3078}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_42.cs", "start": {"col": 85, "line": 88, "offset": 3074}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "18e0c3afd59df0c4d27d286ed61c3e746e8534b91955b8829465eda8a976db866af7eff888e60580a0c41c34d5cc04a57cf72a768110b1261eb42ea263e11bf6_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 88, "offset": 3023}, "start": {"col": 21, "line": 88, "offset": 3010}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 88, "offset": 3035}, "start": {"col": 35, "line": 88, "offset": 3024}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 88, "offset": 3078}, "propagated_value": {"svalue_abstract_content": "BadSource(req resp)", "svalue_end": {"col": 43, "line": 79, "offset": 2592}, "svalue_start": {"col": 23, "line": 79, "offset": 2572}}, "start": {"col": 85, "line": 88, "offset": 3074}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_42.cs", "start": {"col": 21, "line": 88, "offset": 3010}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 124, "offset": 4447}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 124, "offset": 4447}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_42.cs", "start": {"col": 21, "line": 124, "offset": 4374}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 124, "offset": 4442}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_42.cs", "start": {"col": 85, "line": 124, "offset": 4438}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "18e0c3afd59df0c4d27d286ed61c3e746e8534b91955b8829465eda8a976db866af7eff888e60580a0c41c34d5cc04a57cf72a768110b1261eb42ea263e11bf6_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 124, "offset": 4387}, "start": {"col": 21, "line": 124, "offset": 4374}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 124, "offset": 4399}, "start": {"col": 35, "line": 124, "offset": 4388}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 124, "offset": 4442}, "propagated_value": {"svalue_abstract_content": "GoodG2BSource(req resp)", "svalue_end": {"col": 47, "line": 115, "offset": 3956}, "svalue_start": {"col": 23, "line": 115, "offset": 3932}}, "start": {"col": 85, "line": 124, "offset": 4438}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_42.cs", "start": {"col": 21, "line": 124, "offset": 4374}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 49, "offset": 1718}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "data", "location": {"end": {"col": 20, "line": 40, "offset": 1217}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_45.cs", "start": {"col": 16, "line": 40, "offset": 1213}}}], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 49, "offset": 1718}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_45.cs", "start": {"col": 21, "line": 49, "offset": 1645}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 30, "line": 40, "offset": 1227}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_45.cs", "start": {"col": 23, "line": 40, "offset": 1220}}, "dataBad"]]}, "engine_kind": "OSS", "fingerprint": "86c2a84aa7570e1b5fc044c9dd04b4ddb1fa0ed0c53a4f789998c4b3030ea5ed30651c46c39041d2a145fb9600c48c30f88702225aa9f844434cea9a533b9ccd_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 49, "offset": 1658}, "start": {"col": 21, "line": 49, "offset": 1645}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 49, "offset": 1670}, "start": {"col": 35, "line": 49, "offset": 1659}}, "$X": {"abstract_content": "dataBad", "end": {"col": 30, "line": 40, "offset": 1227}, "start": {"col": 23, "line": 40, "offset": 1220}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_45.cs", "start": {"col": 21, "line": 49, "offset": 1645}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 126, "offset": 4459}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "data", "location": {"end": {"col": 20, "line": 117, "offset": 3954}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_45.cs", "start": {"col": 16, "line": 117, "offset": 3950}}}], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 126, "offset": 4459}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_45.cs", "start": {"col": 21, "line": 126, "offset": 4386}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 34, "line": 117, "offset": 3968}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_45.cs", "start": {"col": 23, "line": 117, "offset": 3957}}, "dataGoodG2B"]]}, "engine_kind": "OSS", "fingerprint": "3da2665f9fbfd4a4234cc738772fa17f915a9a77bb8a342d650697cd174d9836f19aa859bdf1c88b72a13fd95159d2a93d6ef92e379a9706ebd4cbf1e5564965_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 126, "offset": 4399}, "start": {"col": 21, "line": 126, "offset": 4386}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 126, "offset": 4411}, "start": {"col": 35, "line": 126, "offset": 4400}}, "$X": {"abstract_content": "dataGoodG2B", "end": {"col": 34, "line": 117, "offset": 3968}, "start": {"col": 23, "line": 117, "offset": 3957}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_45.cs", "start": {"col": 21, "line": 126, "offset": 4386}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 40, "offset": 1527}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 40, "offset": 1527}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_51b.cs", "start": {"col": 21, "line": 40, "offset": 1454}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 40, "offset": 1522}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_51b.cs", "start": {"col": 85, "line": 40, "offset": 1518}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "2e8bcf6e8ad5d4b55d4b428ace3ab591cb822ef4e14f66232c3d92b8631f3e8efc4ff0963ad14d2befc118da5a2cd50ebcb7512f81b0201849f22a1baef37fbf_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 40, "offset": 1467}, "start": {"col": 21, "line": 40, "offset": 1454}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 40, "offset": 1479}, "start": {"col": 35, "line": 40, "offset": 1468}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 40, "offset": 1522}, "start": {"col": 85, "line": 40, "offset": 1518}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_51b.cs", "start": {"col": 21, "line": 40, "offset": 1454}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 68, "offset": 2648}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 68, "offset": 2648}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_51b.cs", "start": {"col": 21, "line": 68, "offset": 2575}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 68, "offset": 2643}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_51b.cs", "start": {"col": 85, "line": 68, "offset": 2639}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "2e8bcf6e8ad5d4b55d4b428ace3ab591cb822ef4e14f66232c3d92b8631f3e8efc4ff0963ad14d2befc118da5a2cd50ebcb7512f81b0201849f22a1baef37fbf_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 68, "offset": 2588}, "start": {"col": 21, "line": 68, "offset": 2575}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 68, "offset": 2600}, "start": {"col": 35, "line": 68, "offset": 2589}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 68, "offset": 2643}, "start": {"col": 85, "line": 68, "offset": 2639}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_51b.cs", "start": {"col": 21, "line": 68, "offset": 2575}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 40, "offset": 1542}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 40, "offset": 1542}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_52c.cs", "start": {"col": 21, "line": 40, "offset": 1469}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 40, "offset": 1537}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_52c.cs", "start": {"col": 85, "line": 40, "offset": 1533}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "11a000b795ef18b3b8f15030adc13a752e965369e86f5170efe608e5d63c3ca0424451534b151b352a35246b8872c8405f3a00ac856f84348247cfe382ad6243_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 40, "offset": 1482}, "start": {"col": 21, "line": 40, "offset": 1469}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 40, "offset": 1494}, "start": {"col": 35, "line": 40, "offset": 1483}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 40, "offset": 1537}, "start": {"col": 85, "line": 40, "offset": 1533}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_52c.cs", "start": {"col": 21, "line": 40, "offset": 1469}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 68, "offset": 2663}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 68, "offset": 2663}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_52c.cs", "start": {"col": 21, "line": 68, "offset": 2590}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 68, "offset": 2658}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_52c.cs", "start": {"col": 85, "line": 68, "offset": 2654}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "11a000b795ef18b3b8f15030adc13a752e965369e86f5170efe608e5d63c3ca0424451534b151b352a35246b8872c8405f3a00ac856f84348247cfe382ad6243_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 68, "offset": 2603}, "start": {"col": 21, "line": 68, "offset": 2590}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 68, "offset": 2615}, "start": {"col": 35, "line": 68, "offset": 2604}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 68, "offset": 2658}, "start": {"col": 85, "line": 68, "offset": 2654}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_52c.cs", "start": {"col": 21, "line": 68, "offset": 2590}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 40, "offset": 1569}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 40, "offset": 1569}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_53d.cs", "start": {"col": 21, "line": 40, "offset": 1496}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 40, "offset": 1564}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_53d.cs", "start": {"col": 85, "line": 40, "offset": 1560}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "a030e5cd7237a83bea594a4447a56c14a607b3438394e464e54136c14e5748f75e1298c5f549338fd8968ce538708da8fd533c3efd1662d764bcbc8e48174cbb_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 40, "offset": 1509}, "start": {"col": 21, "line": 40, "offset": 1496}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 40, "offset": 1521}, "start": {"col": 35, "line": 40, "offset": 1510}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 40, "offset": 1564}, "start": {"col": 85, "line": 40, "offset": 1560}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_53d.cs", "start": {"col": 21, "line": 40, "offset": 1496}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 68, "offset": 2690}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 68, "offset": 2690}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_53d.cs", "start": {"col": 21, "line": 68, "offset": 2617}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 68, "offset": 2685}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_53d.cs", "start": {"col": 85, "line": 68, "offset": 2681}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "a030e5cd7237a83bea594a4447a56c14a607b3438394e464e54136c14e5748f75e1298c5f549338fd8968ce538708da8fd533c3efd1662d764bcbc8e48174cbb_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 68, "offset": 2630}, "start": {"col": 21, "line": 68, "offset": 2617}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 68, "offset": 2642}, "start": {"col": 35, "line": 68, "offset": 2631}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 68, "offset": 2685}, "start": {"col": 85, "line": 68, "offset": 2681}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_53d.cs", "start": {"col": 21, "line": 68, "offset": 2617}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 40, "offset": 1570}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 40, "offset": 1570}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_54e.cs", "start": {"col": 21, "line": 40, "offset": 1497}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 40, "offset": 1565}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_54e.cs", "start": {"col": 85, "line": 40, "offset": 1561}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "0991d1e8bc8e966cb180e2d9b906074f83ad112a33e942602515d463446856a79da4ac03377f8ebd5af06dc9fb77f13ba94a8ad7e24f1e8ef5f8d97eb0bdb2ff_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 40, "offset": 1510}, "start": {"col": 21, "line": 40, "offset": 1497}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 40, "offset": 1522}, "start": {"col": 35, "line": 40, "offset": 1511}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 40, "offset": 1565}, "start": {"col": 85, "line": 40, "offset": 1561}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_54e.cs", "start": {"col": 21, "line": 40, "offset": 1497}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 68, "offset": 2691}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 68, "offset": 2691}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_54e.cs", "start": {"col": 21, "line": 68, "offset": 2618}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 68, "offset": 2686}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_54e.cs", "start": {"col": 85, "line": 68, "offset": 2682}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "0991d1e8bc8e966cb180e2d9b906074f83ad112a33e942602515d463446856a79da4ac03377f8ebd5af06dc9fb77f13ba94a8ad7e24f1e8ef5f8d97eb0bdb2ff_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 68, "offset": 2631}, "start": {"col": 21, "line": 68, "offset": 2618}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 68, "offset": 2643}, "start": {"col": 35, "line": 68, "offset": 2632}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 68, "offset": 2686}, "start": {"col": 85, "line": 68, "offset": 2682}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_54e.cs", "start": {"col": 21, "line": 68, "offset": 2618}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 41, "offset": 1617}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 41, "offset": 1617}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_61a.cs", "start": {"col": 21, "line": 41, "offset": 1544}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 41, "offset": 1612}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_61a.cs", "start": {"col": 85, "line": 41, "offset": 1608}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "20d621a2857b2833b22dd30b0ec85d4ec44998a296fcafc5fd48657946191a7e1ac8fa637122cbc73e41bd9c3754c99157f6f50728aa85edfc7bd8e116f50427_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 41, "offset": 1557}, "start": {"col": 21, "line": 41, "offset": 1544}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 41, "offset": 1569}, "start": {"col": 35, "line": 41, "offset": 1558}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 41, "offset": 1612}, "propagated_value": {"svalue_abstract_content": "CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_61b.BadSource(req resp)", "svalue_end": {"col": 97, "line": 32, "offset": 1126}, "svalue_start": {"col": 23, "line": 32, "offset": 1052}}, "start": {"col": 85, "line": 41, "offset": 1608}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_61a.cs", "start": {"col": 21, "line": 41, "offset": 1544}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 75, "offset": 2973}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 75, "offset": 2973}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_61a.cs", "start": {"col": 21, "line": 75, "offset": 2900}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 75, "offset": 2968}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_61a.cs", "start": {"col": 85, "line": 75, "offset": 2964}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "20d621a2857b2833b22dd30b0ec85d4ec44998a296fcafc5fd48657946191a7e1ac8fa637122cbc73e41bd9c3754c99157f6f50728aa85edfc7bd8e116f50427_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 75, "offset": 2913}, "start": {"col": 21, "line": 75, "offset": 2900}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 75, "offset": 2925}, "start": {"col": 35, "line": 75, "offset": 2914}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 75, "offset": 2968}, "propagated_value": {"svalue_abstract_content": "CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_61b.GoodG2BSource(req resp)", "svalue_end": {"col": 101, "line": 66, "offset": 2482}, "svalue_start": {"col": 23, "line": 66, "offset": 2404}}, "start": {"col": 85, "line": 75, "offset": 2964}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_61a.cs", "start": {"col": 21, "line": 75, "offset": 2900}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 41, "offset": 1571}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 41, "offset": 1571}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_66b.cs", "start": {"col": 21, "line": 41, "offset": 1498}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 41, "offset": 1566}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_66b.cs", "start": {"col": 85, "line": 41, "offset": 1562}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "3261f309e11064863a88202d7db6ccd271964083a08168dff889cdd7f22351afa1359aa4fa4be295108d31a77b75cb21b0125efd95c6c88c186fa861b86f6854_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 41, "offset": 1511}, "start": {"col": 21, "line": 41, "offset": 1498}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 41, "offset": 1523}, "start": {"col": 35, "line": 41, "offset": 1512}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 41, "offset": 1566}, "start": {"col": 85, "line": 41, "offset": 1562}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_66b.cs", "start": {"col": 21, "line": 41, "offset": 1498}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 70, "offset": 2736}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 70, "offset": 2736}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_66b.cs", "start": {"col": 21, "line": 70, "offset": 2663}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 70, "offset": 2731}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_66b.cs", "start": {"col": 85, "line": 70, "offset": 2727}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "3261f309e11064863a88202d7db6ccd271964083a08168dff889cdd7f22351afa1359aa4fa4be295108d31a77b75cb21b0125efd95c6c88c186fa861b86f6854_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 70, "offset": 2676}, "start": {"col": 21, "line": 70, "offset": 2663}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 70, "offset": 2688}, "start": {"col": 35, "line": 70, "offset": 2677}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 70, "offset": 2731}, "start": {"col": 85, "line": 70, "offset": 2727}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_66b.cs", "start": {"col": 21, "line": 70, "offset": 2663}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 41, "offset": 1643}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 41, "offset": 1643}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_67b.cs", "start": {"col": 21, "line": 41, "offset": 1570}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 41, "offset": 1638}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_67b.cs", "start": {"col": 85, "line": 41, "offset": 1634}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "ba60e9d98227d92d6e595e6a5d9446fcaf0ec745dac585d9850ff3b6cad8eedbd02e823e5aef1d2428a4cace545d8a18f44fdf4e805538a9c3df72cc9e7b96f2_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 41, "offset": 1583}, "start": {"col": 21, "line": 41, "offset": 1570}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 41, "offset": 1595}, "start": {"col": 35, "line": 41, "offset": 1584}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 41, "offset": 1638}, "propagated_value": {"svalue_abstract_content": "dataContainer.containerOne", "svalue_end": {"col": 49, "line": 32, "offset": 1152}, "svalue_start": {"col": 23, "line": 32, "offset": 1126}}, "start": {"col": 85, "line": 41, "offset": 1634}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_67b.cs", "start": {"col": 21, "line": 41, "offset": 1570}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 70, "offset": 2881}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 70, "offset": 2881}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_67b.cs", "start": {"col": 21, "line": 70, "offset": 2808}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 70, "offset": 2876}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_67b.cs", "start": {"col": 85, "line": 70, "offset": 2872}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "ba60e9d98227d92d6e595e6a5d9446fcaf0ec745dac585d9850ff3b6cad8eedbd02e823e5aef1d2428a4cace545d8a18f44fdf4e805538a9c3df72cc9e7b96f2_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 70, "offset": 2821}, "start": {"col": 21, "line": 70, "offset": 2808}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 70, "offset": 2833}, "start": {"col": 35, "line": 70, "offset": 2822}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 70, "offset": 2876}, "propagated_value": {"svalue_abstract_content": "dataContainer.containerOne", "svalue_end": {"col": 49, "line": 61, "offset": 2390}, "svalue_start": {"col": 23, "line": 61, "offset": 2364}}, "start": {"col": 85, "line": 70, "offset": 2872}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_67b.cs", "start": {"col": 21, "line": 70, "offset": 2808}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 41, "offset": 1613}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 41, "offset": 1613}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_68b.cs", "start": {"col": 21, "line": 41, "offset": 1540}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 41, "offset": 1608}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_68b.cs", "start": {"col": 85, "line": 41, "offset": 1604}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "859b1d218e44ecd76b507d07d1a5ed1852bc672ba42a0b08d7d60056c17b2e85ed34637722db7b6e5d5c543b4f05c6c3dced46bd43059825a045fe396bdcd600_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 41, "offset": 1553}, "start": {"col": 21, "line": 41, "offset": 1540}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 41, "offset": 1565}, "start": {"col": 35, "line": 41, "offset": 1554}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 41, "offset": 1608}, "propagated_value": {"svalue_abstract_content": "CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_68a.data", "svalue_end": {"col": 81, "line": 32, "offset": 1122}, "svalue_start": {"col": 23, "line": 32, "offset": 1064}}, "start": {"col": 85, "line": 41, "offset": 1604}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_68b.cs", "start": {"col": 21, "line": 41, "offset": 1540}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 70, "offset": 2803}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 70, "offset": 2803}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_68b.cs", "start": {"col": 21, "line": 70, "offset": 2730}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 70, "offset": 2798}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_68b.cs", "start": {"col": 85, "line": 70, "offset": 2794}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "859b1d218e44ecd76b507d07d1a5ed1852bc672ba42a0b08d7d60056c17b2e85ed34637722db7b6e5d5c543b4f05c6c3dced46bd43059825a045fe396bdcd600_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 70, "offset": 2743}, "start": {"col": 21, "line": 70, "offset": 2730}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 70, "offset": 2755}, "start": {"col": 35, "line": 70, "offset": 2744}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 70, "offset": 2798}, "propagated_value": {"svalue_abstract_content": "CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_68a.data", "svalue_end": {"col": 81, "line": 61, "offset": 2312}, "svalue_start": {"col": 23, "line": 61, "offset": 2254}}, "start": {"col": 85, "line": 70, "offset": 2794}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_68b.cs", "start": {"col": 21, "line": 70, "offset": 2730}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 42, "offset": 1593}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "data", "location": {"end": {"col": 20, "line": 33, "offset": 1081}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_71b.cs", "start": {"col": 16, "line": 33, "offset": 1077}}}], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 42, "offset": 1593}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_71b.cs", "start": {"col": 21, "line": 42, "offset": 1520}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 41, "line": 33, "offset": 1102}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_71b.cs", "start": {"col": 23, "line": 33, "offset": 1084}}, "(string)dataObject"]]}, "engine_kind": "OSS", "fingerprint": "21813103b6235f4e121710429f1b075b0a5264c6d8a981a81243de137386a6853bd7f23befda7e7068999402489718191ba737437943d221778b87b6054d6710_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 42, "offset": 1533}, "start": {"col": 21, "line": 42, "offset": 1520}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 42, "offset": 1545}, "start": {"col": 35, "line": 42, "offset": 1534}}, "$X": {"abstract_content": "(string dataObject", "end": {"col": 41, "line": 33, "offset": 1102}, "start": {"col": 23, "line": 33, "offset": 1084}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_71b.cs", "start": {"col": 21, "line": 42, "offset": 1520}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 71, "offset": 2763}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "data", "location": {"end": {"col": 20, "line": 62, "offset": 2251}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_71b.cs", "start": {"col": 16, "line": 62, "offset": 2247}}}], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 71, "offset": 2763}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_71b.cs", "start": {"col": 21, "line": 71, "offset": 2690}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 41, "line": 62, "offset": 2272}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_71b.cs", "start": {"col": 23, "line": 62, "offset": 2254}}, "(string)dataObject"]]}, "engine_kind": "OSS", "fingerprint": "21813103b6235f4e121710429f1b075b0a5264c6d8a981a81243de137386a6853bd7f23befda7e7068999402489718191ba737437943d221778b87b6054d6710_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 71, "offset": 2703}, "start": {"col": 21, "line": 71, "offset": 2690}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 71, "offset": 2715}, "start": {"col": 35, "line": 71, "offset": 2704}}, "$X": {"abstract_content": "(string dataObject", "end": {"col": 41, "line": 62, "offset": 2272}, "start": {"col": 23, "line": 62, "offset": 2254}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_71b.cs", "start": {"col": 21, "line": 71, "offset": 2690}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 42, "offset": 1619}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "data", "location": {"end": {"col": 20, "line": 33, "offset": 1100}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_72b.cs", "start": {"col": 16, "line": 33, "offset": 1096}}}], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 42, "offset": 1619}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_72b.cs", "start": {"col": 21, "line": 42, "offset": 1546}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 48, "line": 33, "offset": 1128}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_72b.cs", "start": {"col": 23, "line": 33, "offset": 1103}}, "(string) dataHashtable[2]"]]}, "engine_kind": "OSS", "fingerprint": "c355b82a338970723deaa0775f936f2996581557ea45b986ad36c30c26f3878c8f598de7e8dc5a8d4a4efd2942dd1e3a35ca652d736aa9c1d60bfbd58898b536_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 42, "offset": 1559}, "start": {"col": 21, "line": 42, "offset": 1546}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 42, "offset": 1571}, "start": {"col": 35, "line": 42, "offset": 1560}}, "$X": {"abstract_content": "(string dataHashtable[[2]]", "end": {"col": 48, "line": 33, "offset": 1128}, "start": {"col": 23, "line": 33, "offset": 1103}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_72b.cs", "start": {"col": 21, "line": 42, "offset": 1546}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 71, "offset": 2802}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "data", "location": {"end": {"col": 20, "line": 62, "offset": 2283}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_72b.cs", "start": {"col": 16, "line": 62, "offset": 2279}}}], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 71, "offset": 2802}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_72b.cs", "start": {"col": 21, "line": 71, "offset": 2729}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 48, "line": 62, "offset": 2311}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_72b.cs", "start": {"col": 23, "line": 62, "offset": 2286}}, "(string) dataHashtable[2]"]]}, "engine_kind": "OSS", "fingerprint": "c355b82a338970723deaa0775f936f2996581557ea45b986ad36c30c26f3878c8f598de7e8dc5a8d4a4efd2942dd1e3a35ca652d736aa9c1d60bfbd58898b536_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 71, "offset": 2742}, "start": {"col": 21, "line": 71, "offset": 2729}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 71, "offset": 2754}, "start": {"col": 35, "line": 71, "offset": 2743}}, "$X": {"abstract_content": "(string dataHashtable[[2]]", "end": {"col": 48, "line": 62, "offset": 2311}, "start": {"col": 23, "line": 62, "offset": 2286}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_72b.cs", "start": {"col": 21, "line": 71, "offset": 2729}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 42, "offset": 1638}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 42, "offset": 1638}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_73b.cs", "start": {"col": 21, "line": 42, "offset": 1565}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 42, "offset": 1633}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_73b.cs", "start": {"col": 85, "line": 42, "offset": 1629}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "500a6122f4187f49105e19c97ed6f2a187ab045572f19259842904a886e1aabaea3dc091aaf086d8e77aee2228ad84694a70532a2527c61b2dbbd8cf96478c37_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 42, "offset": 1578}, "start": {"col": 21, "line": 42, "offset": 1565}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 42, "offset": 1590}, "start": {"col": 35, "line": 42, "offset": 1579}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 42, "offset": 1633}, "propagated_value": {"svalue_abstract_content": "dataLinkedList.Last.Value", "svalue_end": {"col": 48, "line": 33, "offset": 1147}, "svalue_start": {"col": 23, "line": 33, "offset": 1122}}, "start": {"col": 85, "line": 42, "offset": 1629}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_73b.cs", "start": {"col": 21, "line": 42, "offset": 1565}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 71, "offset": 2831}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 71, "offset": 2831}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_73b.cs", "start": {"col": 21, "line": 71, "offset": 2758}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 71, "offset": 2826}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_73b.cs", "start": {"col": 85, "line": 71, "offset": 2822}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "500a6122f4187f49105e19c97ed6f2a187ab045572f19259842904a886e1aabaea3dc091aaf086d8e77aee2228ad84694a70532a2527c61b2dbbd8cf96478c37_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 71, "offset": 2771}, "start": {"col": 21, "line": 71, "offset": 2758}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 71, "offset": 2783}, "start": {"col": 35, "line": 71, "offset": 2772}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 71, "offset": 2826}, "propagated_value": {"svalue_abstract_content": "dataLinkedList.Last.Value", "svalue_end": {"col": 48, "line": 62, "offset": 2340}, "svalue_start": {"col": 23, "line": 62, "offset": 2315}}, "start": {"col": 85, "line": 71, "offset": 2822}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_73b.cs", "start": {"col": 21, "line": 71, "offset": 2758}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 42, "offset": 1634}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 42, "offset": 1634}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_74b.cs", "start": {"col": 21, "line": 42, "offset": 1561}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 42, "offset": 1629}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_74b.cs", "start": {"col": 85, "line": 42, "offset": 1625}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "43103fc87b0065679e1d6047fbaf73e4ba1f6f0ea01ecf98be8d04f29a130e5173fd2f0e05f8ae2746361e06d0689f43fe32b2b154a8f00ab913fdd5d972be1f_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 42, "offset": 1574}, "start": {"col": 21, "line": 42, "offset": 1561}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 42, "offset": 1586}, "start": {"col": 35, "line": 42, "offset": 1575}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 42, "offset": 1629}, "start": {"col": 85, "line": 42, "offset": 1625}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_74b.cs", "start": {"col": 21, "line": 42, "offset": 1561}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 71, "offset": 2824}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 71, "offset": 2824}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_74b.cs", "start": {"col": 21, "line": 71, "offset": 2751}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 71, "offset": 2819}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_74b.cs", "start": {"col": 85, "line": 71, "offset": 2815}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "43103fc87b0065679e1d6047fbaf73e4ba1f6f0ea01ecf98be8d04f29a130e5173fd2f0e05f8ae2746361e06d0689f43fe32b2b154a8f00ab913fdd5d972be1f_1", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 71, "offset": 2764}, "start": {"col": 21, "line": 71, "offset": 2751}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 71, "offset": 2776}, "start": {"col": 35, "line": 71, "offset": 2765}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 71, "offset": 2819}, "start": {"col": 85, "line": 71, "offset": 2815}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_74b.cs", "start": {"col": 21, "line": 71, "offset": 2751}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 55, "line": 80, "offset": 2746}, "extra": {"engine_kind": "OSS", "fingerprint": "7897e524fb6d801c253c546bec723d433f82c4a2333fa3cd02781a6ce5de69d9ee2f72edf86ccb777ba43ce24e39fefb987275b305e99822167d74433d4fbba7_0", "is_ignored": false, "lines": "            BinaryFormatter bf = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_75a.cs", "start": {"col": 13, "line": 80, "offset": 2704}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 55, "line": 146, "offset": 5061}, "extra": {"engine_kind": "OSS", "fingerprint": "7897e524fb6d801c253c546bec723d433f82c4a2333fa3cd02781a6ce5de69d9ee2f72edf86ccb777ba43ce24e39fefb987275b305e99822167d74433d4fbba7_1", "is_ignored": false, "lines": "            BinaryFormatter bf = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_75a.cs", "start": {"col": 13, "line": 146, "offset": 5019}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 55, "line": 205, "offset": 7206}, "extra": {"engine_kind": "OSS", "fingerprint": "7897e524fb6d801c253c546bec723d433f82c4a2333fa3cd02781a6ce5de69d9ee2f72edf86ccb777ba43ce24e39fefb987275b305e99822167d74433d4fbba7_2", "is_ignored": false, "lines": "            BinaryFormatter bf = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_75a.cs", "start": {"col": 13, "line": 205, "offset": 7164}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 48, "line": 38, "offset": 1267}, "extra": {"engine_kind": "OSS", "fingerprint": "8b31e007e375c685524a6e5d11136e15fe6a069dd1ab5957d7d99697bbda68d9c9f8d7032809d55b4eb1706bdd3e8f8b5afcd84c91aa9b9c2f9611722c198096_0", "is_ignored": false, "lines": "            var binForm = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_75b.cs", "start": {"col": 17, "line": 38, "offset": 1236}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 53, "offset": 2074}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "data", "location": {"end": {"col": 21, "line": 43, "offset": 1491}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_75b.cs", "start": {"col": 17, "line": 43, "offset": 1487}}}], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 53, "offset": 2074}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_75b.cs", "start": {"col": 25, "line": 53, "offset": 2001}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 62, "line": 43, "offset": 1532}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_75b.cs", "start": {"col": 24, "line": 43, "offset": 1494}}, "(string)binForm.Deserialize(memStream)"]]}, "engine_kind": "OSS", "fingerprint": "d7e295385f7ba441be7fe2a6f57a6f9853ca795e279690e2683709424b012b1bfdb00f721681d0afd48e2e02b03fe47d723f203af907f99d735cec9242da8814_0", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 53, "offset": 2014}, "start": {"col": 25, "line": 53, "offset": 2001}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 53, "offset": 2026}, "start": {"col": 39, "line": 53, "offset": 2015}}, "$X": {"abstract_content": "(string binForm.Deserialize(memStream)", "end": {"col": 62, "line": 43, "offset": 1532}, "start": {"col": 24, "line": 43, "offset": 1494}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_75b.cs", "start": {"col": 25, "line": 53, "offset": 2001}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 48, "line": 81, "offset": 3061}, "extra": {"engine_kind": "OSS", "fingerprint": "8b31e007e375c685524a6e5d11136e15fe6a069dd1ab5957d7d99697bbda68d9c9f8d7032809d55b4eb1706bdd3e8f8b5afcd84c91aa9b9c2f9611722c198096_1", "is_ignored": false, "lines": "            var binForm = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_75b.cs", "start": {"col": 17, "line": 81, "offset": 3030}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 98, "line": 96, "offset": 3868}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "data", "location": {"end": {"col": 21, "line": 86, "offset": 3285}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_75b.cs", "start": {"col": 17, "line": 86, "offset": 3281}}}], "taint_sink": ["CliLoc", [{"end": {"col": 98, "line": 96, "offset": 3868}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_75b.cs", "start": {"col": 25, "line": 96, "offset": 3795}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 62, "line": 86, "offset": 3326}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_75b.cs", "start": {"col": 24, "line": 86, "offset": 3288}}, "(string)binForm.Deserialize(memStream)"]]}, "engine_kind": "OSS", "fingerprint": "d7e295385f7ba441be7fe2a6f57a6f9853ca795e279690e2683709424b012b1bfdb00f721681d0afd48e2e02b03fe47d723f203af907f99d735cec9242da8814_1", "is_ignored": false, "lines": "                        badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 38, "line": 96, "offset": 3808}, "start": {"col": 25, "line": 96, "offset": 3795}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 50, "line": 96, "offset": 3820}, "start": {"col": 39, "line": 96, "offset": 3809}}, "$X": {"abstract_content": "(string binForm.Deserialize(memStream)", "end": {"col": 62, "line": 86, "offset": 3326}, "start": {"col": 24, "line": 86, "offset": 3288}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_75b.cs", "start": {"col": 25, "line": 96, "offset": 3795}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 48, "line": 122, "offset": 4830}, "extra": {"engine_kind": "OSS", "fingerprint": "8b31e007e375c685524a6e5d11136e15fe6a069dd1ab5957d7d99697bbda68d9c9f8d7032809d55b4eb1706bdd3e8f8b5afcd84c91aa9b9c2f9611722c198096_2", "is_ignored": false, "lines": "            var binForm = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_75b.cs", "start": {"col": 17, "line": 122, "offset": 4799}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 40, "offset": 1549}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 40, "offset": 1549}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_81_bad.cs", "start": {"col": 21, "line": 40, "offset": 1476}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 40, "offset": 1544}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_81_bad.cs", "start": {"col": 85, "line": 40, "offset": 1540}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "f38517dabc8a61cfa96d5ff9f63618ba9fbf7f812ddf0d4f0abf2e238b33a0a02281a5d8c000a04870185200ee57f4716d5dc3b173bb2338d0949b16a6c4eacd_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 40, "offset": 1489}, "start": {"col": 21, "line": 40, "offset": 1476}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 40, "offset": 1501}, "start": {"col": 35, "line": 40, "offset": 1490}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 40, "offset": 1544}, "start": {"col": 85, "line": 40, "offset": 1540}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_81_bad.cs", "start": {"col": 21, "line": 40, "offset": 1476}}, {"check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "end": {"col": 94, "line": 41, "offset": 1564}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 94, "line": 41, "offset": 1564}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_81_goodG2B.cs", "start": {"col": 21, "line": 41, "offset": 1491}}, "badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";"]], "taint_source": ["CliLoc", [{"end": {"col": 89, "line": 41, "offset": 1559}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_81_goodG2B.cs", "start": {"col": 85, "line": 41, "offset": 1555}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "1a31407e8a50b8f33197e34fd279bad738d19770e8f4af275aeaa58389266488b5a79a5cac341e9c08ff636fd129cffe600356981c5554f19a9c47dd3cc2dce6_0", "is_ignored": false, "lines": "                    badSqlCommand.CommandText = \"select * from users where name='\" +data+\"'\";", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "x8UxeP", "url": "https://semgrep.dev/playground/r/DkT6Rg2/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "version_id": "DkT6Rg2"}}, "shortlink": "https://sg.run/d2Xd", "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli", "subcategory": ["audit"], "technology": ["csharp"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "CommandText", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CMD": {"abstract_content": "badSqlCommand", "end": {"col": 34, "line": 41, "offset": 1504}, "start": {"col": 21, "line": 41, "offset": 1491}}, "$PATTERN": {"abstract_content": "CommandText", "end": {"col": 46, "line": 41, "offset": 1516}, "start": {"col": 35, "line": 41, "offset": 1505}}, "$X": {"abstract_content": "data", "end": {"col": 89, "line": 41, "offset": 1559}, "start": {"col": 85, "line": 41, "offset": 1555}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_Listen_tcp_ExecuteScalar_81_goodG2B.cs", "start": {"col": 21, "line": 41, "offset": 1491}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 55, "line": 63, "offset": 2251}, "extra": {"engine_kind": "OSS", "fingerprint": "e48f55b0475b859ca89e84b46c106ab1da3cb5630eeab8574813aee78d9c3708c46573fae6534018c5b90292a80af3a055bb8380ce3d8616924847d62dd2e8d6_0", "is_ignored": false, "lines": "            BinaryFormatter bf = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_NetClient_CommandText_75a.cs", "start": {"col": 13, "line": 63, "offset": 2209}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 55, "line": 113, "offset": 4100}, "extra": {"engine_kind": "OSS", "fingerprint": "e48f55b0475b859ca89e84b46c106ab1da3cb5630eeab8574813aee78d9c3708c46573fae6534018c5b90292a80af3a055bb8380ce3d8616924847d62dd2e8d6_1", "is_ignored": false, "lines": "            BinaryFormatter bf = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_NetClient_CommandText_75a.cs", "start": {"col": 13, "line": 113, "offset": 4058}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 55, "line": 156, "offset": 5779}, "extra": {"engine_kind": "OSS", "fingerprint": "e48f55b0475b859ca89e84b46c106ab1da3cb5630eeab8574813aee78d9c3708c46573fae6534018c5b90292a80af3a055bb8380ce3d8616924847d62dd2e8d6_2", "is_ignored": false, "lines": "            BinaryFormatter bf = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_NetClient_CommandText_75a.cs", "start": {"col": 13, "line": 156, "offset": 5737}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 48, "line": 38, "offset": 1262}, "extra": {"engine_kind": "OSS", "fingerprint": "8881bae4928ce5cc1a5a2c82efad47b0b0f3679376b30eb8793ac188d44b68172ea14be797e959dc1f4be9f5721f072d8eed3a8000e2513759a6d205e97c3de5_0", "is_ignored": false, "lines": "            var binForm = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_NetClient_CommandText_75b.cs", "start": {"col": 17, "line": 38, "offset": 1231}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 48, "line": 100, "offset": 3845}, "extra": {"engine_kind": "OSS", "fingerprint": "8881bae4928ce5cc1a5a2c82efad47b0b0f3679376b30eb8793ac188d44b68172ea14be797e959dc1f4be9f5721f072d8eed3a8000e2513759a6d205e97c3de5_1", "is_ignored": false, "lines": "            var binForm = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_NetClient_CommandText_75b.cs", "start": {"col": 17, "line": 100, "offset": 3814}}, {"check_id": "csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "end": {"col": 48, "line": 160, "offset": 6403}, "extra": {"engine_kind": "OSS", "fingerprint": "8881bae4928ce5cc1a5a2c82efad47b0b0f3679376b30eb8793ac188d44b68172ea14be797e959dc1f4be9f5721f072d8eed3a8000e2513759a6d205e97c3de5_2", "is_ignored": false, "lines": "            var binForm = new BinaryFormatter();", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "bwUOjK", "url": "https://semgrep.dev/playground/r/jQTgYD5/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "version_id": "jQTgYD5"}}, "shortlink": "https://sg.run/ZeXW", "source": "https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization", "subcategory": ["vuln"], "technology": [".net"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/federico/Developer/Juliet/csh-1.3/src/testcases/CWE89_SQL_Injection/s01/CWE89_SQL_Injection__Web_NetClient_CommandText_75b.cs", "start": {"col": 17, "line": 160, "offset": 6372}}], "skipped_rules": [], "version": "1.62.0"}